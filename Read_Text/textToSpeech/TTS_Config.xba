<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="TTS_Config" script:language="StarBasic">Rem *  *  *  *  * BASIC *  *  *  *  *
&apos;&apos; TTS_Config
&apos;&apos; # Configuration tools
&apos;&apos; 
&apos;&apos; These procedures make dialogues, get settings and write settings.
&apos;&apos; Dialogues in Read Text Extension are updated each time that you see
&apos;&apos; them. You can immediately change the dialogue language from the display
&apos;&apos; preferences field of the main dialogue.
&apos;&apos; 
&apos;&apos; ## Audio tracks
&apos;&apos; 
&apos;&apos; An mp3 album can have up to 255 tracks. This extension uses the document
&apos;&apos; *title* as the album title. The track number is the number of times you
&apos;&apos; have created a sound file from a document with the same title. if the
&apos;&apos; track number is over 255, then the counter restarts at 1.
&apos;&apos; 
&apos;&apos; ### Title vs.Â file name
&apos;&apos; 
&apos;&apos; The document title is *not* the same as the file name, and any number of
&apos;&apos; files can have the same title. The title is used as the album name of
&apos;&apos; exported sound files. You can assemble an album made up of different
&apos;&apos; documents, by setting the title of each document to the same value. Use
&apos;&apos; *File - Properties - Description - Title* to set a document title.
&apos;&apos;
Option Explicit
&apos; Variable holding the dialog box.
Private f_dlgSpeechSetup As Variant
Private f_dlgJsonEdit As Variant
Private f_dlgAboutReadSelection As Variant
&apos; Persistent information about the current recording track and
&apos; the URL of last processed document.

Sub ClearWorkingCountryLanguage()
	s_CaReadTextExtensionWorkingCountryLanguage = &quot;&quot;
End Sub


Sub SetWorkingCountryLanguage()
	s_CaReadTextExtensionWorkingCountryLanguage = fsSelectionLanguageAndRegion(True)
End Sub


Function fiMyCurrentAudioTrack( _
	ByVal bIncrement) As Integer
	fiMyCurrentAudioTrack = 1
	On Error Goto fiMyCurrentAudioTrackErr
	If bIncrement Then
		&apos; Add one to the track index
		If s_CaReadTextExtensionLastSpokenDocTitle = fsThisDocTitle Then
			If i_CaReadTextExtensionLastSpokenTrack &lt; 256 And _
				i_CaReadTextExtensionLastSpokenTrack &gt; 0 Then
				i_CaReadTextExtensionLastSpokenTrack = _
				i_CaReadTextExtensionLastSpokenTrack + 1
			Else
				i_CaReadTextExtensionLastSpokenTrack = 1
			End If
		Else
			i_CaReadTextExtensionLastSpokenTrack = 1
			s_CaReadTextExtensionLastSpokenDocTitle = fsThisDocTitle
		End If
	Else
		If Not(s_CaReadTextExtensionLastSpokenDocTitle = fsThisDocTitle) Then
			i_CaReadTextExtensionLastSpokenTrack = 1
			s_CaReadTextExtensionLastSpokenDocTitle = fsThisDocTitle
		End If
	End If
	fiMyCurrentAudioTrack = i_CaReadTextExtensionLastSpokenTrack
	Exit Function
	fiMyCurrentAudioTrackErr:
	
	fiMyCurrentAudioTrack = 1
	i_CaReadTextExtensionLastSpokenTrack = 1
	s_CaReadTextExtensionLastSpokenDocTitle = fsThisDocTitle
End Function


Function SaveAsJsonDialog(_default As String) As String
	&apos; Returns a URI file path or `&apos;&apos;` if you hit *Cancel*&apos;
	Dim _file_list As Object
	SaveAsJsonDialog = &quot;&quot;
	Dim _file_picker_args As Variant : _file_picker_args = Array(_
	com.sun.star.ui.dialogs.TemplateDescription.FILESAVE_AUTOEXTENSION)	
	Dim oDlg As Object : oDlg = createUnoService(_
	&quot;com.sun.star.ui.dialogs.FilePicker&quot;)
	With oDlg
		.initialize(_file_picker_args())
		.setMultiSelectionMode(False)
		.SetDefaultName(_default)
		.appendFilter(&quot;JavaScript Object Notation (.json)&quot;, &quot;*.json&quot;)
		.appendFilter(&quot;JavaScript (.js)&quot;, &quot;*.js&quot;)
		.appendFilter(&quot;Pronunication Lexicon Specification (.lmxl)&quot;, &quot;*.lmxl&quot;) &apos; via IBM
		.appendFilter(&quot;Pronunication Lexicon Specification (.pls)&quot;, &quot;*.pls&quot;) &apos; Accessible ePub 3 book
		.appendFilter(&quot;Pronunication Lexicon Specification (.xml)&quot;, &quot;*.xml&quot;)  &apos; generic
		.CurrentFilter = &quot;JavaScript Object Notation (.json)&quot;
		.SetValue(com.sun.star.ui.dialogs.ExtendedFilePickerElementIds.CHECKBOX_AUTOEXTENSION, 0, True)
		.SetValue(com.sun.star.ui.dialogs.ExtendedFilePickerElementIds.CHECKBOX_PASSWORD, 0, False)
		.EnableControl(com.sun.star.ui.dialogs.ExtendedFilePickerElementIds.CHECKBOX_PASSWORD, False)
		.setTitle(fsLookUpTerm2(_
			&quot;s_speech-properties&quot;, fsDisplayLanguage()))
		If .execute() then
			_file_list = .getFiles()
			SaveAsJsonDialog = _file_list(0)
			If Instr(SaveAsJsonDialog, &quot;.&quot;) = 0 Then
				SaveAsJsonDialog = SaveAsJsonDialog &amp; &quot;.json&quot;
			End If
		End If
	End With
End Function


Function OpenJsonFileDialog() As String
	&apos; Returns a file path if found or `&apos;&apos;` if Cancelled.
	&apos; Adapted from LibreOffice Ref Card LibreOffice Basic Dialogs
	&apos; v. 103, 2018.01.17
	&apos; &lt;https://documentation.libreoffice.org&gt;
	OpenJsonFileDialog = &quot;&quot;
	Dim FileName As String : FileName = &quot;&quot;
	Dim oFilePicker As Object : oFilePicker = CreateUnoService(_
	&quot;com.sun.star.ui.dialogs.FilePicker&quot;)
	With oFilePicker
		.DisplayDirectory = ConvertToURL(fsGetHomeDir())
		.appendFilter(&quot;JavaScript Object Notation (.json)&quot;, &quot;*.json&quot;)
		.appendFilter(&quot;JavaScript (.js)&quot;, &quot;*.js&quot;)
		.CurrentFilter = &quot;JavaScript Object Notation (.json)&quot;
		.Title = fsLookUpTerm2(_
			&quot;s_speech-properties&quot;, fsDisplayLanguage())
		If .execute = _
			com.sun.star.ui.dialogs.ExecutableDialogResults.OK Then
			FileName = .Files(0)
		End If
	End With
	OpenJsonFileDialog = FileName
End Function


Sub ImportJsonPhonemeTable(Event)
	&apos; Dialog2 _open
	Dim _mouse_alt As Integer : _mouse_alt = 2
	Dim _mouse_event As Integer : _mouse_event = fiMyMouseEventToInt(Event)
	Select Case _mouse_event
		Case _mouse_alt
		ResetPhonemesGit()
		Exit Sub
	End Select
	Dim _in_file As String : _in_file = OpenJsonFileDialog()
	Dim _file As String : _file = &quot;&quot;
	Dim _language As String
	Dim _model As String
	Dim _json_display As String
	If Len(_in_file) = 0 Then
		Exit Sub
	End If
	_json_display = getLimitedTextFromFile(_in_file)
	If Instr(_json_display, &quot;&quot;&quot;,&quot;&quot;p&quot;&quot;:&quot;&quot;&quot;) = 0 Or Instr(_
	_json_display, &quot;}&quot;) = 0 Then
		Exit Sub
	End If

	With f_dlgJsonEdit
		_language = .GetControl(&quot;_test1&quot;).model.helpText
		_model = .GetControl(&quot;_test2&quot;).model.helpText
		_file = .GetControl(&quot;_json_text&quot;).model.helpText
		.GetControl(&quot;_json_text&quot;).visible = False
		.GetControl(&quot;_json_text&quot;).model.Text = _json_display
		.GetControl(&quot;_json_text&quot;).visible = True
		CreateFile(_file, _json_display, &quot;&quot;)
		If FileExists(_file) Then
			.GetControl(&quot;_phoneme&quot;).model.enabled = False
			.GetControl(&quot;_phoneme&quot;).model.Text = &quot;&quot;
			.GetControl(&quot;_grapheme&quot;).model.enabled = False
			.GetControl(&quot;_grapheme&quot;).model.Text = &quot;&quot;
			.GetControl(&quot;_add&quot;).model.enabled = False
			.GetControl(&quot;_test1&quot;).model.enabled = False
			.GetControl(&quot;_test2&quot;).model.enabled = False
		End If
	End With
End Sub


Sub SaveJsonPhonemeTable(Event)
	&apos; Dialog2 _lexicon editor Save As...
	&apos; See also : ImportJsonPhonemeTable()
	Dim _mouse_event As Integer : _mouse_event = fiMyMouseEventToInt(Event)
	Dim MouseAlt As Integer : MouseAlt = 2
	Dim _out_file As String : _out_file = &quot;&quot;
	Dim _json_display As String : _json_display = &quot;&quot;
	Dim _language As String : _language = &quot;&quot;
	Dim _model As String : _model = &quot;&quot;
	Dim _ext As String : _ext = &quot;json&quot;
	Dim _control As Variant : _control = Split(converttourl(_
	f_dlgJsonEdit.GetControl(&quot;_json_text&quot;).model.helpText), &quot;/&quot;)
	Dim _default As String : _default =_control(Ubound(_
	_control)-1) &amp; &quot;_&quot; &amp; _control(Ubound(_control))
	Select Case _mouse_event
		Case MouseAlt
			_default = _control(Ubound(_control))
	End Select
	_out_file = SaveAsJsonDialog(Split(_default, &quot;.&quot;)(0))
	If Len(_out_file) = 0 Then
		Exit Sub
	End If
	If Instr(_out_file, &quot;.&quot;) = 0 Then
		_ext = &quot;json&quot;
		_out_file = _out_file &amp; &quot;.&quot; &amp; _ext
	Else
		_ext = Split(_out_file, &quot;.&quot;)(1)
	End If
	With f_dlgJsonEdit
		_language = .GetControl(&quot;_test1&quot;).model.helpText
		_model = .GetControl(&quot;_test2&quot;).model.helpText
		_json_display = .GetControl(&quot;_json_text&quot;).model.Text
		Select Case Lcase(_ext)
			Case &quot;js&quot;, &quot;json&quot;, &quot;&quot;
			CreateFile(_out_file, _json_display, &quot;&quot;)
			Select Case _mouse_event
				Case MouseAlt
				&apos; Update json and remove duplicate items.
				fbUpdateLexiconFile(_language, _model, _out_file)
				.GetControl(&quot;_json_text&quot;).visible = False
				.GetControl(&quot;_json_text&quot;).model.Text = getTextFromFile(_out_file, &quot;&quot;, 0)
				.GetControl(&quot;_json_text&quot;).visible = True	
			End Select
			Case &quot;xml&quot;, &quot;pls&quot;, &quot;lmxl&quot;
				CreateFile(_out_file, _json_display, &quot;&quot;)
				fbUpdateLexiconFile(_language, _model, _out_file)
		End Select
	End With
End Sub


Function fsGetTheSelectedWord()
	fsGetTheSelectedWord = fsQuickTitle(1, 99, fsTrimSpecial(fsGetTextSelection(False, False),  &quot; `_-*#&gt;_&quot;))
End Function


Function CustomLexiconDir()
	 CustomLexiconDir = ConvertFromUrl(fsFullPathOf(&quot;lexicons/&quot;))
End Function


Type SpeechHostInfo
	about as String
	key as String
	label as String
	token as String
	url as String
	url_info as String
	json_dir as String
	sample as String
	docker as String
	tags as Variant
End Type


Function MaryTtsSpeechHostInfo()
	Dim _info As SpeechHostInfo
	With _info
		.about = &quot;MaryTTS 5.2 text to speech server with 19 voices for 8 languages&quot;
		.key = &quot;Mary TTS server&quot;
		.label = &quot;marytts-server&quot;
		.token = &quot;&quot;
		.url = &quot;http://0.0.0.0:59125&quot;
		.url_info = &quot;/version&quot;
		.json_dir = &quot;mary_tts&quot;
		.sample = &quot;http://0.0.0.0:59125?AUDIO=WAVE_FILE&amp;OUTPUT_TYPE=AUDIO&amp;INPUT_TYPE=TEXT&amp;LOCALE=de&amp;INPUT_TEXT=Hallo+welt&quot;
		.docker = &quot;https://hub.docker.com/r/synesthesiam/marytts&quot;
		Select Case fsTheOsId()
			Case &quot;POSIX.APPIMAGE&quot;, &quot;POSIX.SNAP&quot;, &quot;POSIX.FLATPAK&quot;
			.tags = Array(&quot;text&quot;, &quot;phonetic&quot;, &quot;wav&quot;, &quot;web-ui&quot;)
		Case Else
			.tags = Array(&quot;text&quot;, &quot;xml&quot;, &quot;ssml&quot;, &quot;rawmaryxml&quot;, &quot;wav&quot;, &quot;rate&quot;, &quot;web-ui&quot;)
		End Select
	End With
	MaryTtsSpeechHostInfo = _info
End Function


Function MimicSpeechHostInfo()
	Dim _info As SpeechHostInfo
	With _info
		.about = &quot;Mimic is a fast local neural text to speech engine for Mycroft&quot;
		.key = &quot;en_UK/apope_low en_UK NA vits&quot;
		.label = &quot;mimic3-server&quot;
		.token = &quot;&quot;
		.url = &quot;http://0.0.0.0:59125&quot;
		.url_info = &quot;/voices&quot;
		.json_dir = &quot;mimic&quot;
		.sample = &quot;http:0.0.0.0:59125/api/tts?text=Hello%20world&amp;voice=apope&amp;ssml=0&quot;
		.docker = &quot;https://hub.docker.com/r/mycroftai/docker-mycroft/&quot;
		.tags = Array(&quot;text&quot;, &quot;xml&quot;, &quot;ssml&quot;, &quot;wav&quot;, &quot;rate&quot;, &quot;web-ui&quot;)
	End With
	MimicSpeechHostInfo = _info
End Function


Function OpenttsSpeechHostInfo()
	Dim _info As SpeechHostInfo
	With _info
		.about = &quot;OpenTTS server supports multiple text to speech systems and voices.&quot;
		.key = &quot;OpenTTS&quot;
		.label = &quot;opentts-server&quot;
		.token = &quot;&quot;
		.url = &quot;http://0.0.0.0:5500&quot;
		.url_info = &quot;/&quot;
		.json_dir = &quot;default&quot;
		.sample = &quot;http://0.0.0.0:5500/api/tts?voice=nanotts%3Aes&amp;text=Hola%20el%20mundo&amp;vocoder=medium&amp;denoiserStrength=0.03&amp;cache=false&quot;
		.docker = &quot;https://hub.docker.com/r/synesthesiam/opentts&quot;
		.tags = Array(&quot;text&quot;, &quot;wav&quot;, &quot;web-ui&quot;)
	End With
	OpenttsSpeechHostInfo = _info
End Function


Function PiperSpeechHostInfo()
	Dim _info As SpeechHostInfo
	&apos; On 2023-12-21 synesthesiam (Michael Hansen) committed
	&apos; &lt;https://github.com/rhasspy/piper/commit/2fa4c2c13933c1f6b8d87e34d12788ca8e6d073b&gt;
	&apos; See: https://raw.githubusercontent.com/rhasspy/piper/master/src/python_run/piper/http_server.py
	&apos; See: https://www.youtube.com/watch?v=pLR5AsbCMHs
	&apos; ```(venv)
	&apos;python -m piper.http_server --model ~/pathto/en_US-lessac-medium.onnx
	&apos;
	&apos; * Serving Flask app &apos;http_server&apos;
	&apos; * Debug mode: off
	&apos;INFO:werkzeug:WARNING: This is a development server. Do not use it in a
	&apos; production deployment. Use a production WSGI server instead.
	&apos;
	&apos; * Running on all addresses (0.0.0.0)
	&apos; * Running on http://127.0.0.1:5000
	&apos; * Running on http://192.168.0.108:5000
	&apos; ```

	With _info
		.about = Join(Array(&quot;[Piper TTS](https://github.com/rhasspy/piper)&quot;,_
		&quot; is a neural text to speech system.&quot;), _
		&quot;&quot;)
		.key = &quot;PiperTTS&quot;
		.label = &quot;piper-server&quot;
		.token = &quot;&quot;
		.url = &quot;http://127.0.0.1:5000&quot;  &apos; The server uses 1 voice model.
		.url_info = &quot;?text=0&quot;  &apos; No UI, check for Error, not content.
		.json_dir = &quot;default&quot;
		.sample = &quot;http://127.0.0.1:5000/?text=Hello%20World.&quot;
		.docker = &quot;&quot;
		.tags = Array(&quot;splitlines&quot;, &quot;text&quot;, &quot;wav&quot;)
	End With
	PiperSpeechHostInfo = _info
End Function


Function RhvoiceSpeechHostInfo()
	Dim _info As SpeechHostInfo
	With _info
		.about = Join(Array(&quot;A speech synthesizer for Albanian, English, Esperanto, Georgian, Kyrgyz,&quot;,_
		&quot; Macedonian, Portuguese, Russian, Tatar and Ukrainian&quot;),&quot;&quot;)
		.key = &quot;rhvoice_wrapper_library_version&quot;
		.label = &quot;rhvoice-rest&quot;
		.token = &quot;&quot;
		.url = &quot;http://0.0.0.0:8080&quot;
		.url_info = &quot;/info&quot;
		.json_dir = &quot;rhvoice&quot;
		.sample = &quot;http://0.0.0.0:8080/say?format=mp3&amp;rate=50&amp;pitch=50&amp;volume=50&amp;voice=slt&amp;text=Hello%20World&quot;
		.docker = &quot;https://hub.docker.com/r/aculeasis/rhvoice-rest&quot;
		.tags = Array(&quot;text&quot;, &quot;pitch&quot;, &quot;rate&quot;, &quot;volume&quot;, &quot;mp3&quot;, &quot;ogg&quot;, &quot;flac&quot;, &quot;wav&quot;)
	End With
	RhvoiceSpeechHostInfo = _info
End Function


Function MacOSSpeechAppInfo()
	Dim _info As SpeechHostInfo
	Select Case fsTheOsId()
		Case &quot;MACOS&quot;
		With _info
			.about = &quot;&quot;
			.key = &quot;&quot;
			.label = &quot;macos-say&quot;
			.token = &quot;&quot;
			.url = fsMyURL() &amp; &quot;/po/macos_say&quot;
			.url_info = &quot;/en-US_lexicon.json&quot;
			.json_dir = &quot;macos_say&quot;
			.sample = &quot;&quot;
			.docker = &quot;&quot;
			.tags = Array(_
			&quot;always-available&quot;, &quot;text&quot;, &quot;m4a&quot;, &quot;mp3&quot;, &quot;wav&quot;, &quot;rate&quot;, _
			&quot;audio-only-option&quot;, &quot;optional-voices&quot;)
		End With
		Case Else
		_info = MaryTtsSpeechHostInfo()
	End Select
	MacOSSpeechAppInfo = _info
End Function


Function PosixFestivalSpeechAppInfo()
	&apos; This is available as a speech-dispatcher plugin.
	Dim _info As SpeechHostInfo
	With _info
		.about = &quot;Festival is a speech synthesiser developed in 1995 at the University of Edinburgh.&quot;
		.key = &quot;&quot;
		.label = &quot;festival-tts&quot;
		.token = &quot;(FESTIVAL_READ_TEXT_PY)&quot;
		.url = fsMyURL() &amp; &quot;/po/festival&quot;
		.url_info = &quot;/en-US_lexicon.json&quot;
		.json_dir = &quot;festival&quot;
		.sample = &quot;&quot;
		.docker = &quot;&quot;
		.tags = Array(&quot;text&quot;, &quot;wav&quot;, &quot;rate&quot;, &quot;optional-voices&quot;)
	End With
	PosixFestivalSpeechAppInfo = _info
End Function


Function PosixPiperTtsSpeechAppInfo()
	&apos; This implimentation of Piper TTS uses a binary download for Linux.
	&apos; It only supports a basic subset of Piper TTS tools.
	&apos;
	&apos; Some voices do not work on all computers or do not include copyright
	&apos; information.
	Dim _info As SpeechHostInfo
	With _info
		.about = &quot;Piper TTS is a fast, private local neural text to speech engine.&quot;
		.key = &quot;&quot;
		.label = &quot;piper-tts&quot;
		.token = &quot;(PIPER_READ_TEXT_PY)&quot;
		.url = fsMyURL() &amp; &quot;/po/default&quot;
		.url_info = &quot;/en-US_lexicon.json&quot;
		.json_dir = &quot;default&quot;
		.sample = &quot;&quot;
		.docker = &quot;&quot;
		.tags = Array(&quot;text&quot;, &quot;wav&quot;, &quot;rate&quot;)
	End With
	PosixPiperTtsSpeechAppInfo = _info
End Function


Function PosixRhvoiceSpeechAppInfo()
	&apos; This relies on a depreciated &quot;developer&quot; interface. If you are an end user
	&apos; you can run this application with additional options on a Docker localhost
	&apos; server or as a speech-dispatcher service.
	Dim _info As SpeechHostInfo
	With _info
		.about = &quot;Olga Yakovleva created RHVoice in 2011. It now includes several languages.&quot;
		.key = &quot;{&quot;
		.label = &quot;rhvoice&quot;
		.token = &quot;(RHVOICE_READ_TEXT_PY)&quot;
		.url = fsMyURL() &amp; &quot;/po/rhvoice&quot;
		.url_info = &quot;/en-US_lexicon.json&quot;
		.json_dir = &quot;rhvoice&quot;
		.sample = &quot;&quot; &apos; &quot;https://rhvoice.su/downloads/lyubov/demo.mp3?_=11&quot;
		.docker = &quot;&quot;
		.tags = Array(&quot;text&quot;, &quot;wav&quot;, &quot;optional-voices&quot;, &quot;ubuntu&quot;, &quot;developer&quot;, &quot;depreciated&quot;)
	End With
	PosixRhvoiceSpeechAppInfo = _info
End Function


Function PosixSvoxPicoSpeechAppInfo()
	Dim _info As SpeechHostInfo
	With _info
		.about = &quot;SVOX Pico is a compact speech synthesiser with low latency.&quot;
		.key = &quot;&quot;
		.label = &quot;svox-pico&quot;
		.token = &quot;(PICO_READ_TEXT_PY)&quot;
		.url = fsMyURL() &amp; &quot;/po/svox_pico&quot;
		.url_info = &quot;/en-US_lexicon.json&quot;
		.json_dir = &quot;svox_pico&quot;
		.sample = &quot;&quot;
		.docker = &quot;&quot;
		.tags = Array(&quot;text&quot;, &quot;wav&quot;, &quot;rate&quot;)
	End With
	PosixSvoxPicoSpeechAppInfo = _info
End Function


Function WindowsSpeechAppInfo()
	Dim _info As SpeechHostInfo
	With _info
		Select Case fsGetOs()
			Case &quot;WINDOWS&quot;
			.about = &quot;Windows Speech Application Interface (SAPI)&quot;
			.key = &quot;&quot;
			.label = &quot;windows-sapi&quot;
			.url = fsMyURL() &amp; &quot;/po/windows_sapi&quot;
			.url_info = &quot;/en-US_lexicon.json&quot;
			.json_dir = &quot;windows_sapi&quot;
			.sample = &quot;&quot;
			.docker = &quot;&quot;
			.tags = Array(_
			&quot;always-available&quot;, &quot;text&quot;, &quot;wav&quot;, &quot;rate&quot;, &quot;audio-only-option&quot;, _
			&quot;optional-voices&quot;)
			Case &quot;WINDOWS.WINE&quot;
			.about = &quot;Wine Speech Stub or Test&quot;
			.key = &quot;&quot;
			.label = &quot;windows-sapi&quot;
			.url = fsMyURL() &amp; &quot;/po/windows_sapi&quot;
			.url_info = &quot;/en-US_lexicon.json&quot;
			.json_dir = &quot;windows_sapi&quot;
			.sample = &quot;&quot;
			.docker = &quot;&quot;
			.tags = Array(_
			&quot;stub&quot;, _
			&quot;wine&quot;)
			Case &quot;WINDOWS.NOSCRIPT&quot;
			.about = &quot;Windows NET Speech&quot;
			.key = &quot;&quot;
			.label = &quot;windows-sapi&quot;
			.url = fsMyURL() &amp; &quot;/po/windows_sapi&quot;
			.url_info = &quot;/en-US_lexicon.json&quot;
			.json_dir = &quot;windows_sapi&quot;
			.sample = &quot;&quot;
			.docker = &quot;&quot;
			.tags = Array(_
			&quot;stub&quot;, _
			&quot;noscript&quot;, _
			&quot;net&quot;)
			Case Else
			_info = MaryTtsSpeechHostInfo()
	End Select
	End With
	WindowsSpeechAppInfo = _info
End Function


Function fsGitRawJson(_
		json_dir As String,_
		lang_region As String,_
		raw_git As String) As String
	Dim _fallback_info : _fallback_info = WindowsSpeechAppInfo()
	&apos; Obtain the most recent published phoneme transcription. If you are editing
	&apos; or creating a list to publish, note that not all platforms or voices
	&apos; support the International Phonetic Alphabet. In these cases, you have to
	&apos; experiment with spelling and similar sounding words to get the
	&apos; pronunciation you want. For example:
	&apos;
	&apos; + &quot;reed&quot; for the verb &quot;to read&quot; instead of the sound of the colour &quot;red&quot;.
	&apos; + &quot;qwa-nel&quot; for the town &quot;Quesnel&quot;
	&apos;
	&apos; `raw_git` : a custom URL
	&apos; ------------------------
	&apos;
	&apos; You can use a custom lexicon URL for your class, school or organization.
	&apos; Set up a server that  points to a private local access point that uses
	&apos; the same directory structure as the `po` directory in the extension code.
	&apos;
	&apos; See
	&apos;
	&apos; * &lt;https://forums.docker.com/t/using-localhost-for-to-access-running-container/3148/6&gt;
	&apos; * &lt;https://docs.docker.com/network/&gt;
	&apos; * &lt;https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml&gt;
	&apos;
	&apos; The default docker address is &lt;http://localhost:41604/po/&gt;. Developers or
	&apos; other third parties can use a docker server to provide customized lexicons
	&apos; to suit your needs.
	&apos;
	&apos; For development on your network, you should set `raw-git` to point to a URL
	&apos; that works on your network using a local environment variable called
	&apos; `READTEXT_ONLINE_LEXICON_URL`. The json document location for a region is
	&apos; `~/po/&lt;speech-engine&gt;/&lt;language&gt;-&lt;locale&gt;_lexicon.json`

	If Len(json_dir) = 0 Then json_dir = _fallback_info.json_dir
	If Len(lang_region) = 0 Then lang_region = &quot;en-US&quot;
	Dim home_git$ : home_git = &quot;https://raw.githubusercontent.com/jimholgate/readtextextension/master/Read_Text/po/&quot;
	&apos; `docker_url` might be assigned to another service. Please set a local server
	&apos; using the `READTEXT_ONLINE_LEXICON_URL` environment variable to get your
	&apos; locally hosted lexicon resources.
	Dim docker_url$ : docker_url = fsGetWebService(&quot;http://localhost:41604/po/&quot;)
	Dim _temp_json$ :  _temp_json = fsMyTempLock(&quot;rt-git-raw.json&quot;)
	If Len(raw_git) = 0 Then
		If Len(docker_url) &lt;&gt; 0 Then
			raw_git = docker_url
		Else
			raw_git = home_git
		End If
	End If
	With f_dlgJsonEdit:
	raw_git = InputBox(fsLookUpTerm(&quot;s_script&quot;) &amp; &quot; : &quot; &amp; fsLookUpTerm(&quot;s_use-a-web-application&quot;), .Title, raw_git)
	
	If Len(raw_git) = 0 Then
		fsGitRawJson = &quot;&quot;
		Exit Function
	End If
	Dim lang$ : lang = Split(lang_region, &quot;-&quot;)(0)
	Dim  fallback$ : fallback = Join(Array(_
	home_git, _fallback_info.json_dir, &quot;/&quot;, &quot;en-US&quot;, &quot;_lexicon.json&quot;), &quot;&quot;)
	On Error GoTo fsGitRawJsonErr
	Dim _searches As Variant : _searches = Array(lang_region, fsSelectionLanguage(True), &quot;en-US&quot;, &quot;en&quot;)
	Dim x As Integer
	Dim _search$ : _search = &quot;&quot;
	
	Dim _get$ : _get = &quot;&quot;
	For x = Lbound(_searches) To Ubound(_searches)
		_search = Join(_
		Array(raw_git, json_dir, &quot;/&quot;, _searches(x), &quot;_lexicon.json&quot;), &quot;&quot;)
		_get = fsGetWebService(_search)
		If Len(_get) &lt;&gt; 0 Then
			&apos; Update json and remove duplicate items
			CreateFile(_temp_json, _get, &quot;&quot;)
			fbUpdateLexiconFile(lang_region, json_dir, _temp_json)
			fsGitRawJson = getTextFromFile(_temp_json, &quot;&quot;, 0)
			fbRemoveFile(_temp_json)
			If Len(fsGitRawJson) = 0 Then
				fsGitRawJson = _get
			End If
			Exit Function
		End If
	Next
	End With
	fsGitRawJson = fsGetWebService(fallback)
Exit Function
	fsGitRawJsonErr:
	fsGitRawJson = &quot;&quot;
End Function


Function fsGetWebService(_
		ByVal _uri) As String
	fsGetWebService = &quot;&quot;
	&apos; Get web text that shows MaryTTS voices
	&apos; =WEBSERVICE(&quot;http://0.0.0.0:59125/voices&quot;)
	&apos; Use with tested and trusted sources
	On Local Error GoTo fsGetWebServiceErr
	If _uri = &quot;&quot; Then Exit Function
	Dim fA : fA = CreateUNOService(&quot;com.sun.star.sheet.FunctionAccess&quot;)
	Dim s1$ : s1 = &quot;WEBSERVICE&quot;
	Dim s2$ : s2 = fA.callFunction(s1, Array(_uri))
	fsGetWebService = s2
	Exit Function
	fsGetWebServiceErr:
	fsGetWebService = &quot;&quot;
End Function


Function SpeechHostInfoList()
	Select Case fsTheOsId()
		Case &quot;POSIX.APPIMAGE&quot;, &quot;POSIX.SNAP&quot;, &quot;POSIX.FLATPAK&quot;
		&apos; Python3 `requests` library is not available so MaryTTS
		&apos; has limited functionality. See `network_read_textfile.py`
		&apos;
		&apos; Several speech engines have limited or no support for
		&apos; phoneme code or can only speak using certain sounds.
		SpeechHostInfoList = Array(_
		MimicSpeechHostInfo(), _
		OpenttsSpeechHostInfo(), _
		RhvoiceSpeechHostInfo(), _
		MaryTtsSpeechHostInfo(), _
		)
	Case Else
		&apos; Prioritize recent tts frameworks
		SpeechHostInfoList = Array(_
		MimicSpeechHostInfo(), _
		OpenttsSpeechHostInfo(), _
		MaryTtsSpeechHostInfo(), _
		RhvoiceSpeechHostInfo(), _
		)
	End Select
End Function


Sub ResetHostSpeechURI
	&apos; On Linux systems using localhost, users might set up their system
	&apos; to enable or disable speech servers without restarting Office, so
	&apos; check the status of the localhost uri every time.
	s_CaReadTextExtensionLocalHostSpeechURI = &quot;&quot;
End Sub


Function fbEnableLocalHostRate() As Boolean
	&apos; Some localhost speech servers support rate for all voices,
	&apos; so display rate options like `--rate 75%`.
	fbEnableLocalHostRate = False
	Dim _info As Variant : _info = Array(_
	MimicSpeechHostInfo(), _
	)	
	Dim x As Integer : x = 0
	On Error GoTo fbEnableLocalHostRateErr
	For x = Lbound(_info) to Ubound(_info)
		If Instr(_info(x).url, &quot;http&quot;) = 1 Then
			If fbLocalHostOk(_info(x).url &amp; _info(x).url_info, _info(x).key) Then
				fbEnableLocalHostRate = True
				Exit Function
			End If
		End If
	Next
	Exit Function
	fbEnableLocalHostRateErr:
	fbEnableLocalHostRate = False
End Function


Function fsLocalHostSpeech() As String
	&apos; Return the local host speech address
	&apos; i.e.: `http:&lt;localhost&gt;:&lt;port&gt;`
	On Error GoTo fsLocalHostSpeechErr
	fsLocalHostSpeech = &quot;&quot;
	Dim _info As Variant
	Dim x As Integer
	Select Case Len(s_CaReadTextExtensionLocalHostSpeechURI)
		Case 0
		_info = SpeechHostInfoList()
		For x = Lbound(_info) To Ubound(_info)
			If Instr(_info(x).url, &quot;http&quot;) = 1 Then
				If fbLocalHostOk(_info(x).url &amp; _info(x).url_info, _info(x).key) Then
					fsLocalHostSpeech = _info(x).url
					s_CaReadTextExtensionLocalHostSpeechURI = fsLocalHostSpeech
					Exit For
				End If
			End If
		Next
		Case Else
		fsLocalHostSpeech = s_CaReadTextExtensionLocalHostSpeechURI
	End Select
	Exit Function
	fsLocalHostSpeechErr:
	fsLocalHostSpeech = &quot;&quot;
End Function


Function fsDefaultJson(_select_lang As String) As String
	Dim CR As String
	CR = Chr(13)
	fsDefaultJson = Join(Array(&quot;{&quot;,_
	&quot;    &quot;&quot;&quot; &amp; _select_lang &amp; &quot;_00001&quot;&quot;:{&quot;&quot;g&quot;&quot;:&quot;&quot;Read Text Extension&quot;&quot;,&quot;&quot;p&quot;&quot;:&quot;&quot;reed text extension&quot;&quot;},&quot;,_
	&quot;    &quot;&quot;&quot; &amp; _select_lang &amp; &quot;_00002&quot;&quot;:{&quot;&quot;g&quot;&quot;:&quot;&quot;Read text extension&quot;&quot;,&quot;&quot;p&quot;&quot;:&quot;&quot;reed text extension&quot;&quot;},&quot;,_
	&quot;    &quot;&quot;&quot; &amp; _select_lang &amp; &quot;_99998&quot;&quot;:{&quot;&quot;g&quot;&quot;:&quot;&quot;$[LOCALE]&quot;&quot;,&quot;&quot;p&quot;&quot;:&quot;&quot;&quot; &amp; _select_lang &amp; &quot;&quot;&quot;},&quot;,_
	&quot;    &quot;&quot;&quot; &amp; _select_lang &amp; &quot;_99999&quot;&quot;:{&quot;&quot;g&quot;&quot;:&quot;&quot;$[REVISION]&quot;&quot;,&quot;&quot;p&quot;&quot;:&quot;&quot;&quot; &amp; fsTimeStamp() &amp; &quot;&quot;&quot;}&quot;,_
	&quot;}&quot;), CR)
End Function


Function EditJsonPhonemeTable() As String
	&apos; Dialog2 - lexicon editor .helpURL
	&apos; Dialog1 (f_dlgSpeechSetup) - We gather preliminary data about
	&apos; the tokens that the first dialog displays.
	&apos; This Json editor adds new grapheme / phoneme pairs to json file
	&apos; so individuals can edit the pronunciation of names and things that
	&apos; are important to them -like employees and students.
	EditJsonPhonemeTable = &quot;&quot;
	Dim _lang As String  &apos; en
	Dim _select_lang As String  &apos; en-CA
	Dim _grapheme as String
	Dim _phoneme as String
	Dim _out_file As String
	Dim _in_file As String
	_select_lang = &quot;&quot;
	Dim _test_str As String
	Dim x As Integer
	Dim _json_display As String
	_json_display = &quot;&quot;
	Dim _po_dir As String : _po_dir = &quot;&quot;
	Dim CR As String
	CR = Chr(13)
	Dim is_unique As Boolean
	Dim _display_phoneme As String
	Dim token_text As String
	Dim _info As Variant
	
	With f_dlgSpeechSetup
		If .GetControl(&quot;ComboBox1&quot;).model.enabled Then
			token_text = .GetControl(&quot;ComboBox1&quot;).Model.Text &amp; CR
		Else
			token_text = .GetControl(&quot;ComboBox2&quot;).Model.Text &amp; CR
		End If
	End With
	Select Case fsTheOsId()
		Case &quot;MACOS&quot;, &quot;MACOS.EXPERIMENTAL&quot;
		_po_dir = MacOSSpeechAppInfo().json_dir
		Case &quot;WINDOWS&quot;, &quot;WINDOWS.WINE&quot;, &quot;WINDOWS.NOSCRIPT&quot;, &quot;WINDOWS.EXPERIMENTAL&quot;
		_po_dir = WindowsSpeechAppInfo().json_dir
		fbHaveItunes()
		Case Else
		_po_dir = &quot;default&quot;
	End Select

	If InStr(token_text, PosixSvoxPicoSpeechAppInfo().token) &lt;&gt; 0 Then
		_po_dir = PosixSvoxPicoSpeechAppInfo().json_dir
	ElseIf InStr(token_text, PosixFestivalSpeechAppInfo().token) &lt;&gt; 0 Then
		_po_dir = PosixFestivalSpeechAppInfo().json_dir
	ElseIf InStr(token_text, PosixRhvoiceSpeechAppInfo().token) &lt;&gt; 0 Then
		_po_dir = PosixRhvoiceSpeechAppInfo().json_dir
	ElseIf InStr(token_text, PosixPiperTtsSpeechAppInfo().token) &lt;&gt; 0 Then
		_po_dir = PosixPiperTtsSpeechAppInfo().json_dir
	Else
		_info = SpeechHostInfoList()
		For x = Lbound(_info) To Ubound(_info)
			If fbLocalHostOk(_info(x).url &amp; _info(x).url_info, _info(x).key) Then
				_po_dir = _info(x).json_dir
				Exit For
			End If
		Next
	End If
	x = 0
	Dim lang_array As Variant
	lang_array = fvGetIsoLangArray()
	For x = Lbound(lang_array) to Ubound(lang_array)
		If Len(lang_array(x)) &lt;&gt; 0 Then
			_select_lang = lang_array(x)
			Exit For
		End If
	Next
	_lang = fsDisplayLanguage()
	_out_file = fsFullPathOf(fsExtensionSetJson(&quot;lexicons/&quot; &amp; _po_dir, _select_lang))
	If FileExists(_out_file) Then
		_in_file = _out_file
	Else
		ReDim lang_array
		lang_array = Array(_
		_select_lang, Split(_select_lang, &quot;-&quot;)(0), Split(_select_lang, &quot;_&quot;)(0))
		For x = Lbound(lang_array) to Ubound(lang_array)
			_test_str = fsMyURL() &amp; _
			&quot;/po/&quot; &amp; _
			fsExtensionSetJson(_po_dir, lang_array(x))
			If FileExists(_test_str) Then
				_in_file = _test_str
				Exit For
			End If
		Next
	End If
	_grapheme = fsGetTheSelectedWord()
	_display_phoneme = &quot;&quot;
	If FileExists(_in_file) Then
		_json_display = getLimitedTextFromFile(_in_file)
		_display_phoneme = bespokeJsonExtraction(_json_display, _grapheme)
		If Len(_display_phoneme) = 0 Then
			_display_phoneme = Lcase(_grapheme)
		End If
	End If
	If Instr(_json_display, &quot;{&quot;) = 0 Or Instr(_json_display, &quot;}&quot;) = 0 Then
		_json_display = fsDefaultJson(_select_lang)
	End If
	DialogLibraries.LoadLibrary(&quot;textToSpeech&quot;)
	is_unique = Instr(_json_display, &quot;{&quot;&quot;g&quot;&quot;:&quot;&quot;&quot; &amp; _grapheme &amp; &quot;&quot;&quot;,&quot;&quot;&quot;) = 0
	If Instr(_json_display, CR) = 0 and Instr(_json_display, Chr(10)) &lt;&gt; 0 Then
		CR = Chr(10)
	End If
	f_dlgJsonEdit = CreateUnoDialog(DialogLibraries.textToSpeech.Dialog2)
	With f_dlgJsonEdit
		If fbHelpIsInstalled() Then
			&apos; Can&apos;t load &quot;/lexicons.xhp&quot;
			&apos; Can load &quot;/set_up.xhp&quot;
			&apos; Can&apos;t load &quot;/tokens.xhp&quot;
			f_dlgJsonEdit.model.HelpURL = fsAppSignature() &amp; &quot;/tokens.xhp&quot;
		Else
			f_dlgJsonEdit.model.HelpURL = &quot;&quot;
		End If
		.model.Title = fsLookUpTerm2(_
		&quot;s_read-text&quot;, _lang)  &amp; &quot; - &quot; &amp; _po_dir &amp; &quot; - &quot; &amp; fsLookUpTerm2(_
		&quot;s_speech-properties&quot;, _lang)
		.GetControl(&quot;_add&quot;).Model.enabled = True
		.GetControl(&quot;_cancel&quot;).model.Label = fsLookUpTerm2(&quot;s_cancel&quot;, _lang)
		.GetControl(&quot;_replace&quot;).model.Label = fsLookUpTerm2(_
		&quot;s_read-with-an-external-program&quot;, _lang) &amp; &quot; (&quot; &amp;_po_dir &amp; &quot;)&quot;
		.GetControl(&quot;_open&quot;).model.Label = _(&quot;Open&quot;, &quot;tools&quot;, _lang)
		.GetControl(&quot;_save_as&quot;).model.Label = _(&quot;Save As&quot;, &quot;tools&quot;, _lang)
		.GetControl(&quot;_phoneme&quot;).model.helpText = &quot;&quot;&quot;p&quot;&quot;:&quot;
		If is_unique Then
			.GetControl(&quot;_add&quot;).model.Label = _(&quot;Apply&quot;, &quot;tools&quot;, _lang)
			.GetControl(&quot;_phoneme&quot;).model.Text = Lcase(_grapheme)
			.GetControl(&quot;_grapheme&quot;).model.readonly = False			
		Else
			.GetControl(&quot;_add&quot;).model.Label = _(&quot;Reset&quot;, &quot;tools&quot;, _lang)
			.GetControl(&quot;_phoneme&quot;).model.Text = _display_phoneme
			.GetControl(&quot;_phoneme&quot;).model.enabled = False
			.GetControl(&quot;_grapheme&quot;).model.readonly = True
		End If
		.GetControl(&quot;_grapheme&quot;).model.Text = _grapheme
		.GetControl(&quot;_grapheme&quot;).model.helpText = &quot;&quot;&quot;g&quot;&quot;:&quot;
		.GetControl(&quot;_json_text&quot;).model.Text = _json_display
		.GetControl(&quot;_json_text&quot;).model.helpText = ConvertFromUrl(_out_file)
		.GetControl(&quot;_edit_frame&quot;).model.Label = fsLookUpTerm2(_
		&quot;s_speech-synthesis&quot;, _lang)
		.GetControl(&quot;_test1&quot;).model.Label = fsLookUpTerm2(&quot;s_test&quot;, _lang)
		.GetControl(&quot;_test1&quot;).model.helpText = _select_lang
		.GetControl(&quot;_test2&quot;).model.Label = fsLookUpTerm2(&quot;s_test&quot;, _lang)
		.GetControl(&quot;_test2&quot;).model.helpText = _po_dir
		.GetControl(&quot;_test2&quot;).model.enabled = is_unique
		.GetControl(&quot;_code_frame&quot;).model.Label = fsLookUpTerm2(&quot;s_script&quot;, _lang)
		.GetControl(&quot;_find&quot;).model.Label = Join(Array(_
		fsGetSetting(&quot;ooname&quot;), &quot;-&quot;, fsLookUpTerm2(&quot;s_display&quot;, _lang)))
		If .Execute() &lt;&gt; 0 Then
			If Len(fsJsonSafe(_
			.GetControl(_
			&quot;_grapheme&quot;).model.Text)) = 0 Or Len(fsJsonSafe(_
			.GetControl(_
			&quot;_phoneme&quot;).model.Text)) = 0 Then
				Exit Function
			End If
			If is_unique Then
				_json_display = fsReplaceText(_json_display,_
				Join(_
				Array(_
				&quot;{&quot;,_
				&quot;    &quot;),_
				CR),_
				Join(_
				Array(_
				&quot;{&quot;,_
				&quot;    &quot;&quot;DT_&quot; &amp; fsFileTime(_
				) &amp; &quot;&quot;&quot;:{&quot;&quot;g&quot;&quot;:&quot;&quot;&quot; &amp; fsJsonSafe(_
				.GetControl(_
				&quot;_grapheme&quot;).model.Text) &amp; &quot;&quot;&quot;,&quot;&quot;p&quot;&quot;:&quot;&quot;&quot; &amp; fsJsonSafe(_
				.GetControl(_
				&quot;_phoneme&quot;).model.Text) &amp; &quot;&quot;&quot;},&quot;, &quot;    &quot;), CR))
			Else
				_json_display = bespokeJsonDeletion(_
				_json_display,_
				_grapheme)
			End If
			CreateFile(_out_file, _json_display, &quot;&quot;)
		End If
	End With
	If FileExists(_out_file) Then
		EditJsonPhonemeTable = _out_file
	End If
End Function


Function bespokeJsonDeletion(_
	_json_display As String,_
	_grapheme As String)
	&apos; TODO: Connect to a python script. The Function currently depends on the
	&apos; specific formatting of the data, so verify the results before clicking.
	Dim CR$ : CR = Chr(13)
	If Instr(_json_display, CR) = 0 Then CR = Chr(10)
	bespokeJsonDeletion = &quot;&quot;
	Dim _list As Variant : _list = Split(_json_display, CR)
	Dim _row As Variant
	Dim x As Integer
	If Instr(_json_display, &quot;99999&quot;&quot;:{&quot;&quot;g&quot;&quot;:&quot;&quot;$[REVISION]&quot;&quot;,&quot;&quot;p&quot;&quot;&quot;) = 0 Then
		bespokeJsonDeletion = _json_display
		Exit Function
	End If
	For x = LBound(_list) To Ubound(_list)
		If Instr(_list(x), &quot;:{&quot;&quot;g&quot;&quot;:&quot;&quot;&quot; &amp; _grapheme &amp; &quot;&quot;&quot;&quot;) = 0 Then
			bespokeJsonDeletion = bespokeJsonDeletion &amp; _list(x) &amp; CR
		End If
	Next
	bespokeJsonDeletion = Trim(bespokeJsonDeletion)
End Function


Function bespokeJsonExtraction(_
	_json_display As String,_
	_grapheme As String)
	&apos; TODO: Connect to a python script. The Function currently depends on the
	&apos; specific formatting of the data, so verify the results before clicking OK
	bespokeJsonExtraction = &quot;&quot;
	Dim CR$ : CR = Chr(13)
	If Instr(_json_display, CR) = 0 Then CR = Chr(10)
	Dim _list As Variant : _list = Split(_json_display, CR)
	Dim _row As Variant
	Dim x As Integer
	For x = LBound(_list) To Ubound(_list)
		If Instr(_list(x), &quot;:{&quot;&quot;g&quot;&quot;:&quot;&quot;&quot; &amp; _grapheme &amp; &quot;&quot;&quot;&quot;) &lt;&gt; 0 Then
			_row = Split(_list(x), &quot;:&quot;)
			bespokeJsonExtraction = Mid(_
			fsReplaceText(_
			_row(_
			Ubound(_
			_row)), &quot;&quot;&quot;},&quot;, &quot;&quot;), 2)
			Exit Function
		End If
	Next
End Function


Function fsJsonSafe(_text As String) As String
	&apos; Replace json code characters with to safe versions
	fsJsonSafe = &quot;&quot;
	If Len(_text) = 0 Then
		Exit Function
	End If
	Dim check_list As Variant
	check_list = Array(_
	Array(&quot;\&quot;, &quot;\u005C&quot;),_
	Array(&quot;&quot;&quot;&quot;, &quot;\&quot;&quot;&quot;),_
	Array(&quot;{&quot;, &quot;\u007B&quot;),_
	Array(&quot;}&quot;, &quot;\u0070&quot;),_
	Array(&quot;@&quot;, &quot;\u0040&quot;)_
	)
	Dim x As Integer
	For x = Lbound(check_list) To Ubound(check_list)
		_text = fsReplaceText(_text, check_list(x)(0), check_list(x)(1))
	Next
	fsJsonSafe = _text
End Function


Sub SpeakGraphemeJson()
	With f_dlgJsonEdit
		MsgSpeak(.GetControl(&quot;_grapheme&quot;).model.Text)
	End With
End Sub


Sub SpeakPhonemeJson()
	With f_dlgJsonEdit
		MsgSpeak(.GetControl(&quot;_phoneme&quot;).model.Text)
	End With
End Sub


Sub ResetPhonemesGit()
	&apos; Dialog2 Phoneme Editor Update local lexicon
	&apos; The online repository of json lexicon tables defaults
	&apos; to github.com. You can set it to a customized URL by setting
	&apos; the `READTEXT_ONLINE_LEXICON_URL` environment variable
	&apos; to specify a local url or a fork of the project on github.com.
	&apos; This means that you can control shared data that includes
	&apos; how to pronounce client names or local places and acronyms.
	&apos;
	&apos; Back up your home settings on your local Android phone or
	&apos; device using Wifi File Explorer PRO as a http file server.
	Dim json_dir As String
	Dim lang_region As String
	Dim raw_git As String : raw_git = &quot;&quot;
	Dim environ_path As String : environ_path = &quot;&quot;
	On Error Resume Next
	environ_path = Environ(&quot;READTEXT_ONLINE_LEXICON_URL&quot;)
	If Len(environ_path) &lt;&gt; 0 Then
		raw_git = environ_path
	End If
	Dim json_data As String : json_data = &quot;&quot;
	With f_dlgJsonEdit
 		json_dir = .GetControl(&quot;_test2&quot;).model.helpText
 		lang_region = .GetControl(&quot;_test1&quot;).model.helpText 		
 		json_data = fsGitRawJson(json_dir, lang_region, raw_git)
 		If Len (json_data) = 0 Then
 			json_data = fsDefaultJson(lang_region)
 		End If
 		.GetControl(&quot;_json_text&quot;).model.Text = json_data
 		.Execute
	End With
End Sub


Sub ConfigureReadTextAloud()
	Dim sFile As String
	Dim msgs() As Variant
	Dim errorCode As Integer
	Dim bHideExports As Boolean
	Dim _integer As Integer
	bHideExports = False
	
	&apos; Open up the dialog
	CheckUnixSpeech()
	ClearWorkingCountryLanguage()
	DialogLibraries.LoadLibrary(&quot;textToSpeech&quot;)
	f_dlgSpeechSetup = CreateUnoDialog(DialogLibraries.textToSpeech.Dialog1)
	Select Case fsTheOsId()
		Case &quot;MACOS&quot;
		&apos; New versions of MacOS restrict third party apps from writing
		&apos; media files, so the extension hides export options in the main
		&apos; dialogue.  High Sierra and newer versions of MscOS do not
		&apos; include a built-in telnet command.
		If Not( _
			FileExists( _
			&quot;/usr/bin/telnet&quot;)) Then
			Select Case fsGetMyTunesApp()
				Case &quot;Music&quot;
				&apos; MacOS 11
				bHideExports = False
				Case &quot;iTunes&quot;
				bHideExports = False
				Case Else
				bHideExports = True
			End Select
		End If
		Case &quot;POSIX.APPIMAGE&quot;
			bHideExports = True
			&apos;If Len(Config(pi_external_options_string)) = 0 Then
			&apos;	Config() = fvTts_config_createDefaultConfig(msgs(), errorCode)
			&apos;	print Config(pi_external_options_string)
			&apos;End If
	End Select
	b_CaReadTextExtensionHideExports = bHideExports
	With f_dlgSpeechSetup
		If fbHelpIsInstalled() Then
			.model.HelpURL = fsAppSignature &amp; &quot;/set_up.xhp&quot;
		Else
			.model.HelpURL = &quot;&quot;
		End If
		&apos;Load default settings, so any settings undefined by settings file are not empty
		Config() = fvTts_config_createDefaultConfig(msgs(), errorCode)
		&apos;Load the settings you used last time
		sFile = fsExtensionSettingsIni()
		If FileExists(sFile) Then
			tts_config_parseFile(sFile, Config(), errorCode)
		Else
			&apos; The &quot;About&quot; dialog needs this file to show current information
			tts_config_writeFile(Config(), sfile)
		End If
		If Len(Config(pi_display_language_string)) = 0 Then
			Config(pi_display_language_string) = fsGetLanguage()
		End If
		&apos;Now apply the settings to the dialog box
		.GetControl(&quot;CheckBox1&quot;).Model.State = Config(pi_display_info_integer)
		If fbEnhancedRTVersion And fbClipBoardAvailable() Then
			.GetControl(&quot;CheckBox2&quot;).Model.State = Config(pi_use_smart_select_integer)
		Else
			.GetControl(&quot;CheckBox2&quot;).Model.State = 0
			.GetControl(&quot;CheckBox2&quot;).Visible = False
		End If
		ttsUpdateCombo2F()
		&apos;Update the labels with your language
		.GetControl(&quot;ComboBox1&quot;).Model.Text = Config(pi_experimental_options_string)
		.GetControl(&quot;ComboBox2&quot;).Model.Text = Config(pi_external_options_string)
		.GetControl(&quot;ComboBox3&quot;).Model.Text = Config(pi_display_language_string)
		.GetControl(&quot;ComboBox4&quot;).Model.Text = Config(pi_html_string)
		.GetControl(&quot;FileControl1&quot;).Model.Text = Config(pi_experimental_path_string)
		.GetControl(&quot;FileControl2&quot;).Model.Text = Config(pi_external_path_string)
		If fbExperimentalMode() Then
			.GetControl(&quot;OptionButton1&quot;).Model.State = Config(pi_use_experimental_boolean)
			.GetControl(&quot;OptionButton2&quot;).Model.State = Config(pi_use_external_boolean)
			.GetControl(&quot;OptionButton3&quot;).Model.State = Config(pi_use_html_boolean)
		Else
			If Config(pi_use_experimental_boolean) Then
				.GetControl(&quot;OptionButton1&quot;).Model.State = 0
				Config(pi_use_experimental_boolean) = 0
				.GetControl(&quot;OptionButton2&quot;).Model.State = 1
				Config(pi_use_external_boolean) = 1
			End If
			.GetControl(&quot;OptionButton3&quot;).Model.State = Config(pi_use_html_boolean)
		End If
		ttsUpdateLabels()
		ttsUpdateCombo1()
		
		&apos;Default choices are for custom scripts or apps - Win, Mac, Linux, Unix etc.
		
		ttsUpdateDisplay()
		&apos; Stop Linux or MacOS speech daemon from continuing to speak
		&apos; or delete the Windows temporary lock file so speech ends.
		&apos; The speech only stops if you use the one of the scripts shown
		&apos; by default in the extension dialogue.
		If FileExists(sFile) Or FileExists(fsMyTempLock(&quot;lock&quot;)) Then
			If .GetControl(&quot;OptionButton2&quot;).Model.State Then
				resetSpeechDispatcher(True)
			ElseIf .GetControl(&quot;OptionButton1&quot;).Model.State Then
				If FileExists(&quot;/usr/bin/killall&quot;) Or FileExists(&quot;/usr/local/bin/killall&quot;) Then
					If FileExists(&quot;/usr/bin/festival&quot;) Then
						Shell(&quot;killall&quot;, 0, &quot;festival&quot;, True)
					ElseIf FileExists(&quot;/usr/bin/flite&quot;) Then
						Shell(&quot;killall&quot;, 0, &quot;flite&quot;, True)
					End If
				End If
				On Error Resume Next
				fbRemoveFile(fsMyTempLock(&quot;lock&quot;))
			End If
		End If
		If .Execute() &lt;&gt; 0 Then
			&apos;Replace the old settings file
			Config() = fvCurrentDialogConfig()
			.Dispose()
			On Error Resume Next
			fbRemoveFile(sFile)
			Config(pi_display_info_integer) = GetControl(&quot;CheckBox1&quot;).Model.State
			tts_config_writeFile(Config(), sfile)
			&apos;Call the shell to execute the program specified with the commands specified
			ttsActuate(Config(), _
			msgs(), _
			errorCode, _
			&quot;&quot;)
		End If
	End With
End Sub


Sub ttsUpdateCombo1()
	With f_dlgSpeechSetup
	If InStr(LCase(.GetControl(&quot;FileControl1&quot;).Model.Text), &quot;festival&quot;) &lt;&gt; 0 Then
		dialog1Combo1ShowFestivalScripts(f_dlgSpeechSetup)
	Else
		updateDialog1FileControlComboBox(False, &quot;FileControl1&quot;, &quot;ComboBox1&quot;)
	End If
	End With
End Sub


Sub ttsUpdateCombo2()
	updateDialog1FileControlComboBox(True, &quot;FileControl2&quot;, &quot;ComboBox2&quot;)
End Sub


Sub ttsUpdateCombo2F()
	updateDialog1FileControlComboBox(False, &quot;FileControl2&quot;, &quot;ComboBox2&quot;)
End Sub


Sub updateDialog1FileControlComboBox( _
	bRefreshText, FileControl, ComboBox)
	Dim _bin_python As String : _bin_python = &quot;program/python&quot;
	Dim ClientId$ : ClientId = &quot; --client_id &quot;&quot;(SESSION_ID)&quot;&quot;&quot;
	Select Case fsTheOsId()
		Case &quot;MACOS&quot;, &quot;WINDOWS&quot;, &quot;WINDOWS.WINE&quot;, &quot;WINDOWS.NOSCRIPT&quot;
		ClientId = &quot;&quot;
		Case &quot;POSIX.APPIMAGE&quot;
		_bin_python = fsAppImageResourcePath(&quot;python&quot;)
&apos;		Case &quot;POSIX.FLATPAK&quot;, &quot;POSIX.SNAP&quot;
&apos;		_bin_python = ConvertFromUrl(BundlePyPath())
		Case Else
		_bin_python = &quot;/bin/python&quot;
	End Select
    With f_dlgSpeechSetup
		If InStr(LCase(.GetControl(FileControl).Model.Text), _
			&quot;\wscript.exe&quot;) &lt;&gt; 0 Then
			dialog1Combo2ShowSAPIChoices(f_dlgSpeechSetup)
		&apos; Typical for Mac
		ElseIf InStr(LCase(.GetControl(FileControl).Model.Text),&quot;bin/say&quot;) &lt;&gt; 0 Then
			dialog1Combo2ShowSAYChoices(f_dlgSpeechSetup)
		ElseIf InStr(LCase(.GetControl(FileControl).Model.Text),&quot;bin/osascript&quot;) &lt;&gt; 0 Then
			dialog1Combo2ShowAppleScriptChoices(f_dlgSpeechSetup)
			&apos; Typical for Linux
		ElseIf InStr(LCase(.GetControl(FileControl).Model.Text), &quot;speak-ng&quot;) &lt;&gt; 0 Then
			dialog1Combo2ShowESPEAKChoices(f_dlgSpeechSetup)
		ElseIf InStr(LCase(.GetControl(FileControl).Model.Text), &quot;espeak-ng&quot;) &lt;&gt; 0 Then
			dialog1Combo2ShowESPEAKChoices(f_dlgSpeechSetup)
		ElseIf InStr(LCase(.GetControl(FileControl).Model.Text), &quot;espeak&quot;) &lt;&gt; 0 Then
			dialog1Combo2ShowESPEAKChoices(f_dlgSpeechSetup)
		ElseIf InStr(LCase(.GetControl(FileControl).Model.Text), &quot;festival&quot;) &lt;&gt; 0 Then
			dialog1Combo2ShowFESTIVALChoices(f_dlgSpeechSetup)
			&apos;Festival text2wav
		ElseIf InStr(LCase(.GetControl(FileControl).Model.Text), &quot;text2wave&quot;) &lt;&gt; 0 Then
			dialog1Combo2ShowTEXT2WAVEChoices(f_dlgSpeechSetup)
		ElseIf InStr(LCase(.GetControl(FileControl).Model.Text), _bin_python) &lt;&gt; 0 Then
			If fsTheOsId() = &quot;MACOS&quot; And fbIsLibreOffice() Then
				&apos; Must use LibreOffice python			
				.GetControl(FileControl).Model.Text = PosixPythonPath()
			End If
			fiDialog1CombosShowMyPythonChoices(f_dlgSpeechSetup, ComboBox, FileControl)
		ElseIf InStr(LCase(.GetControl(FileControl).Model.Text),&quot;python.exe&quot;) &lt;&gt; 0 Then
			fiDialog1CombosShowMyPythonChoices(f_dlgSpeechSetup, ComboBox, FileControl)
		ElseIf InStr(LCase(.GetControl(FileControl).Model.Text),&quot;/bin/open&quot;) &lt;&gt; 0 And _
			fsTheOsId() = &quot;MACOS&quot; Then
			&apos;The system chooses an application to open the file or URL (See man: gnome-open and xdg-open)
			&apos;There are some examples at https://ss64.com/MacOS/open.html and
			&apos;https://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man1/open.1.html
			dialog1Combo2ShowMEDIAChoices(f_dlgSpeechSetup)
			&apos; You entered a media player
		ElseIf fbIsAMediaPlayer(LCase(.GetControl(FileControl).Model.Text)) Then
			dialog1Combo2ShowMEDIAChoices(f_dlgSpeechSetup)
		Else
			
		End If
		If bRefreshText And FileExists(.GetControl(FileControl).Model.Text) Then
			If fsTheOsId() = &quot;MACOS&quot; And _
			fbIsLibreOffice() And _
			.GetControl(FileControl).Model.Text = PosixPythonPath() Then
				If fbHaveNetworkTTS() Then
					.GetControl(ComboBox).Model.Text = &quot;&quot;&quot;(SPD_READ_TEXT_PY)&quot;&quot;&quot; &amp; _
					&quot; --language &quot;&quot;(SELECTION_LANGUAGE_COUNTRY_CODE)&quot;&quot; --voice &quot;&quot;AUTO&quot;&quot;&quot; &amp; _
					ClientId &amp; _
					&quot; &quot;&quot;(TMP)&quot;&quot;&quot;
				Else
					.GetControl(ComboBox).Model.Text = &quot;&quot;&quot;(SPD_READ_TEXT_PY)&quot;&quot;&quot; &amp; _
					&quot; --language &quot;&quot;(SELECTION_LANGUAGE_COUNTRY_CODE)&quot;&quot;&quot; &amp; _
					ClientId &amp; _
					&quot; &quot;&quot;(TMP)&quot;&quot;&quot;	
				End If
			Else:
				.GetControl( _
				ComboBox).Model.Text = .GetControl( _
				ComboBox).GetItem(0)
			End If
		End If
    End With
End Sub


Sub ttsUpdateLabels()
	Dim s1 As String
	UpdatePoSettingsDone =  - 1
	s1 = fsDisplayLanguage()
	&apos;Update the labels with your language
	With f_dlgSpeechSetup
		.GetControl(&quot;CheckBox1&quot;).model.Label = fsLookUpTerm2(&quot;s_always-show-this-dialog&quot;, s1)
		.GetControl(&quot;CheckBox2&quot;).model.Label = fsLookUpTerm2(&quot;s_touch-screen&quot;, s1)
		.GetControl(&quot;CommandButton1&quot;).model.Label = fsLookUpTerm2(&quot;s_ok&quot;, s1)
		.GetControl(&quot;CommandButton2&quot;).model.Label = fsLookUpTerm2(&quot;s_cancel&quot;, s1)
		.GetControl(&quot;CommandButton3&quot;).model.Label = fsLookUpTerm2(&quot;s_about&quot;, s1) &amp; &quot;...&quot;
		.GetControl(&quot;FrameControl1&quot;).model.Label = fsLookUpTerm2(&quot;s_external-program&quot;, s1)
		.GetControl(&quot;FrameControl2&quot;).model.Label = fsLookUpTerm2(&quot;s_display&quot;, s1)
		If fbPiperTtsOk(&quot;&quot;) or fsTheOsId() = &quot;MACOS&quot; Then
			.GetControl(&quot;Label1&quot;).model.Label = fsLookUpTerm2(&quot;s_command-line-options&quot;, s1)
			.GetControl(&quot;OptionButton1&quot;).model.Label = fsLookUpTerm2(&quot;s_enable_experimental_features&quot;, s1)
		ElseIf InStr(LCase(.GetControl(&quot;FileControl1&quot;).Model.Text),&quot;festival&quot;) &lt;&gt; 0 Then
			&apos; or Instr(.GetControl(&quot;ComboBox1&quot;).Model.Text, &quot;&quot;&quot;(TMP)&quot;&quot; nil)(quit)&quot;) Then
			.GetControl(&quot;Label1&quot;).model.Label = fsLookUpTerm2(&quot;s_command&quot;, s1)
			.GetControl(&quot;OptionButton1&quot;).model.Label = fsLookUpTerm2(&quot;s_use-festival-with-a-script&quot;, s1)
		Else
			.GetControl(&quot;Label1&quot;).model.Label = fsLookUpTerm2(&quot;s_command-line-options&quot;, s1)
			.GetControl(&quot;OptionButton1&quot;).model.Label = fsLookUpTerm2(&quot;s_enable_experimental_features&quot;, s1)
		End If
		.GetControl(&quot;Label2&quot;).model.Label = fsLookUpTerm2(&quot;s_command-line-options&quot;, s1)

		.GetControl(&quot;OptionButton2&quot;).model.Label = fsLookUpTerm2(&quot;s_external-program&quot;, s1)
		.GetControl(&quot;OptionButton3&quot;).model.Label = fsLookUpTerm2(&quot;s_use-a-web-application&quot;, s1)
		.model.Title = fsLookUpTerm2(&quot;s_read-text&quot;, s1)
	End With
End Sub


Function fbUsingFestival(_test_text As String) As Boolean
	fbUsingFestival = FileExists(_test_text) And Instr(LCase(_
	_test_text), &quot;festival&quot;) &lt;&gt; 0
End Function


Sub ttsUpdateDisplay()
	&apos; These dialog items toggle between enabled And disabled depending On option button selected
	With f_dlgSpeechSetup
		Dim i#
		Dim _test_text$ : _test_text = .GetControl(&quot;FileControl1&quot;).Model.Text
		i = Len(.GetControl(&quot;FileControl1&quot;).Model.Text)
		If Len(fsMyURL()) = 0 Then
			.GetControl(&quot;OptionButton1&quot;).model.enabled = False
			.GetControl(&quot;OptionButton2&quot;).model.enabled = False
		ElseIf fbExperimentalMode() Then
			.GetControl(&quot;OptionButton1&quot;).model.enabled = True	
		ElseIf i = 0 Then
			&apos; No text in file control box
			.GetControl(&quot;OptionButton1&quot;).model.enabled = False
		Else
			If fbUsingFestival(_test_text) Then
				&apos; Festival is installed
				.GetControl(&quot;OptionButton1&quot;).model.enabled = True
			Else
				&apos; Cannot find festival
				.GetControl(&quot;OptionButton1&quot;).model.enabled = False
			End If
		End If
		.GetControl(&quot;ComboBox1&quot;).model.enabled = .GetControl(&quot;OptionButton1&quot;).Model.State
		.GetControl(&quot;FileControl1&quot;).model.enabled = .GetControl(&quot;OptionButton1&quot;).Model.State
		.GetControl(&quot;Label1&quot;).model.enabled = .GetControl(&quot;OptionButton1&quot;).Model.State
		.GetControl(&quot;ComboBox2&quot;).model.enabled = .GetControl(&quot;OptionButton2&quot;).Model.State
		.GetControl(&quot;ComboBox4&quot;).model.enabled = .GetControl(&quot;OptionButton3&quot;).Model.State
		.GetControl(&quot;FileControl2&quot;).model.enabled = .GetControl(&quot;OptionButton2&quot;).Model.State
		.GetControl(&quot;Label2&quot;).model.enabled = .GetControl(&quot;OptionButton2&quot;).Model.State
	End With
End Sub


Function fvCurrentDialogConfig() As Variant
	Dim file_control_2 As String
	With f_dlgSpeechSetup
		On Error Resume Next
		file_control_2 = .GetControl(&quot;FileControl2&quot;).Model.Text
		If fsTheOsId() = &quot;MACOS&quot; and fbIsLibreOffice() And _
		Instr(file_control_2, &quot;/usr/python&quot;) &lt;&gt; 0 Then
			file_control_2 = PosixPythonPath()
		End If
		If fsTheOsId() = &quot;POSIX.APPIMAGE&quot; And _
		Instr(file_control_2, &quot;/usr/python&quot;) &lt;&gt; 0 Then
			file_control_2 = ConvertFromUrl(BundlePyPath())
		End If
		Config(pi_display_info_integer) = .GetControl(&quot;CheckBox1&quot;).model.State
		Config(pi_use_smart_select_integer) = .GetControl(&quot;CheckBox2&quot;).model.State
		Config(pi_display_language_string) = .GetControl(&quot;ComboBox3&quot;).model.Text
		Config(pi_external_options_string) = .GetControl(&quot;ComboBox2&quot;).model.Text
		Config(pi_use_external_boolean) = .GetControl(&quot;OptionButton2&quot;).Model.State
		Config(pi_external_path_string) = file_control_2
		Config(pi_experimental_options_string) = .GetControl(&quot;ComboBox1&quot;).model.Text
		Config(pi_use_experimental_boolean) = .GetControl(&quot;OptionButton1&quot;).Model.State
		Config(pi_experimental_path_string) = .GetControl(&quot;FileControl1&quot;).Model.Text
		Config(pi_html_string) = .GetControl(&quot;ComboBox4&quot;).model.Text
		Config(pi_use_html_boolean) = .GetControl(&quot;OptionButton3&quot;).Model.State
	End With
	fvCurrentDialogConfig() = Config()
End Function


Sub aboutReadTextDialog()
	AboutAddOn(&quot;&quot;)
End Sub


Sub AboutAddOn( _
	myText As String)
	&apos; Dialog3
	Dim f_dlgAboutReadSelection As Variant
	Dim sFile As String
	Dim sA As String
	Dim sC As String
	Dim sE As String
	Dim file_spec As String : file_spec = fsTTSScriptVBS()
	Dim title_special As String : title_special = &quot;&quot;
	Dim msgs() As Variant
	Dim errorCode As Integer
	Dim s1$
	s1 = fsDisplayLanguage()
	Dim s2$
	s2 = fsHomeDrive()
	Dim s3$
	s3 = fsFullPathOf(&quot;ReadClipBoard.lock&quot;)
	Dim s4$
	s4 = &quot;&quot;
	Dim TextField$ : TextField = &quot;_text_field&quot;
	If fbExperimentalMode() Then
		title_special = &quot; - &quot; &amp; fsLookUpTerm2(&quot;s_enable_experimental_features&quot;, s1)
	End If	
	&apos; Open up the dialog
	DialogLibraries.LoadLibrary(&quot;textToSpeech&quot;)
	f_dlgAboutReadSelection = CreateUnoDialog(DialogLibraries.textToSpeech.Dialog3)
	With f_dlgAboutReadSelection
		&apos;Update the labels And button with your language
		.model.Title = fsLookUpTerm2(&quot;s_about&quot;, s1) &amp; _
		&quot; &quot; &amp; fsLookUpTerm2(&quot;s_read-text&quot;, s1) &amp; _
		&quot; &quot; &amp; fsExtensionVersion() &amp; title_special
		If fbHelpIsInstalled() Then
			.model.HelpURL = fsAppSignature() &amp; &quot;/tokens.xhp&quot;
		Else
			.model.HelpURL = &quot;&quot;
		End If
		.GetControl(&quot;TextField1&quot;).model.Text = fsAbout()
		.GetControl(&quot;CommandButton1&quot;).model.Label = fsLookUpTerm2(&quot;s_ok&quot;, s1)
		.GetControl(&quot;CommandButton2&quot;).model.helpText = fsLookUpTerm2(&quot;s_http-help-url&quot;, s1)
		.GetControl(&quot;CommandButton2&quot;).model.Label = fsLookUpTerm2(&quot;s_on-line-help&quot;, s1) &amp; &quot;...&quot;
		.GetControl(&quot;FrameControl1&quot;).model.Label = fsLookUpTerm2(&quot;s_about&quot;, s1)
		.GetControl(&quot;FrameControl2&quot;).model.Label = fsLookUpTerm2(&quot;s_script&quot;, s1)
		.GetControl(&quot;FrameControl3&quot;).model.Label = fsLookUpTerm2(&quot;s_command&quot;, s1)
		.GetControl(&quot;ImageControl1&quot;).model.helpText = .model.Title
		.GetControl(&quot;ImageControl1&quot;).model.ImageURL = fsExtensionLogo()
		.GetControl(&quot;ImageControl2&quot;).model.helpText = fsLookUpTerm2(&quot;s_test&quot;, s1)
		.GetControl(&quot;ImageControl2&quot;).model.ImageURL = fsSpeakerLogo()
		.GetControl(&quot;ImageControl3&quot;).model.helpText = Left(fsGetTextSelection(False, False),99)
		.GetControl(&quot;ImageControl3&quot;).model.ImageURL = fsSelectionLogo()
		
		If fbIsWin64Program(&quot;&quot;) Then
			&apos; 2022 - If the clipboard is empty, then the program
			&apos; might crash in Windows.
			.GetControl(&quot;ImageControl4&quot;).model.ImageURL = fsClipBoardLogo()
			.GetControl(&quot;ImageControl4&quot;).model.Enabled = fbExperimentalMode()
			.GetControl(&quot;Label2&quot;).model.Enabled = fbExperimentalMode()
		Else
			CreateFile(s3, fsGetSetting(&quot;oosetupversion&quot;), &quot;&quot;)  &apos; lock clipboard
			fsGetClipBoard(False)
			&apos; To avoid a crash, the testing version of office
			&apos; needs a dummy run of function before evaluating
			&apos; the results.
			&apos; if it crashes, then we are left with a lock file.
			fbRemoveFile(s3)  &apos; unlock clipboard
			If fbExperimentalMode() Then
				s4 = fsSelectionLanguageAndRegion()
			Else:
				s4 = fsGetClipBoard(False)
			End If
			.GetControl(&quot;ImageControl4&quot;).model.helpText = Left( _
			s4, 99)
			.GetControl(&quot;Label2&quot;).model.helpText = Left( _
			s4, 99)
			.GetControl(&quot;ImageControl4&quot;).model.ImageURL = fsClipBoardLogo()
			.GetControl(&quot;Label2&quot;).model.Label = Len(s4)
		End If
		If fbExperimentalMode() Then
			.GetControl(&quot;ImageControl5&quot;).model.helpText = fsSelectionLanguageAndRegion(False) &amp; _
			&quot;_lexicon.json&quot;
		Else
			If Len(WinSpeechProgramPath()) &lt;&gt; 0 Then
				.GetControl(&quot;ImageControl5&quot;).model.helpText = fsLookUpTerm2( _
				&quot;s_speech-properties&quot;, s1)
			Else
				.GetControl(&quot;ImageControl5&quot;).model.helpText = fsLookUpTerm2( _
				&quot;s_system-settings&quot;, s1)
			End If
		End If
		.GetControl(&quot;ImageControl5&quot;).model.ImageURL = fsToolBoxLogo()
		.GetControl(&quot;Label1&quot;).model.helpText = Left(fsGetTextSelection(False, False),99)
		.GetControl(&quot;Label1&quot;).model.Label = Len(fsGetTextSelection(False, False))
		&apos;Change the text in the information text boxes&apos;
		If Config(pi_use_experimental_boolean) And Instr(LCase(Config(pi_experimental_path_string)), &quot;festival&quot;) &lt;&gt; 0 Then
			.GetControl(&quot;TextField3&quot;).model.Text = Config(pi_experimental_path_string) &amp; &quot; &quot; &amp; _
			&quot;&quot;&quot;&quot; &amp; ConvertFromUrl(fsFestivalScriptName()) &amp; &quot;&quot;&quot;&quot;
			sA = replaceLocalTokensWithStr(Config(pi_experimental_options_string))
			sA = replacePublicTokensWithStr(sA)
			.GetControl(&quot;TextField2&quot;).model.Text = sA
		ElseIf Config(pi_use_external_boolean) or Config(pi_use_experimental_boolean) Then
			If Config(pi_use_external_boolean) Then
				sA = Config(pi_external_options_string)
				sE = Config(pi_external_path_string)
			Else &apos; Config(pi_use_experimental_boolean)
				sA = Config(pi_experimental_options_string)
				sE = Config(pi_experimental_path_string)
			End If
			sC = Trim(sA)  &apos; If not byVal in Function arguements, ensure sA is untouched
			.GetControl(&quot;TextField3&quot;).model.helpText = sC
			sC = replaceLocalTokensWithStr(sC)
			sC = replacePublicTokensWithStr(sC)
			.GetControl(&quot;TextField3&quot;).model.Text = &quot;&quot;&quot;&quot; &amp; sE &amp; &quot;&quot;&quot; &quot; &amp; sC
			.GetControl(&quot;TextField2&quot;).model.helpText = fsAboutScriptHint(file_spec)
			If Len(myText) &lt;&gt; 0 Then
				TextField = myText
			ElseIf InStr(sA, &quot;(TTS_WSCRIPT_VBS)&quot;) &lt;&gt; 0 Then
				TextField = fsVBSTextString()
			ElseIf InStr(sA, &quot;(SPD_READ_TEXT_PY)&quot;) &lt;&gt; 0 Then
				file_spec = fsPythonSpdDoc()
				TextField = getLimitedTextFromFile(file_spec)
			ElseIf InStr(sA, &quot;(ESPEAK_READ_TEXT_PY)&quot;) &lt;&gt; 0 Then
				file_spec = fsPythonEspeakDoc()
				TextField = getLimitedTextFromFile(file_spec)
			ElseIf InStr(sA, &quot;(FESTIVAL_READ_TEXT_PY)&quot;) &lt;&gt; 0 Then
				file_spec = fsPythonFestivalDoc()
				TextField = getLimitedTextFromFile(file_spec)
			ElseIf InStr(sA, &quot;(NETWORK_READ_TEXT_PY)&quot;) &lt;&gt; 0 Then
				file_spec = fsNetworkTtsDoc()
				TextField = getLimitedTextFromFile(file_spec)
			ElseIf InStr(sA, &quot;(OPENJTALK_READ_TEXT_PY)&quot;) &lt;&gt; 0 Then
				file_spec = fsPythonOpenJTalkDoc()
				TextField = getLimitedTextFromFile(file_spec)
			ElseIf InStr(sA, &quot;(PICO_READ_TEXT_PY)&quot;) &lt;&gt; 0 Then
				file_spec = fsPythonPicoDoc()
				TextField = getLimitedTextFromFile(file_spec)
			ElseIf InStr(sA, &quot;(PIPER_READ_TEXT_PY)&quot;) &lt;&gt; 0 Then
				file_spec = fsPythonPiperDoc()
				TextField = getLimitedTextFromFile(file_spec)
			ElseIf InStr(sA,  &quot;(RHVOICE_READ_TEXT_PY)&quot;) &lt;&gt; 0 Then
				file_spec = fsRhVoiceTtsDoc()
				TextField = getLimitedTextFromFile(file_spec)
			ElseIf InStr(sA, &quot;(CREATE_QR_LABEL_PY)&quot;) &lt;&gt; 0 Then			
				file_spec = fsPythonCreateQR()
				TextField = getLimitedTextFromFile(file_spec)			
			ElseIf InStr(sA, &quot;(SAY_APPLESCRIPT)&quot;) &lt;&gt; 0 Then
				file_spec = &quot;&quot;
				TextField = fswriteMacOSSpeechScript(&quot;&quot;, _
				fsSelectionLanguageAndRegion(True), &quot;&quot;)
			ElseIf InStr(sA, &quot;(SAY_APPLESCRIPT_SLOWLY)&quot;) &lt;&gt; 0 Then
				file_spec = &quot;&quot;
				TextField = fswriteMacOSSpeechScript(&quot;-r 110 &quot;, _
				fsSelectionLanguageAndRegion(True), &quot;&quot;)
			ElseIf InStr(sA, &quot;(SAY_APPLESCRIPT_QUICKLY)&quot;) &lt;&gt; 0 Then
				file_spec = &quot;&quot;
				TextField = fswriteMacOSSpeechScript(&quot;-r 240 &quot;, _
				fsSelectionLanguageAndRegion(True), &quot;&quot;)
			ElseIf InStr(sA, &quot;(SAY_APPLESCRIPT_SYSTEM_VOICE)&quot;) &lt;&gt; 0 Then
				file_spec = &quot;&quot;
				TextField = fswriteMacOSSpeechScript(&quot;&quot;, _
				&quot;&quot;, &quot;&quot;)
			Else
				file_spec = &quot;&quot;
				TextField = &quot;&quot;
			End If
			If Len(file_spec) &lt;&gt; 0 Then
				.GetControl(&quot;TextField2&quot;).model.helpText = fsAboutScriptHint(file_spec)
			End If
			.GetControl(&quot;TextField2&quot;).model.Text = TextField
		Else &apos; if Config(pi_use_html_boolean) then
			sA = replacePublicTokensWithStr(Config(pi_html_string))
			.GetControl(&quot;TextField3&quot;).model.Text = &quot;[com.sun.star.system.SystemShellExecute]&quot;
			If InStr(sA,&quot;.google.&quot;) &lt;&gt; 0 Then
				sA = sA &amp; Chr(13) &amp; Chr(13) &amp; &quot;Powered by Google TM&quot;
			End If
			.GetControl(&quot;TextField2&quot;).model.Text = sA
		End If

		&apos; Show the dialog
		.Execute()
	End With
End Sub
</script:module>