<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="TTS_Config" script:language="StarBasic">Rem *  *  *  *  * BASIC *  *  *  *  *
&apos;&apos; TTS_Configz
&apos;&apos; # Configuration tools
&apos;&apos; 
&apos;&apos; These procedures make dialogues, get settings and write settings.
&apos;&apos; Dialogues in Read Text Extension are updated each time that you see
&apos;&apos; them. You can immediately change the dialogue language from the display
&apos;&apos; preferences field of the main dialogue.
&apos;&apos; 
&apos;&apos; ## Audio tracks
&apos;&apos; 
&apos;&apos; An mp3 album can have up to 255 tracks. This extension uses the document
&apos;&apos; *title* as the album title. The track number is the number of times you
&apos;&apos; have created a sound file from a document with the same title. if the
&apos;&apos; track number is over 255, then the counter restarts at 1.
&apos;&apos; 
&apos;&apos; ### Title vs.Â file name
&apos;&apos; 
&apos;&apos; The document title is *not* the same as the file name, and any number of
&apos;&apos; files can have the same title. The title is used as the album name of
&apos;&apos; exported sound files. You can assemble an album made up of different
&apos;&apos; documents, by setting the title of each document to the same value. Use
&apos;&apos; *File - Properties - Description - Title* to set a document title.
&apos;&apos;
Option Explicit
&apos; Variable holding the dialog box.
Private f_dlgSpeechSetup As Variant
Private f_dlgJsonEdit As Variant
Private f_dlgAboutReadSelection As Variant
Private f_dlgOnnxSetting As Variant
&apos; Persistent information about the current recording track and
&apos; the URL of last processed document.


Sub ClearWorkingCountryLanguage()
	s_CaReadTextExtensionWorkingCountryLanguage = &quot;&quot;
End Sub


Sub SetWorkingCountryLanguage()
	s_CaReadTextExtensionWorkingCountryLanguage = fsSelectionLanguageAndRegion(True)
End Sub


Function fiMyCurrentAudioTrack( _
	ByVal bIncrement) As Integer
	fiMyCurrentAudioTrack = 1
	On Error Goto fiMyCurrentAudioTrackErr
	If bIncrement Then
		&apos; Add one to the track index
		If s_CaReadTextExtensionLastSpokenDocTitle = fsThisDocTitle Then
			If i_CaReadTextExtensionLastSpokenTrack &lt; 256 And _
				i_CaReadTextExtensionLastSpokenTrack &gt; 0 Then
				i_CaReadTextExtensionLastSpokenTrack = _
				i_CaReadTextExtensionLastSpokenTrack + 1
			Else
				i_CaReadTextExtensionLastSpokenTrack = 1
			End If
		Else
			i_CaReadTextExtensionLastSpokenTrack = 1
			s_CaReadTextExtensionLastSpokenDocTitle = fsThisDocTitle
		End If
	Else
		If Not(s_CaReadTextExtensionLastSpokenDocTitle = fsThisDocTitle) Then
			i_CaReadTextExtensionLastSpokenTrack = 1
			s_CaReadTextExtensionLastSpokenDocTitle = fsThisDocTitle
		End If
	End If
	fiMyCurrentAudioTrack = i_CaReadTextExtensionLastSpokenTrack
	Exit Function
	fiMyCurrentAudioTrackErr:
	
	fiMyCurrentAudioTrack = 1
	i_CaReadTextExtensionLastSpokenTrack = 1
	s_CaReadTextExtensionLastSpokenDocTitle = fsThisDocTitle
End Function


Function SaveAsJsonDialog(_default As String) As String
	&apos; Returns a URI file path or `&apos;&apos;` if you hit *Cancel*&apos;
	Dim _file_list As Object
	SaveAsJsonDialog = &quot;&quot;
	Dim _file_picker_args As Variant : _file_picker_args = Array(_
	com.sun.star.ui.dialogs.TemplateDescription.FILESAVE_AUTOEXTENSION)	
	Dim oDlg As Object : oDlg = createUnoService(_
	&quot;com.sun.star.ui.dialogs.FilePicker&quot;)
	With oDlg
		.initialize(_file_picker_args())
		.setMultiSelectionMode(False)
		.SetDefaultName(_default)
		.appendFilter(&quot;JavaScript Object Notation (.json)&quot;, &quot;*.json&quot;)
		.appendFilter(&quot;JavaScript (.js)&quot;, &quot;*.js&quot;)
		.appendFilter(&quot;Pronunication Lexicon Specification (.lmxl)&quot;, &quot;*.lmxl&quot;) &apos; via IBM
		.appendFilter(&quot;Pronunication Lexicon Specification (.pls)&quot;, &quot;*.pls&quot;) &apos; Accessible ePub 3 book
		.appendFilter(&quot;Pronunication Lexicon Specification (.xml)&quot;, &quot;*.xml&quot;)  &apos; generic
		.CurrentFilter = &quot;JavaScript Object Notation (.json)&quot;
		.SetValue(com.sun.star.ui.dialogs.ExtendedFilePickerElementIds.CHECKBOX_AUTOEXTENSION, 0, True)
		.SetValue(com.sun.star.ui.dialogs.ExtendedFilePickerElementIds.CHECKBOX_PASSWORD, 0, False)
		.EnableControl(com.sun.star.ui.dialogs.ExtendedFilePickerElementIds.CHECKBOX_PASSWORD, False)
		.setTitle(fsLookUpTerm2(_
			&quot;s_speech-properties&quot;, fsDisplayLanguage()))
		If .execute() then
			_file_list = .getFiles()
			SaveAsJsonDialog = _file_list(0)
			If Instr(SaveAsJsonDialog, &quot;.&quot;) = 0 Then
				SaveAsJsonDialog = SaveAsJsonDialog &amp; &quot;.json&quot;
			End If
		End If
	End With
End Function


Function OpenJsonFileDialog() As String
	&apos; Returns a file path if found or `&apos;&apos;` if Cancelled.
	&apos; Adapted from LibreOffice Ref Card LibreOffice Basic Dialogs
	&apos; v. 103, 2018.01.17
	&apos; &lt;https://documentation.libreoffice.org&gt;
	OpenJsonFileDialog = &quot;&quot;
	Dim FileName As String : FileName = &quot;&quot;
	Dim oFilePicker As Object : oFilePicker = CreateUnoService(_
	&quot;com.sun.star.ui.dialogs.FilePicker&quot;)
	With oFilePicker
		.DisplayDirectory = ConvertToURL(fsGetHomeDir())
		.appendFilter(&quot;JavaScript Object Notation (.json)&quot;, &quot;*.json&quot;)
		.appendFilter(&quot;JavaScript (.js)&quot;, &quot;*.js&quot;)
		.CurrentFilter = &quot;JavaScript Object Notation (.json)&quot;
		.Title = fsLookUpTerm2(_
			&quot;s_speech-properties&quot;, fsDisplayLanguage())
		If .execute = _
			com.sun.star.ui.dialogs.ExecutableDialogResults.OK Then
			FileName = .Files(0)
		End If
	End With
	OpenJsonFileDialog = FileName
End Function


Sub ImportJsonPhonemeTable(Event)
	&apos; Dialog2 _open
	Dim _mouse_alt As Integer : _mouse_alt = 2
	Dim _mouse_event As Integer : _mouse_event = fiMyMouseEventToInt(Event)
	Select Case _mouse_event
		Case _mouse_alt
		ResetPhonemesGit()
		Exit Sub
	End Select
	Dim _in_file As String : _in_file = OpenJsonFileDialog()
	If Len(_in_file) = 0 Then
		Exit Sub
	End If
	Dim _file As String : _file = &quot;&quot;
	Dim _language As String : _language = &quot;&quot;
	Dim _model As String : _model = &quot;&quot;
	Dim _json_display As String : _json_display = getLimitedTextFromFile(_in_file)

	If Instr(_json_display, &quot;&quot;&quot;,&quot;&quot;p&quot;&quot;:&quot;&quot;&quot;) = 0 Or Instr(_
	_json_display, &quot;}&quot;) = 0 Then
		Exit Sub
	End If

	With f_dlgJsonEdit
		_language = .GetControl(&quot;_test1&quot;).model.helpText
		_model = .GetControl(&quot;_test2&quot;).model.helpText
		_file = .GetControl(&quot;_json_text&quot;).model.helpText
		.GetControl(&quot;_json_text&quot;).visible = False
		.GetControl(&quot;_json_text&quot;).model.Text = _json_display
		.GetControl(&quot;_json_text&quot;).visible = True
		CreateFile(_file, _json_display, &quot;&quot;)
		If FileExists(_file) Then
			.GetControl(&quot;_phoneme&quot;).model.enabled = False
			.GetControl(&quot;_phoneme&quot;).model.Text = &quot;&quot;
			.GetControl(&quot;_grapheme&quot;).model.enabled = False
			.GetControl(&quot;_grapheme&quot;).model.Text = &quot;&quot;
			.GetControl(&quot;_add&quot;).model.enabled = False
			.GetControl(&quot;_test1&quot;).model.enabled = False
			.GetControl(&quot;_test2&quot;).model.enabled = False
		End If
	End With
End Sub


Sub SaveJsonPhonemeTable(Event)
	&apos; Dialog2 _lexicon editor Save As...
	&apos; See also : ImportJsonPhonemeTable()
	Dim _mouse_event As Integer : _mouse_event = fiMyMouseEventToInt(Event)
	Dim MouseAlt As Integer : MouseAlt = 2
	Dim _out_file As String : _out_file = &quot;&quot;
	Dim _json_display As String : _json_display = &quot;&quot;
	Dim _language As String : _language = &quot;&quot;
	Dim _model As String : _model = &quot;&quot;
	Dim _ext As String : _ext = &quot;json&quot;
	Dim _control As Variant : _control = Split(converttourl(_
	f_dlgJsonEdit.GetControl(&quot;_json_text&quot;).model.helpText), &quot;/&quot;)
	Dim _default As String : _default =_control(Ubound(_
	_control)-1) &amp; &quot;_&quot; &amp; _control(Ubound(_control))
	Select Case _mouse_event
		Case MouseAlt
			_default = _control(Ubound(_control))
	End Select
	_out_file = SaveAsJsonDialog(Split(_default, &quot;.&quot;)(0))
	If Len(_out_file) = 0 Then
		Exit Sub
	End If
	If Instr(_out_file, &quot;.&quot;) = 0 Then
		_ext = &quot;json&quot;
		_out_file = _out_file &amp; &quot;.&quot; &amp; _ext
	Else
		_ext = Split(_out_file, &quot;.&quot;)(1)
	End If
	With f_dlgJsonEdit
		_language = .GetControl(&quot;_test1&quot;).model.helpText
		_model = .GetControl(&quot;_test2&quot;).model.helpText
		_json_display = .GetControl(&quot;_json_text&quot;).model.Text
		Select Case Lcase(_ext)
			Case &quot;js&quot;, &quot;json&quot;, &quot;&quot;
			CreateFile(_out_file, _json_display, &quot;&quot;)
			Select Case _mouse_event
				Case MouseAlt
				&apos; Update json and remove duplicate items.
				fbUpdateLexiconFile(_language, _model, _out_file)
				.GetControl(&quot;_json_text&quot;).visible = False
				.GetControl(&quot;_json_text&quot;).model.Text = getTextFromFile(_out_file, &quot;&quot;, 0)
				.GetControl(&quot;_json_text&quot;).visible = True	
			End Select
			Case &quot;xml&quot;, &quot;pls&quot;, &quot;lmxl&quot;
				CreateFile(_out_file, _json_display, &quot;&quot;)
				fbUpdateLexiconFile(_language, _model, _out_file)
		End Select
	End With
End Sub


Function fsGetTheSelectedWord()
	fsGetTheSelectedWord = fsQuickTitle(1, 99, fsTrimSpecial(fsGetTextSelection(False, False),  &quot; `_-*#&gt;_&quot;))
End Function


Function CustomLexiconDir()
	 CustomLexiconDir = ConvertFromUrl(fsFullPathOf(&quot;lexicons/&quot;))
End Function


Type SpeechHostInfo
	about as String
	key as String
	label as String
	langs as String
	token as String
	url as String
	url_info as String
	json_dir as String
	sample as String
	docker as String
	tags as Variant
End Type


Function MaryTtsSpeechHostInfo()
	Dim _info As SpeechHostInfo
	With _info
		.about = &quot;MaryTTS 5.2 text to speech server with 19 voices for 8 languages&quot;
		.key = &quot;Mary TTS server&quot;
		.label = &quot;marytts-server&quot;
		.langs = &quot;en&quot;  &apos; Omit languages because compatible hosts might not include them
		.token = &quot;&quot;
		.url = &quot;http://0.0.0.0:59125&quot;
		.url_info = &quot;/version&quot;
		.json_dir = &quot;mary_tts&quot;
		.sample = &quot;http://0.0.0.0:59125?AUDIO=WAVE_FILE&amp;OUTPUT_TYPE=AUDIO&amp;INPUT_TYPE=TEXT&amp;LOCALE=de&amp;INPUT_TEXT=Hallo+welt&quot;
		.docker = &quot;https://hub.docker.com/r/synesthesiam/marytts&quot;
		Select Case fsTheOsId()
			Case &quot;POSIX.APPIMAGE&quot;, &quot;POSIX.SNAP&quot;, &quot;POSIX.FLATPAK&quot;
			.tags = Array(&quot;text&quot;, &quot;phonetic&quot;, &quot;wav&quot;, &quot;web-ui&quot;)
		Case Else
			.tags = Array(&quot;text&quot;, &quot;xml&quot;, &quot;ssml&quot;, &quot;rawmaryxml&quot;, &quot;wav&quot;, &quot;rate&quot;, &quot;web-ui&quot;)
		End Select
	End With
	MaryTtsSpeechHostInfo = _info
End Function


Function MimicSpeechHostInfo()
	Dim _info As SpeechHostInfo
	With _info
		.about = &quot;Mimic is a fast local neural text to speech engine for Mycroft&quot;
		.key = &quot;en_UK/apope_low en_UK NA vits&quot;
		.label = &quot;mimic3-server&quot;
		.langs = &quot;en&quot;  &apos; Omit languages because Mimic3 might not include them
		.token = &quot;&quot;
		.url = &quot;http://0.0.0.0:59125&quot;
		.url_info = &quot;/voices&quot;
		.json_dir = &quot;mimic&quot;
		.sample = &quot;http:0.0.0.0:59125/api/tts?text=Hello%20world&amp;voice=apope&amp;ssml=0&quot;
		.docker = &quot;https://hub.docker.com/r/mycroftai/docker-mycroft/&quot;
		.tags = Array(&quot;text&quot;, &quot;xml&quot;, &quot;ssml&quot;, &quot;wav&quot;, &quot;rate&quot;, &quot;web-ui&quot;)
	End With
	MimicSpeechHostInfo = _info
End Function


Function OpenttsSpeechHostInfo()
	Dim _info As SpeechHostInfo
	With _info
		.about = &quot;OpenTTS server supports multiple text to speech systems and voices.&quot;
		.key = &quot;OpenTTS&quot;
		.label = &quot;opentts-server&quot;
		.langs = &quot;de,en,es,fr,it&quot;  &apos; Omit espeak languages because server might not include them
		.token = &quot;&quot;
		.url = &quot;http://0.0.0.0:5500&quot;
		.url_info = &quot;/&quot;
		.json_dir = &quot;default&quot;
		.sample = &quot;http://0.0.0.0:5500/api/tts?voice=nanotts%3Aes&amp;text=Hola%20el%20mundo&amp;vocoder=medium&amp;denoiserStrength=0.03&amp;cache=false&quot;
		.docker = &quot;https://hub.docker.com/r/synesthesiam/opentts&quot;
		.tags = Array(&quot;text&quot;, &quot;wav&quot;, &quot;web-ui&quot;)
	End With
	OpenttsSpeechHostInfo = _info
End Function


Function PiperSpeechHostInfo()
	Dim _info As SpeechHostInfo
	&apos; On 2023-12-21 synesthesiam (Michael Hansen) committed
	&apos; &lt;https://github.com/OHF-Voice/piper1-gpl/commit/2fa4c2c13933c1f6b8d87e34d12788ca8e6d073b&gt;
	&apos; See: https://raw.githubusercontent.com/rhasspy/piper/master/src/python_run/piper/http_server.py
	&apos; See: https://www.youtube.com/watch?v=pLR5AsbCMHs
	&apos; ```(venv)
	&apos;python -m piper.http_server --model ~/pathto/en_US-lessac-medium.onnx
	&apos;
	&apos; * Serving Flask app &apos;http_server&apos;
	&apos; * Debug mode: off
	&apos;INFO:werkzeug:WARNING: This is a development server. Do not use it in a
	&apos; production deployment. Use a production WSGI server instead.
	&apos;
	&apos; * Running on all addresses (0.0.0.0)
	&apos; * Running on http://127.0.0.1:5000
	&apos; * Running on http://192.168.0.nnn:5000
	&apos; ```

	With _info
		.about = Join(Array(&quot;[Piper TTS](https://github.com/OHF-Voice/piper1-gpl)&quot;,_
		&quot; is a neural text to speech system.&quot;), _
		&quot;&quot;)
		.key = &quot;,&quot;&quot;inference&quot;&quot;:&quot;  &apos; Check for this JSON key string
		.label = &quot;piper-server&quot;
		.langs = Left(fsLang(), 2)
		.token = &quot;&quot;
		.url = &quot;http://127.0.0.1:5000&quot;  &apos; The server can serve several voice models.
		.url_info = &quot;/voices&quot;  &apos; Check if the server is running. There&apos;s no UI.
		.json_dir = &quot;default&quot;
		.sample = &quot;http://127.0.0.1:5000/voices&quot;
		.docker = &quot;&quot;
		.tags = Array(&quot;splitlines&quot;, &quot;text&quot;, &quot;wav&quot;)
	End With
	PiperSpeechHostInfo = _info
End Function


Function RhvoiceSpeechHostInfo()
	Dim _info As SpeechHostInfo
	With _info
		.about = Join(Array(&quot;A speech synthesizer for Albanian, English, Esperanto, Georgian, Kyrgyz,&quot;,_
		&quot; Macedonian, Portuguese, Russian, Tatar and Ukrainian&quot;),&quot;&quot;)
		.key = &quot;rhvoice_wrapper_library_version&quot;
		.label = &quot;rhvoice-rest&quot;
		.langs = &quot;en,eo,ky,mk,pl,pt,ru,sq,tt,ua,uk&quot;
		.token = &quot;&quot;
		.url = &quot;http://0.0.0.0:8080&quot;
		.url_info = &quot;/info&quot;
		.json_dir = &quot;rhvoice&quot;
		.sample = &quot;http://0.0.0.0:8080/say?format=mp3&amp;rate=50&amp;pitch=50&amp;volume=50&amp;voice=slt&amp;text=Hello%20World&quot;
		.docker = &quot;https://hub.docker.com/r/aculeasis/rhvoice-rest&quot;
		.tags = Array(&quot;text&quot;, &quot;pitch&quot;, &quot;rate&quot;, &quot;volume&quot;, &quot;mp3&quot;, &quot;ogg&quot;, &quot;flac&quot;, &quot;wav&quot;)
	End With
	RhvoiceSpeechHostInfo = _info
End Function


Function MacOSSpeechAppInfo()
	Dim _info As SpeechHostInfo
	Select Case fsTheOsId()
		Case &quot;MACOS&quot;, &quot;MACOS.EXPERIMENTAL&quot;
		With _info
			.about = &quot;&quot;
			.key = &quot;&quot;
			.label = &quot;macos-say&quot;
			.token = &quot;&quot;
			.langs = &quot;en&quot;
			.url = fsMyURL() &amp; &quot;/po/macos_say&quot;
			.url_info = &quot;/en-US_lexicon.json&quot;
			.json_dir = &quot;macos_say&quot;
			.sample = &quot;&quot;
			.docker = &quot;&quot;
			.tags = Array(_
			&quot;always-available&quot;, &quot;text&quot;, &quot;m4a&quot;, &quot;mp3&quot;, &quot;wav&quot;, &quot;rate&quot;, _
			&quot;audio-only-option&quot;, &quot;optional-voices&quot;)
		End With
		Case Else
		_info = MaryTtsSpeechHostInfo()
	End Select
	MacOSSpeechAppInfo = _info
End Function


Function PosixFestivalSpeechAppInfo()
	&apos; This is available as a speech-dispatcher plugin.
	Dim _info As SpeechHostInfo
	With _info
		.about = &quot;Festival is a speech synthesiser developed in 1995 at the University of Edinburgh.&quot;
		.key = &quot;&quot;
		.label = &quot;festival-tts&quot;
		.langs = &quot;en&quot;
		.token = &quot;(FESTIVAL_READ_TEXT_PY)&quot;
		.url = fsMyURL() &amp; &quot;/po/festival&quot;
		.url_info = &quot;/en-US_lexicon.json&quot;
		.json_dir = &quot;festival&quot;
		.sample = &quot;&quot;
		.docker = &quot;&quot;
		.tags = Array(&quot;text&quot;, &quot;wav&quot;, &quot;rate&quot;, &quot;optional-voices&quot;)
	End With
	PosixFestivalSpeechAppInfo = _info
End Function


Function PosixPiperTtsSpeechAppInfo()
	&apos; This implimentation of Piper TTS uses a binary download for Linux.
	&apos; It only supports a basic subset of Piper TTS tools.
	&apos;
	&apos; Some voices do not work on all computers or do not include copyright
	&apos; information.
	Dim _info As SpeechHostInfo
	With _info
		.about = &quot;Piper TTS is a fast, private local neural text to speech engine.&quot;
		.key = &quot;&quot;
		.label = &quot;piper-tts&quot;
		.langs = &quot;en&quot;
		.token = &quot;(PIPER_READ_TEXT_PY)&quot;
		.url = fsMyURL() &amp; &quot;/po/default&quot;
		.url_info = &quot;/en-US_lexicon.json&quot;
		.json_dir = &quot;default&quot;
		.sample = &quot;&quot;
		.docker = &quot;&quot;
		.tags = Array(&quot;text&quot;, &quot;wav&quot;, &quot;rate&quot;)
	End With
	PosixPiperTtsSpeechAppInfo = _info
End Function


Function PosixRhvoiceSpeechAppInfo()
	&apos; This relies on a depreciated &quot;developer&quot; interface. If you are an end user
	&apos; you can run this application with additional options on a Docker localhost
	&apos; server or as a speech-dispatcher service.
	Dim _info As SpeechHostInfo
	With _info
		.about = &quot;Olga Yakovleva created RHVoice in 2011. It now includes several languages.&quot;
		.key = &quot;{&quot;
		.label = &quot;rhvoice&quot;
		.langs = &quot;ru&quot;
		.token = &quot;(RHVOICE_READ_TEXT_PY)&quot;
		.url = fsMyURL() &amp; &quot;/po/rhvoice&quot;
		.url_info = &quot;/en-US_lexicon.json&quot;
		.json_dir = &quot;rhvoice&quot;
		.sample = &quot;&quot; &apos; &quot;https://rhvoice.su/downloads/lyubov/demo.mp3?_=11&quot;
		.docker = &quot;&quot;
		.tags = Array(&quot;text&quot;, &quot;wav&quot;, &quot;optional-voices&quot;, &quot;ubuntu&quot;, &quot;developer&quot;, &quot;depreciated&quot;)
	End With
	PosixRhvoiceSpeechAppInfo = _info
End Function


Function PosixSvoxPicoSpeechAppInfo()
	Dim _info As SpeechHostInfo
	With _info
		.about = &quot;SVOX Pico is a compact speech synthesiser with low latency.&quot;
		.key = &quot;&quot;
		.label = &quot;svox-pico&quot;
		.langs = &quot;de,en,es,fr,it&quot;
		.token = &quot;(PICO_READ_TEXT_PY)&quot;
		.url = fsMyURL() &amp; &quot;/po/svox_pico&quot;
		.url_info = &quot;/en-US_lexicon.json&quot;
		.json_dir = &quot;svox_pico&quot;
		.sample = &quot;&quot;
		.docker = &quot;&quot;
		.tags = Array(&quot;text&quot;, &quot;wav&quot;, &quot;rate&quot;)
	End With
	PosixSvoxPicoSpeechAppInfo = _info
End Function


Function WindowsSpeechAppInfo()
	Dim _info As SpeechHostInfo
	With _info
		Select Case fsTheOsId()
			Case &quot;WINDOWS&quot;, &quot;WINDOWS.EXPERIMENTAL&quot;
			.about = &quot;Windows Speech Application Interface (SAPI)&quot;
			.key = &quot;&quot;
			.label = &quot;windows-sapi&quot;
			.url = fsMyURL() &amp; &quot;/po/windows_sapi&quot;
			.url_info = &quot;/en-US_lexicon.json&quot;
			.json_dir = &quot;windows_sapi&quot;
			.sample = &quot;&quot;
			.docker = &quot;&quot;
			.tags = Array(_
			&quot;always-available&quot;, &quot;text&quot;, &quot;wav&quot;, &quot;rate&quot;, &quot;audio-only-option&quot;, _
			&quot;optional-voices&quot;)
			Case &quot;WINDOWS.WINE&quot;
			.about = &quot;Wine Speech Stub or Test&quot;
			.key = &quot;&quot;
			.label = &quot;windows-sapi&quot;
			.url = fsMyURL() &amp; &quot;/po/windows_sapi&quot;
			.url_info = &quot;/en-US_lexicon.json&quot;
			.json_dir = &quot;windows_sapi&quot;
			.sample = &quot;&quot;
			.docker = &quot;&quot;
			.tags = Array(_
			&quot;stub&quot;, _
			&quot;wine&quot;)
			Case &quot;WINDOWS.NOSCRIPT&quot;
			.about = &quot;Windows NET Speech&quot;
			.key = &quot;&quot;
			.label = &quot;windows-sapi&quot;
			.url = fsMyURL() &amp; &quot;/po/windows_sapi&quot;
			.url_info = &quot;/en-US_lexicon.json&quot;
			.json_dir = &quot;windows_sapi&quot;
			.sample = &quot;&quot;
			.docker = &quot;&quot;
			.tags = Array(_
			&quot;stub&quot;, _
			&quot;noscript&quot;, _
			&quot;net&quot;)
			Case Else
			_info = MaryTtsSpeechHostInfo()
	End Select
	End With
	WindowsSpeechAppInfo = _info
End Function


Function fsGitRawJson(_
		json_dir As String,_
		lang_region As String,_
		raw_git As String) As String
	Dim _fallback_info : _fallback_info = WindowsSpeechAppInfo()
	&apos; Obtain the most recent published phoneme transcription. If you are editing
	&apos; or creating a list to publish, note that not all platforms or voices
	&apos; support the International Phonetic Alphabet. In these cases, you have to
	&apos; experiment with spelling and similar sounding words to get the
	&apos; pronunciation you want. For example:
	&apos;
	&apos; + &quot;reed&quot; for the verb &quot;to read&quot; instead of the sound of the colour &quot;red&quot;.
	&apos; + &quot;qwa-nel&quot; for the town &quot;Quesnel&quot;
	&apos;
	&apos; `raw_git` : a custom URL
	&apos; ------------------------
	&apos;
	&apos; You can use a custom lexicon URL for your class, school or organization.
	&apos; Set up a server that  points to a private local access point that uses
	&apos; the same directory structure as the `po` directory in the extension code.
	&apos;
	&apos; See
	&apos;
	&apos; * &lt;https://forums.docker.com/t/using-localhost-for-to-access-running-container/3148/6&gt;
	&apos; * &lt;https://docs.docker.com/network/&gt;
	&apos; * &lt;https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml&gt;
	&apos;
	&apos; The default docker address is &lt;http://localhost:41604/po/&gt;. Developers or
	&apos; other third parties can use a docker server to provide customized lexicons
	&apos; to suit your needs.
	&apos;
	&apos; For development on your network, you should set `raw-git` to point to a URL
	&apos; that works on your network using a local environment variable called
	&apos; `READTEXT_ONLINE_LEXICON_URL`. The json document location for a region is
	&apos; `~/po/&lt;speech-engine&gt;/&lt;language&gt;-&lt;locale&gt;_lexicon.json`

	If Len(json_dir) = 0 Then json_dir = _fallback_info.json_dir
	If Len(lang_region) = 0 Then lang_region = &quot;en-US&quot;
	Dim home_git As String : home_git = &quot;https://raw.githubusercontent.com/jimholgate/readtextextension/master/Read_Text/po/&quot;
	&apos; `docker_url` might be assigned to another service. Please set a local server
	&apos; using the `READTEXT_ONLINE_LEXICON_URL` environment variable to get your
	&apos; locally hosted lexicon resources.
	Dim docker_url As String : docker_url = fsGetWebService(&quot;http://localhost:41604/po/&quot;)
	Dim _temp_json As String :  _temp_json = fsMyTempLock(&quot;rt-git-raw.json&quot;)
	If Len(raw_git) = 0 Then
		If Len(docker_url) &lt;&gt; 0 Then
			raw_git = docker_url
		Else
			raw_git = home_git
		End If
	End If
	With f_dlgJsonEdit:
	raw_git = InputBox(fsLookUpTerm(&quot;s_script&quot;) &amp; &quot; : &quot; &amp; fsLookUpTerm(&quot;s_use-a-web-application&quot;), .Title, raw_git)
	
	If Len(raw_git) = 0 Then
		fsGitRawJson = &quot;&quot;
		Exit Function
	End If
	Dim lang As String : lang = Split(lang_region, &quot;-&quot;)(0)
	Dim  fallback As String : fallback = Join(Array(_
	home_git, _fallback_info.json_dir, &quot;/&quot;, &quot;en-US&quot;, &quot;_lexicon.json&quot;), &quot;&quot;)
	On Error GoTo fsGitRawJsonErr
	Dim _searches As Variant : _searches = Array(lang_region, fsSelectionLanguage(True), &quot;en-US&quot;, &quot;en&quot;)
	Dim x As Integer
	Dim _search As String : _search = &quot;&quot;
	
	Dim _get As String : _get = &quot;&quot;
	For x = Lbound(_searches) To Ubound(_searches)
		_search = Join(_
		Array(raw_git, json_dir, &quot;/&quot;, _searches(x), &quot;_lexicon.json&quot;), &quot;&quot;)
		_get = fsGetWebService(_search)
		If Len(_get) &lt;&gt; 0 Then
			&apos; Update json and remove duplicate items
			CreateFile(_temp_json, _get, &quot;&quot;)
			fbUpdateLexiconFile(lang_region, json_dir, _temp_json)
			fsGitRawJson = getTextFromFile(_temp_json, &quot;&quot;, 0)
			fbRemoveFile(_temp_json)
			If Len(fsGitRawJson) = 0 Then
				fsGitRawJson = _get
			End If
			Exit Function
		End If
	Next
	End With
	fsGitRawJson = fsGetWebService(fallback)
Exit Function
	fsGitRawJsonErr:
	fsGitRawJson = &quot;&quot;
End Function


Function GetMimic3CommandList(ByVal sLang As String) As Variant
	GetMimic3CommandList = Array()
	Dim Opts As Variant : Opts = Array()
	Dim Item As String
	Dim Response As String
	Dim MimicLang As String
	If Len(sLang) = 0 Then
		sLang = fsSelectionLanguage()
	End If
	For Each Item in Array(&quot;_&quot;, &quot;-&quot;)
		sLang = Split(sLang &amp; Item, Item)(0)
	Next
	If Len(sLang) = 0 Then
		Exit Function
	End If
	For Each Item in GetMimic3OrMaryTTSArray(&quot; &quot;)
		MimicLang = Split(Item, &quot;_&quot;)(0)
		Select Case Instr(sLang, MimicLang)
			Case 1
			ReDim Preserve Opts(Ubound(Opts) + 1)
			Opts(Ubound(Opts)) = &quot;&quot;&quot;(NETWORK_READ_TEXT_PY)&quot;&quot; --language &quot;&quot;&quot; &amp; _
			&quot;(SELECTION_LANGUAGE_COUNTRY_CODE)&quot; &amp; &quot;&quot;&quot; --voice &quot;&quot;mimic3/&quot; &amp; Item &amp; &quot;&quot;&quot; &quot;
		End Select
	Next
	GetMimic3CommandList = Opts
	Exit Function
	GetMimic3CommandListErr:
	GetMimic3CommandList = Array()
End Function


Function GetMimic3OrMaryTTSArray(_divider As String) As Variant
	&apos; Retrieves available speech synthesis voices from a Mimic3 or MaryTTS server.
	&apos; It queries a local service running on `http://0.0.0.0:59125/voices` and 
	&apos; processes the response to extract voice model identifiers.
	&apos;
	&apos; The function:
	&apos; - Sends a web request to the speech synthesis server.
	&apos; - Checks if the server response contains expected delimiters.
	&apos; - Splits the voice list using the provided `_divider` (if valid).
	&apos; - Returns an array of available voices.
	&apos;
	&apos; Example server response format:
	&apos; en_UK/apope_low en_UK NA vits
	&apos; fr_FR/m-ailabs_low#ezwa fr_FR NA vits
	&apos; fr_FR/m-ailabs_low#nadine_eckert_boulet fr_FR NA vits
	&apos; fr_FR/m-ailabs_low#bernard fr_FR NA vits

	GetMimic3OrMaryTTSArray = Array()
	Dim Opts As Variant : Opts = Array()
	Dim Item As String
	Dim FoundItem As String
	Dim Chr10 As String : Chr10 = Chr(10)
	Dim WebGet As String : WebGet = fsGetWebService(&quot;http://0.0.0.0:59125/voices&quot;)

	Dim WebList As Variant : WebList = Split(WebGet, Chr10)
	For Each Item in Array(Chr10, &quot;_&quot;, &quot;-&quot;, &quot;/&quot;, &quot; &quot;)
		If Instr(WebGet, Item) = 0 Then
			Exit Function
		End If
	Next
	For Each Item In WebList
		If Len(Item) &lt;&gt; 0 Then
			ReDim Preserve Opts(Ubound(Opts) + 1)
			Select Case Len(_divider)
				Case 1
				Opts(Ubound(Opts)) = Split(Item, _divider)(0)
				Case Else
				Opts(Ubound(Opts)) = Item
			End Select
		End If
	Next
	GetMimic3OrMaryTTSArray = Opts
End Function


Function fbGotLangModelMimic3(ByVal sLang As String) As Boolean
	&apos; Return `True` if a model supporting the language `sLang` is available.
	fbGotLangModelMimic3 = False
	Dim Item As string : Item = &quot;&quot;
	If Len(sLang) = 0 Then
		sLang = fsSelectionLanguage()
	End If
	sLang = Split(Split(sLang, &quot;_&quot;)(0), &quot;-&quot;)(0)
	For Each Item in GetMimic3OrMaryTTSArray(&quot;_&quot;)
		If Item = sLang Then
			fbGotLangModelMimic3 = True
			Exit Function
		End If
	Next
End Function


Function fsGetWebService(_
		ByVal _uri As String) As String
	fsGetWebService = &quot;&quot;
	&apos; Get web text that shows MaryTTS or other online content
	&apos; =WEBSERVICE(&quot;http://0.0.0.0:59125/voices&quot;)
	&apos; Use with tested and trusted sources
	On Local Error GoTo fsGetWebServiceErr
	If _uri = &quot;&quot; Then Exit Function
	Dim fA : fA = CreateUNOService(&quot;com.sun.star.sheet.FunctionAccess&quot;)
	Dim s1 As String : s1 = &quot;WEBSERVICE&quot;
	Dim s2 As String : s2 = fA.callFunction(s1, Array(_uri))
	fsGetWebService = s2
	Exit Function
	fsGetWebServiceErr:
	fsGetWebService = &quot;&quot;
End Function


Function fbMimicOrMaryttsOk() As Boolean
	fbMimicOrMaryttsOk = fbGetWebServiceOK(&quot;http://0.0.0.0:59125/voices&quot;)
End Function


Function fbGetWebServiceOK(_URL As String) As Boolean
	&apos; AKA Ping; Use a trusted source that returns a result quickly.
	&apos; i. e.: Check if piper-tts server is on the local network:
	&apos; http://127.0.0.1:5000?text=0
	On Error GoTo fbGetWebServiceOKErr
	fbGetWebServiceOK = Len(fsGetWebService(_URL)) &lt;&gt; 0
	Exit Function
	fbGetWebServiceOKErr:
	fbGetWebServiceOK = False
End Function


Function SpeechHostInfoList() As Variant
	Select Case fsTheOsId()
		Case &quot;POSIX.APPIMAGE&quot;, &quot;POSIX.SNAP&quot;, &quot;POSIX.FLATPAK&quot;
		&apos; Python3 `requests` library is not available so MaryTTS
		&apos; has limited functionality. See `network_read_textfile.py`
		&apos;
		&apos; Several speech engines have limited or no support for
		&apos; phoneme code or can only speak using certain sounds.
		SpeechHostInfoList = Array(_
		PiperSpeechHostInfo(), _
		MimicSpeechHostInfo(), _
		OpenttsSpeechHostInfo(), _
		RhvoiceSpeechHostInfo(), _
		MaryTtsSpeechHostInfo(), _
		)
	Case &quot;WINDOWS.EXPERIMENTAL&quot;, &quot;POSIX.EXPERIMENTAL&quot;, &quot;MACOS.EXPERIMENTAL&quot;
		SpeechHostInfoList = Array(_
		PiperSpeechHostInfo(), _
		MimicSpeechHostInfo(), _
		)
	Case Else
		&apos; Prioritize recent tts frameworks
		SpeechHostInfoList = Array(_
		PiperSpeechHostInfo(), _
		MimicSpeechHostInfo(), _
		OpenttsSpeechHostInfo(), _
		MaryTtsSpeechHostInfo(), _
		RhvoiceSpeechHostInfo(), _
		)
	End Select
End Function


Sub ResetHostSpeechURI
	&apos; On Linux systems using localhost, users might set up their system
	&apos; to enable or disable speech servers without restarting Office, so
	&apos; check the status of the localhost uri every time.
	s_CaReadTextExtensionLocalHostSpeechURI = &quot;&quot;
End Sub


Function fbEnableLocalHostRate() As Boolean
	&apos; Some localhost speech servers support rate for all voices,
	&apos; so display rate options like `--rate 75%`.
	fbEnableLocalHostRate = False
	Dim _info As Variant : _info = Array(_
	MimicSpeechHostInfo(), _
	)	
	Dim x As Integer : x = 0
	On Error GoTo fbEnableLocalHostRateErr
	For x = Lbound(_info) to Ubound(_info)
		If Instr(_info(x).url, &quot;http&quot;) = 1 Then
			If fbLocalHostOk(_info(x).url &amp; _info(x).url_info, _info(x).key) Then
				fbEnableLocalHostRate = True
				Exit Function
			End If
		End If
	Next
	Exit Function
	fbEnableLocalHostRateErr:
	fbEnableLocalHostRate = False
End Function


Function fsLocalHostSpeech() As String
	&apos; Return the local host speech address
	&apos; i.e.: `http:&lt;localhost&gt;:&lt;port&gt;`
	On Error GoTo fsLocalHostSpeechErr
	fsLocalHostSpeech = &quot;&quot;
	Dim _info As Variant
	Dim x As Integer : x = 0
	Select Case Len(s_CaReadTextExtensionLocalHostSpeechURI)
		Case 0
		_info = SpeechHostInfoList()
		For x = Lbound(_info) To Ubound(_info)
			If Instr(_info(x).url, &quot;http&quot;) = 1 Then
				If fbLocalHostOk(_info(x).url &amp; _info(x).url_info, _info(x).key) Then
					fsLocalHostSpeech = _info(x).url
					s_CaReadTextExtensionLocalHostSpeechURI = fsLocalHostSpeech
					Exit For
				End If
			End If
		Next
		Case Else
		fsLocalHostSpeech = s_CaReadTextExtensionLocalHostSpeechURI
	End Select
	Exit Function
	fsLocalHostSpeechErr:
	fsLocalHostSpeech = &quot;&quot;
End Function


Function fsDefaultLexiconJson(_select_lang As String) As String
	fsDefaultLexiconJson = Join(Array(&quot;{&quot;,_
	&quot;    &quot;&quot;&quot; &amp; _select_lang &amp; &quot;_00001&quot;&quot;:{&quot;&quot;g&quot;&quot;:&quot;&quot;Read Text Extension&quot;&quot;,&quot;&quot;p&quot;&quot;:&quot;&quot;reed text extension&quot;&quot;},&quot;,_
	&quot;    &quot;&quot;&quot; &amp; _select_lang &amp; &quot;_00002&quot;&quot;:{&quot;&quot;g&quot;&quot;:&quot;&quot;Read text extension&quot;&quot;,&quot;&quot;p&quot;&quot;:&quot;&quot;reed text extension&quot;&quot;},&quot;,_
	&quot;    &quot;&quot;&quot; &amp; _select_lang &amp; &quot;_99998&quot;&quot;:{&quot;&quot;g&quot;&quot;:&quot;&quot;$[LOCALE]&quot;&quot;,&quot;&quot;p&quot;&quot;:&quot;&quot;&quot; &amp; _select_lang &amp; &quot;&quot;&quot;},&quot;,_
	&quot;    &quot;&quot;&quot; &amp; _select_lang &amp; &quot;_99999&quot;&quot;:{&quot;&quot;g&quot;&quot;:&quot;&quot;$[REVISION]&quot;&quot;,&quot;&quot;p&quot;&quot;:&quot;&quot;&quot; &amp; fsTimeStamp() &amp; &quot;&quot;&quot;}&quot;,_
	&quot;}&quot;), Chr(13))
End Function


Function EditJsonLexicon() As String
	&apos; Returns a file path if okay, otherwise `&quot;&quot;`.
	&apos; Dialog2 - lexicon editor .helpURL
	&apos; Dialog1 (f_dlgSpeechSetup) - We gather preliminary data about
	&apos; the tokens that the first dialog displays.
	&apos; This Json editor adds new grapheme / phoneme pairs to json file
	&apos; so individuals can edit the pronunciation of names and things that
	&apos; are important to them -like employees and students.
	&apos; Locally produced JSON indexes use specific formatting so that they
	&apos; are compatible with BASIC, so alterting it might cause it to stop
	&apos; working.
	EditJsonLexicon = &quot;&quot;
	Dim _lang As String : _lang = &quot;&quot;  &apos; en
	Dim _select_lang As String : _select_lang = &quot;&quot;  &apos; en-CA
	Dim _grapheme as String : _grapheme = &quot;&quot;
	Dim _phoneme as String : _phoneme = &quot;&quot;
	Dim _out_file As String : _out_file = &quot;&quot;
	Dim _in_file As String	: _in_file = &quot;&quot;
	Dim _test_str As String : _test_str = &quot;&quot;
	Dim x As Integer : x = 0
	Dim _json_display As String : _json_display = &quot;&quot;
	Dim _po_dir As String : _po_dir = &quot;&quot;
	Dim CR As String : CR = Chr(13)
	Dim is_unique As Boolean : is_unique = 0
	Dim _display_phoneme As String : _display_phoneme = &quot;&quot;
	Dim token_text As String: token_text = &quot;&quot;
	Dim _info As Variant
	
	With f_dlgSpeechSetup
		If .GetControl(&quot;ComboBox1&quot;).model.enabled Then
			token_text = .GetControl(&quot;ComboBox1&quot;).Model.Text &amp; CR
		Else
			token_text = .GetControl(&quot;ComboBox2&quot;).Model.Text &amp; CR
		End If
	End With
	Select Case fsTheOsId()
		Case &quot;MACOS&quot;, &quot;MACOS.EXPERIMENTAL&quot;
		_po_dir = MacOSSpeechAppInfo().json_dir
		Case &quot;WINDOWS&quot;, &quot;WINDOWS.NOSCRIPT&quot;, &quot;WINDOWS.EXPERIMENTAL&quot;
		_po_dir = WindowsSpeechAppInfo().json_dir
		Case Else
		_po_dir = &quot;default&quot;
	End Select

	If InStr(token_text, PosixSvoxPicoSpeechAppInfo().token) &lt;&gt; 0 Then
		_po_dir = PosixSvoxPicoSpeechAppInfo().json_dir
	ElseIf InStr(token_text, PosixFestivalSpeechAppInfo().token) &lt;&gt; 0 Then
		_po_dir = PosixFestivalSpeechAppInfo().json_dir
	ElseIf InStr(token_text, PosixRhvoiceSpeechAppInfo().token) &lt;&gt; 0 Then
		_po_dir = PosixRhvoiceSpeechAppInfo().json_dir
	ElseIf InStr(token_text, PosixPiperTtsSpeechAppInfo().token) &lt;&gt; 0 Then
		_po_dir = PosixPiperTtsSpeechAppInfo().json_dir
	Else
		_info = SpeechHostInfoList()
		For x = Lbound(_info) To Ubound(_info)
			If fbLocalHostOk(_info(x).url &amp; _info(x).url_info, _info(x).key) Then
				_po_dir = _info(x).json_dir
				Exit For
			End If
		Next
	End If
	x = 0
	Dim lang_array As Variant
	lang_array = fvGetIsoLangArray()
	For x = Lbound(lang_array) to Ubound(lang_array)
		If Len(lang_array(x)) &lt;&gt; 0 Then
			_select_lang = lang_array(x)
			Exit For
		End If
	Next
	_lang = fsDisplayLanguage()
	_out_file = fsFullPathOf(fsExtensionSetJson(&quot;lexicons/&quot; &amp; _po_dir, _select_lang))
	If FileExists(_out_file) Then
		_in_file = _out_file
	Else
		ReDim lang_array
		lang_array = Array(_
		_select_lang, Split(_select_lang, &quot;-&quot;)(0), Split(_select_lang, &quot;_&quot;)(0))
		For x = Lbound(lang_array) to Ubound(lang_array)
			_test_str = fsMyURL() &amp; _
			&quot;/po/&quot; &amp; _
			fsExtensionSetJson(_po_dir, lang_array(x))
			If FileExists(_test_str) Then
				_in_file = _test_str
				Exit For
			End If
		Next
	End If
	_grapheme = fsGetTheSelectedWord()
	_display_phoneme = &quot;&quot;
	If FileExists(_in_file) Then
		_json_display = getLimitedTextFromFile(_in_file)
		_display_phoneme = bespokeJsonExtraction(_json_display, _grapheme)
		If Len(_display_phoneme) = 0 Then
			_display_phoneme = Lcase(_grapheme)
		End If
	End If
	If Instr(_json_display, &quot;{&quot;) = 0 Or Instr(_json_display, &quot;}&quot;) = 0 Then
		_json_display = fsDefaultJson(_select_lang)
	End If
	fbTestDialogLoaded(&quot;textToSpeech&quot;)
	is_unique = Instr(_json_display, &quot;{&quot;&quot;g&quot;&quot;:&quot;&quot;&quot; &amp; _grapheme &amp; &quot;&quot;&quot;,&quot;&quot;&quot;) = 0
	If Instr(_json_display, CR) = 0 and Instr(_json_display, Chr(10)) &lt;&gt; 0 Then
		CR = Chr(10)
	End If
	f_dlgJsonEdit = CreateUnoDialog(DialogLibraries.textToSpeech.Dialog2)
	With f_dlgJsonEdit
		If fbHelpIsInstalled() Then
			&apos; Can&apos;t load &quot;/lexicons.xhp&quot;
			&apos; Can load &quot;/set_up.xhp&quot;
			&apos; Can&apos;t load &quot;/tokens.xhp&quot;
			f_dlgJsonEdit.model.HelpURL = fsAppSignature() &amp; &quot;/tokens.xhp&quot;
		Else
			f_dlgJsonEdit.model.HelpURL = &quot;&quot;
		End If
		.model.Title = fsLookUpTerm2(_
		&quot;s_read-text&quot;, _lang)  &amp; &quot; - &quot; &amp; _po_dir &amp; &quot; - &quot; &amp; fsLookUpTerm2(_
		&quot;s_speech-properties&quot;, _lang)
		.GetControl(&quot;_add&quot;).Model.enabled = True
		.GetControl(&quot;_cancel&quot;).model.Label = fsLookUpTerm2(&quot;s_cancel&quot;, _lang)
		.GetControl(&quot;_replace&quot;).model.Label = fsLookUpTerm2(_
		&quot;s_replace&quot;, _lang) &amp; &quot; (&quot; &amp;_po_dir &amp; &quot;)&quot;
		.GetControl(&quot;_open&quot;).model.Label = _(&quot;Open&quot;, &quot;tools&quot;, _lang)
		.GetControl(&quot;_save_as&quot;).model.Label = _(&quot;Save As&quot;, &quot;tools&quot;, _lang)
		.GetControl(&quot;_phoneme&quot;).model.helpText = &quot;&quot;&quot;p&quot;&quot;:&quot;
		If is_unique Then
			.GetControl(&quot;_add&quot;).model.Label = _(&quot;Apply&quot;, &quot;tools&quot;, _lang)
			.GetControl(&quot;_phoneme&quot;).model.Text = Lcase(_grapheme)
			.GetControl(&quot;_grapheme&quot;).model.readonly = False			
		Else
			.GetControl(&quot;_add&quot;).model.Label = _(&quot;Reset&quot;, &quot;tools&quot;, _lang)
			.GetControl(&quot;_phoneme&quot;).model.Text = _display_phoneme
			.GetControl(&quot;_phoneme&quot;).model.enabled = False
			.GetControl(&quot;_grapheme&quot;).model.readonly = True
		End If
		.GetControl(&quot;_grapheme&quot;).model.Text = _grapheme
		.GetControl(&quot;_grapheme&quot;).model.helpText = &quot;&quot;&quot;g&quot;&quot;:&quot;
		.GetControl(&quot;_json_text&quot;).model.Text = _json_display
		.GetControl(&quot;_json_text&quot;).model.helpText = ConvertFromUrl(_out_file)
		.GetControl(&quot;_edit_frame&quot;).model.Label = fsLookUpTerm2(_
		&quot;s_speech-synthesis&quot;, _lang)
		.GetControl(&quot;_test1&quot;).model.Label = fsLookUpTerm2(&quot;s_test&quot;, _lang)
		.GetControl(&quot;_test1&quot;).model.helpText = _select_lang
		.GetControl(&quot;_test2&quot;).model.Label = fsLookUpTerm2(&quot;s_test&quot;, _lang)
		.GetControl(&quot;_test2&quot;).model.helpText = _po_dir
		.GetControl(&quot;_test2&quot;).model.enabled = is_unique
		.GetControl(&quot;_code_frame&quot;).model.Label = fsLookUpTerm2(&quot;s_script&quot;, _lang)
		.GetControl(&quot;_find&quot;).model.Label = fsLookUpTerm2(&quot;s_find&quot;, _lang)
		If .Execute() &lt;&gt; 0 Then
			If Len(fsJsonSafe(_
			.GetControl(_
			&quot;_grapheme&quot;).model.Text)) = 0 Or Len(fsJsonSafe(_
			.GetControl(_
			&quot;_phoneme&quot;).model.Text)) = 0 Then
				Exit Function
			End If
			If is_unique Then
				_json_display = fsReplaceText(_json_display,_
				Join(_
				Array(_
				&quot;{&quot;,_
				&quot;    &quot;),_
				CR),_
				Join(_
				Array(_
				&quot;{&quot;,_
				&quot;    &quot;&quot;DT_&quot; &amp; fsFileTime(_
				) &amp; &quot;&quot;&quot;:{&quot;&quot;g&quot;&quot;:&quot;&quot;&quot; &amp; fsJsonSafe(_
				.GetControl(_
				&quot;_grapheme&quot;).model.Text) &amp; &quot;&quot;&quot;,&quot;&quot;p&quot;&quot;:&quot;&quot;&quot; &amp; fsJsonSafe(_
				.GetControl(_
				&quot;_phoneme&quot;).model.Text) &amp; &quot;&quot;&quot;},&quot;, &quot;    &quot;), CR))
			Else
				_json_display = bespokeJsonDeletion(_
				_json_display,_
				_grapheme)
			End If
			CreateFile(_out_file, _json_display, &quot;&quot;)
		End If
	End With
	If FileExists(_out_file) Then
		EditJsonLexicon = _out_file
	End If
End Function


Function bespokeJsonDeletion(_
	_json_display As String,_
	_grapheme As String)
	&apos; TODO: Connect to a python script. The Function currently depends on the
	&apos; specific formatting of the data, so verify the results before clicking.
	Dim CR As String : CR = Chr(13)
	If Instr(_json_display, CR) = 0 Then CR = Chr(10)
	bespokeJsonDeletion = &quot;&quot;
	Dim _list As Variant : _list = Split(_json_display, CR)
	Dim _col As Variant
	Dim x As Integer : x = 0
	If Instr(_json_display, &quot;99999&quot;&quot;:{&quot;&quot;g&quot;&quot;:&quot;&quot;$[REVISION]&quot;&quot;,&quot;&quot;p&quot;&quot;&quot;) = 0 Then
		bespokeJsonDeletion = _json_display
		Exit Function
	End If
	For x = LBound(_list) To Ubound(_list)
		If Instr(_list(x), &quot;:{&quot;&quot;g&quot;&quot;:&quot;&quot;&quot; &amp; _grapheme &amp; &quot;&quot;&quot;&quot;) = 0 Then
			bespokeJsonDeletion = bespokeJsonDeletion &amp; _list(x) &amp; CR
		End If
	Next
	bespokeJsonDeletion = Trim(bespokeJsonDeletion)
End Function


Function bespokeJsonExtraction(_
	_json_display As String, _
	_grapheme As String) As String

	Dim CR As String : CR = Chr(13)
	If InStr(_json_display, CR) = 0 Then CR = Chr(10)

	Dim _list As Variant : _list = Split(_json_display, CR)
	Dim _col As Variant, x As Integer

	For x = LBound(_list) To UBound(_list)
		If InStr(_list(x), &quot;:{&quot;&quot;g&quot;&quot;:&quot;&quot;&quot; &amp; _
			_grapheme &amp; &quot;&quot;&quot;&quot;) &lt;&gt; 0 Then
			_col = Split(_list(x), &quot;:&quot;)
			bespokeJsonExtraction = Mid( _
				fsReplaceText( _
				_col(UBound(_col)), &quot;&quot;&quot;},&quot;, &quot;&quot;), 2)
			Exit Function
		End If
	Next
	bespokeJsonExtraction = &quot;&quot;
End Function


Function fsJsonSafe(_text As String) As String
	&apos; Replace json code characters to safe versions
	fsJsonSafe = &quot;&quot;
	If Len(_text) = 0 Then
		Exit Function
	End If
	Dim Item As Variant
	For Each Item in Array(_
	Array(&quot;\&quot;, &quot;\u005C&quot;),_
	Array(&quot;&quot;&quot;&quot;, &quot;\&quot;&quot;&quot;),_
	Array(&quot;{&quot;, &quot;\u007B&quot;),_
	Array(&quot;}&quot;, &quot;\u0070&quot;),_
	Array(&quot;@&quot;, &quot;\u0040&quot;)_
	)
		_text = fsReplaceText(_text, Item(0), Item(1))
	Next
	fsJsonSafe = _text
End Function


Sub SpeakGraphemeJson()
	With f_dlgJsonEdit
		MsgSpeak(.GetControl(&quot;_grapheme&quot;).model.Text)
	End With
End Sub


Sub SpeakPhonemeJson()
	With f_dlgJsonEdit
		MsgSpeak(.GetControl(&quot;_phoneme&quot;).model.Text)
	End With
End Sub


Sub ResetPhonemesGit()
	&apos; Dialog2 Phoneme Editor Update local lexicon
	&apos; The online repository of json lexicon tables defaults
	&apos; to github.com. You can set it to a customized URL by setting
	&apos; the `READTEXT_ONLINE_LEXICON_URL` environment variable
	&apos; to specify a local url or a fork of the project on github.com.
	&apos; This means that you can control shared data that includes
	&apos; how to pronounce client names or local places and acronyms.
	&apos;
	&apos; Back up your home settings on your local Android phone or
	&apos; device using Wifi File Explorer PRO as a http file server.
	Dim json_dir As String : json_dir  = &quot;&quot;
	Dim lang_region As String : lang_region = &quot;&quot;
	Dim raw_git As String : raw_git = &quot;&quot;
	Dim environ_path As String : environ_path = &quot;&quot;
	On Error Resume Next
	environ_path = Environ(&quot;READTEXT_ONLINE_LEXICON_URL&quot;)
	If Len(environ_path) &lt;&gt; 0 Then
		raw_git = environ_path
	End If
	Dim json_data As String : json_data = &quot;&quot;
	With f_dlgJsonEdit
 		json_dir = .GetControl(&quot;_test2&quot;).model.helpText
 		lang_region = .GetControl(&quot;_test1&quot;).model.helpText 		
 		json_data = fsGitRawJson(json_dir, lang_region, raw_git)
 		If Len (json_data) = 0 Then
 			json_data = fsDefaultLexiconJson(lang_region)
 		End If
 		.GetControl(&quot;_json_text&quot;).model.Text = json_data
 		.Execute
	End With
End Sub


Sub ConfigureReadTextAloud()
	Dim sFile As String : sFile = &quot;&quot;
	Dim msgs() As Variant
	Dim errorCode As Integer : errorCode = 0
	Dim bHideExports As Boolean : bHideExports = False
	Dim _integer As Integer : _integer = 0
	
	&apos; Open up the dialog
	CheckUnixSpeech()
	ClearWorkingCountryLanguage()
	fbTestDialogLoaded(&quot;textToSpeech&quot;)
	f_dlgSpeechSetup = CreateUnoDialog(DialogLibraries.textToSpeech.Dialog1)
	Select Case fsTheOsId()
		Case &quot;MACOS&quot;
		&apos; New versions of MacOS restrict third party apps from writing
		&apos; media files, so the extension hides export options in the main
		&apos; dialogue.  High Sierra and newer versions of MscOS do not
		&apos; include a built-in telnet command.
		If Not( _
			FileExists( _
			&quot;/usr/bin/telnet&quot;)) Then
			Select Case fsGetMyTunesApp()
				Case &quot;Music&quot;
				&apos; MacOS 11
				bHideExports = False
				Case &quot;iTunes&quot;
				bHideExports = False
				Case Else
				bHideExports = True
			End Select
		End If
		Case &quot;POSIX.APPIMAGE&quot;
			bHideExports = True
	End Select
	b_CaReadTextExtensionHideExports = bHideExports
	With f_dlgSpeechSetup
		If fbHelpIsInstalled() Then
			.model.HelpURL = fsAppSignature() &amp; &quot;/set_up.xhp&quot;
		Else
			.model.HelpURL = &quot;&quot;
		End If
		&apos;Load default settings, so any settings undefined by settings file are not empty
		Config() = fvTts_config_createDefaultConfig(msgs(), errorCode)
		&apos;Load the settings you used last time
		sFile = fsExtensionSettingsIni()
		If FileExists(sFile) Then
			tts_config_parseFile(sFile, Config(), errorCode)
		Else
			&apos; The &quot;About&quot; dialog needs this file to show current information
			tts_config_writeFile(Config(), sfile)
		End If
		If Len(Config(pi_display_language_string)) = 0 Then
			Config(pi_display_language_string) = fsGetLanguage()
		End If
		&apos;Now apply the settings to the dialog box
		.GetControl(&quot;CheckBox1&quot;).Model.State = Config(pi_display_info_integer)
		If fbEnhancedRTVersion And fbClipBoardAvailable() Then
			.GetControl(&quot;CheckBox2&quot;).Model.State = Config(pi_use_smart_select_integer)
		Else
			.GetControl(&quot;CheckBox2&quot;).Model.State = 0
			.GetControl(&quot;CheckBox2&quot;).Visible = False
		End If
		ttsUpdateCombo2F()
		&apos;Update the labels with your language
		.GetControl(&quot;ComboBox1&quot;).Model.Text = Config(pi_experimental_options_string)
		.GetControl(&quot;ComboBox2&quot;).Model.Text = Config(pi_external_options_string)
		.GetControl(&quot;ComboBox3&quot;).Model.Text = Config(pi_display_language_string)
		.GetControl(&quot;ComboBox4&quot;).Model.Text = Config(pi_html_string)
		.GetControl(&quot;FileControl1&quot;).Model.Text = Config(pi_experimental_path_string)
		.GetControl(&quot;FileControl2&quot;).Model.Text = Config(pi_external_path_string)
		If fbExperimentalMode() Then
			.GetControl(&quot;OptionButton1&quot;).Model.State = Config(pi_use_experimental_boolean)
			.GetControl(&quot;OptionButton2&quot;).Model.State = Config(pi_use_external_boolean)
			.GetControl(&quot;OptionButton3&quot;).Model.State = Config(pi_use_html_boolean)
		Else
			If Config(pi_use_experimental_boolean) Then
				.GetControl(&quot;OptionButton1&quot;).Model.State = 0
				Config(pi_use_experimental_boolean) = 0
				.GetControl(&quot;OptionButton2&quot;).Model.State = 1
				Config(pi_use_external_boolean) = 1
			End If
			.GetControl(&quot;OptionButton3&quot;).Model.State = Config(pi_use_html_boolean)
		End If
		ttsInitiateHomeLangLabels()
		ttsUpdateLabels()
		ttsUpdateCombo1()
		FillComboBox4UrlList(f_dlgSpeechSetup)
		&apos;Default choices are for custom scripts or apps - Win, Mac, Linux, Unix etc.
		
		ttsUpdateDisplay()
		&apos; Stop Linux or MacOS speech daemon from continuing to speak
		&apos; or delete the Windows temporary lock file so speech ends.
		&apos; The speech only stops if you use the one of the scripts shown
		&apos; by default in the extension dialogue.
		If FileExists(sFile) Or FileExists(fsMyTempLock(&quot;lock&quot;)) Then
			If .GetControl(&quot;OptionButton2&quot;).Model.State Then
				resetSpeechDispatcher(True)
			ElseIf .GetControl(&quot;OptionButton1&quot;).Model.State Then
				If FileExists(&quot;/usr/bin/killall&quot;) Or FileExists(&quot;/usr/local/bin/killall&quot;) Then
					If FileExists(&quot;/usr/bin/festival&quot;) Then
						Shell(&quot;killall&quot;, 0, &quot;festival&quot;, True)
					ElseIf FileExists(&quot;/usr/bin/flite&quot;) Then
						Shell(&quot;killall&quot;, 0, &quot;flite&quot;, True)
					End If
				End If
				On Error Resume Next
				fbRemoveFile(fsMyTempLock(&quot;lock&quot;))
			End If
		End If
		If .Execute() &lt;&gt; 0 Then
			&apos;Replace the old settings file
			Config() = fvCurrentDialogConfig()
			.Dispose()
			On Error Resume Next
			fbRemoveFile(sFile)
			Config(pi_display_info_integer) = GetControl(&quot;CheckBox1&quot;).Model.State
			tts_config_writeFile(Config(), sfile)
			&apos;Call the shell to execute the program specified with the commands specified
			ttsActuate(Config(), _
			msgs(), _
			errorCode, _
			&quot;&quot;)
		End If
	End With
End Sub


Sub ttsUpdateCombo1()
	With f_dlgSpeechSetup
	If InStr(LCase(.GetControl(&quot;FileControl1&quot;).Model.Text), &quot;festival&quot;) &lt;&gt; 0 Then
		dialog1Combo1ShowFestivalScripts(f_dlgSpeechSetup)
	Else
		updateDialog1FileControlComboBox(False, &quot;FileControl1&quot;, &quot;ComboBox1&quot;)
	End If
	End With
End Sub


Sub ttsUpdateCombo2()
	updateDialog1FileControlComboBox(True, &quot;FileControl2&quot;, &quot;ComboBox2&quot;)
End Sub


Sub ttsUpdateCombo2F()
	updateDialog1FileControlComboBox(False, &quot;FileControl2&quot;, &quot;ComboBox2&quot;)
End Sub


Sub updateDialog1FileControlComboBox( _
	bRefreshText, FileControl, ComboBox)
	Dim _bin_python As String : _bin_python = &quot;program/python&quot;
	Dim ClientId As String : ClientId = &quot; --client_id &quot;&quot;(SESSION_ID)&quot;&quot;&quot;
	Dim _spd_update As String : _spd_update$ = &quot;&quot;
	Dim sTheOsId As String : sTheOsId = fsTheOsId()
	Select Case sTheOsId
		Case &quot;MACOS&quot;, &quot;WINDOWS&quot;, &quot;WINDOWS.WINE&quot;, &quot;WINDOWS.NOSCRIPT&quot;
		ClientId = &quot;&quot;
		Case &quot;POSIX.APPIMAGE&quot;
		_bin_python = fsAppImageResourcePath(&quot;python&quot;)
		_spd_update = &quot; --update_local False&quot;
		Case Else
		_bin_python = &quot;/bin/python&quot;
	End Select
    With f_dlgSpeechSetup
		If InStr(LCase(.GetControl(FileControl).Model.Text), _
			&quot;\wscript.exe&quot;) &lt;&gt; 0 Then
			dialog1Combo2ShowSAPIChoices(f_dlgSpeechSetup)
		&apos; Typical for Mac
		ElseIf InStr(LCase(.GetControl(FileControl).Model.Text),&quot;bin/say&quot;) &lt;&gt; 0 Then
			dialog1Combo2ShowSAYChoices(f_dlgSpeechSetup)
		ElseIf InStr(LCase(.GetControl(FileControl).Model.Text),&quot;bin/osascript&quot;) &lt;&gt; 0 Then
			dialog1Combo2ShowAppleScriptChoices(f_dlgSpeechSetup)
			&apos; Typical for Linux
		ElseIf InStr(LCase(.GetControl(FileControl).Model.Text), &quot;speak-ng&quot;) &lt;&gt; 0 Then
			dialog1Combo2ShowESPEAKChoices(f_dlgSpeechSetup)
		ElseIf InStr(LCase(.GetControl(FileControl).Model.Text), &quot;espeak-ng&quot;) &lt;&gt; 0 Then
			dialog1Combo2ShowESPEAKChoices(f_dlgSpeechSetup)
		ElseIf InStr(LCase(.GetControl(FileControl).Model.Text), &quot;espeak&quot;) &lt;&gt; 0 Then
			dialog1Combo2ShowESPEAKChoices(f_dlgSpeechSetup)
		ElseIf InStr(LCase(.GetControl(FileControl).Model.Text), &quot;festival&quot;) &lt;&gt; 0 Then
			dialog1Combo2ShowFESTIVALChoices(f_dlgSpeechSetup)
			&apos;Festival text2wav
		ElseIf InStr(LCase(.GetControl(FileControl).Model.Text), &quot;text2wave&quot;) &lt;&gt; 0 Then
			dialog1Combo2ShowTEXT2WAVEChoices(f_dlgSpeechSetup)
		ElseIf InStr(LCase(.GetControl(FileControl).Model.Text), _bin_python) &lt;&gt; 0 Then
			If sTheOsId = &quot;MACOS&quot; And fbIsLibreOffice() Then
				&apos; Must use LibreOffice python			
				.GetControl(FileControl).Model.Text = PosixPythonPath()
			End If
			fiDialog1CombosShowMyPythonChoices(f_dlgSpeechSetup, ComboBox, FileControl)
		ElseIf InStr(LCase(.GetControl(FileControl).Model.Text),&quot;python.exe&quot;) &lt;&gt; 0 Then
			fiDialog1CombosShowMyPythonChoices(f_dlgSpeechSetup, ComboBox, FileControl)
		ElseIf InStr(LCase(.GetControl(FileControl).Model.Text),&quot;/bin/open&quot;) &lt;&gt; 0 And _
			sTheOsId = &quot;MACOS&quot; Then
			&apos;The system chooses an application to open the file or URL (See man: gnome-open and xdg-open)
			&apos;There are some examples at https://ss64.com/MacOS/open.html and
			&apos;https://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man1/open.1.html
			dialog1Combo2ShowMEDIAChoices(f_dlgSpeechSetup)
			&apos; You entered a media player
		ElseIf fbIsAMediaPlayer(LCase(.GetControl(FileControl).Model.Text)) Then
			dialog1Combo2ShowMEDIAChoices(f_dlgSpeechSetup)
		Else
			
		End If
		If bRefreshText And FileExists(.GetControl(FileControl).Model.Text) Then
			If sTheOsId = &quot;MACOS&quot; And _
			fbIsLibreOffice() And _
			.GetControl(FileControl).Model.Text = PosixPythonPath() Then
				If fbHaveNetworkTTS() Then
					.GetControl(ComboBox).Model.Text = &quot;&quot;&quot;(SPD_READ_TEXT_PY)&quot;&quot;&quot; &amp; _
					&quot; --language &quot;&quot;(SELECTION_LANGUAGE_COUNTRY_CODE)&quot;&quot; --voice &quot;&quot;AUTO&quot;&quot;&quot; &amp; _
					ClientId &amp; _
					&quot; &quot;&quot;(TMP)&quot;&quot;&quot;
				Else
					.GetControl(ComboBox).Model.Text = &quot;&quot;&quot;(SPD_READ_TEXT_PY)&quot;&quot;&quot; &amp; _
					&quot; --language &quot;&quot;(SELECTION_LANGUAGE_COUNTRY_CODE)&quot;&quot;&quot; &amp; _
					ClientId &amp; _
					&quot; &quot;&quot;(TMP)&quot;&quot;&quot;	
				End If
			ElseIf sTheOsId = &quot;POSIX.APPIMAGE&quot; Then
					.GetControl(ComboBox).Model.Text = &quot;&quot;&quot;(SPD_READ_TEXT_PY)&quot;&quot;&quot; &amp; _
					_spd_update &amp; &quot; --language &quot;&quot;(SELECTION_LANGUAGE_COUNTRY_CODE)&quot;&quot;&quot; &amp; _
					ClientId &amp; _
					&quot; &quot;&quot;(TMP)&quot;&quot;&quot;				
			Else:
				.GetControl( _
				ComboBox).Model.Text = .GetControl( _
				ComboBox).GetItem(0)
			End If
		End If
    End With
End Sub

Sub ttsInitiateHomeLangLabels()
	ttsUpdateLabels2(fsLang())
End Sub


Sub ttsUpdateLabels()
	On Error GoTo ttsUpdateLabelsErr
	Dim TestLang As String : TestLang = ttsUpdateLabels2(Config(pi_display_language_string))
	If Len(TestLang) = 0 Then
		ttsUpdateLabels2(fsLang())
	End If
	Exit Sub
	ttsUpdateLabelsErr:
		ttsUpdateLabels2(fsLang())
	Exit Sub
End Sub


Function ttsUpdateLabels2(Lang)
	ttsUpdateLabels2 = &quot;&quot;
	Dim s1 As String : s1 = Trim(Cstr(Lang))
	UpdatePoSettingsDone =  - 1
	On Local Error GoTo ttsUpdateLabels2Err
	&apos;Update the labels with your language from .GetControl(&quot;ComboBox3&quot;).model.Text

	With f_dlgSpeechSetup
		.GetControl(&quot;CheckBox1&quot;).model.Label = fsLookUpTerm2(&quot;s_always-show-this-dialog&quot;, s1)
		.GetControl(&quot;CheckBox2&quot;).model.Label = fsLookUpTerm2(&quot;s_touch-screen&quot;, s1)
		.GetControl(&quot;CommandButton1&quot;).model.Label = fsLookUpTerm2(&quot;s_ok&quot;, s1)
		.GetControl(&quot;CommandButton2&quot;).model.Label = fsLookUpTerm2(&quot;s_cancel&quot;, s1)
		.GetControl(&quot;CommandButton3&quot;).model.Label = fsLookUpTerm2(&quot;s_about&quot;, s1) &amp; &quot;...&quot;
		.GetControl(&quot;FrameControl1&quot;).model.Label = fsLookUpTerm2(&quot;s_external-program&quot;, s1)
		.GetControl(&quot;FrameControl2&quot;).model.Label = fsLookUpTerm2(&quot;s_display&quot;, s1)
		If fbPiperTtsOk(&quot;&quot;) or fsTheOsId() = &quot;MACOS&quot; Then
			.GetControl(&quot;Label1&quot;).model.Label = fsLookUpTerm2(&quot;s_command-line-options&quot;, s1)
			.GetControl(&quot;OptionButton1&quot;).model.Label = fsLookUpTerm2(&quot;s_enable-experimental-features&quot;, s1)
		ElseIf InStr(LCase(.GetControl(&quot;FileControl1&quot;).Model.Text),&quot;festival&quot;) &lt;&gt; 0 Then
			&apos; or Instr(.GetControl(&quot;ComboBox1&quot;).Model.Text, &quot;&quot;&quot;(TMP)&quot;&quot; nil)(quit)&quot;) Then
			.GetControl(&quot;Label1&quot;).model.Label = fsLookUpTerm2(&quot;s_command&quot;, s1)
			.GetControl(&quot;OptionButton1&quot;).model.Label = fsLookUpTerm2(&quot;s_use-festival-with-a-script&quot;, s1)
		Else
			.GetControl(&quot;Label1&quot;).model.Label = fsLookUpTerm2(&quot;s_command-line-options&quot;, s1)
			.GetControl(&quot;OptionButton1&quot;).model.Label = fsLookUpTerm2(&quot;s_enable-experimental-features&quot;, s1)
		End If
		.GetControl(&quot;Label2&quot;).model.Label = fsLookUpTerm2(&quot;s_command-line-options&quot;, s1)

		.GetControl(&quot;OptionButton2&quot;).model.Label = fsLookUpTerm2(&quot;s_external-program&quot;, s1)
		.GetControl(&quot;OptionButton3&quot;).model.Label = fsLookUpTerm2(&quot;s_use-a-web-application&quot;, s1)
		.GetControl(&quot;ComboBox3&quot;).model.HelpText = fsLookUpTerm2(.GetControl(&quot;ComboBox3&quot;).model.Text, s1)
		.model.Title = fsLookUpTerm2(&quot;s_read-text&quot;, s1)
	End With

	ttsUpdateLabels2 = s1
	Exit Function
	ttsUpdateLabels2Err:
	ttsUpdateLabels2 = &quot;&quot;
End Function


Function fbUsingFestival(_test_text As String) As Boolean
	fbUsingFestival = FileExists(_test_text) And Instr(LCase(_
	_test_text), &quot;festival&quot;) &lt;&gt; 0
End Function


Sub ttsUpdateDisplay()
	&apos; These dialog items toggle between enabled And disabled depending On option button selected
	With f_dlgSpeechSetup
		Dim i As Integer : i = Len(.GetControl(&quot;FileControl1&quot;).Model.Text)
		Dim _test_text As String : _test_text = .GetControl(&quot;FileControl1&quot;).Model.Text
		
		If Len(fsMyURL()) = 0 Then
			.GetControl(&quot;OptionButton1&quot;).model.enabled = False
			.GetControl(&quot;OptionButton2&quot;).model.enabled = False
		ElseIf fbExperimentalMode() Then
			.GetControl(&quot;OptionButton1&quot;).model.enabled = True	
		ElseIf i = 0 Then
			&apos; No text in file control box
			.GetControl(&quot;OptionButton1&quot;).model.enabled = False
		Else
			If fbUsingFestival(_test_text) Then
				&apos; Festival is installed
				.GetControl(&quot;OptionButton1&quot;).model.enabled = True
			Else
				&apos; Cannot find festival
				.GetControl(&quot;OptionButton1&quot;).model.enabled = False
			End If
		End If
		.GetControl(&quot;ComboBox1&quot;).model.enabled = .GetControl(&quot;OptionButton1&quot;).Model.State
		.GetControl(&quot;FileControl1&quot;).model.enabled = .GetControl(&quot;OptionButton1&quot;).Model.State
		.GetControl(&quot;Label1&quot;).model.enabled = .GetControl(&quot;OptionButton1&quot;).Model.State
		.GetControl(&quot;ComboBox2&quot;).model.enabled = .GetControl(&quot;OptionButton2&quot;).Model.State
		.GetControl(&quot;ComboBox4&quot;).model.enabled = .GetControl(&quot;OptionButton3&quot;).Model.State
		.GetControl(&quot;FileControl2&quot;).model.enabled = .GetControl(&quot;OptionButton2&quot;).Model.State
		.GetControl(&quot;Label2&quot;).model.enabled = .GetControl(&quot;OptionButton2&quot;).Model.State
	End With
End Sub


Function fvCurrentDialogConfig() As Variant
	With f_dlgSpeechSetup
		On Error Resume Next
		Dim file_control_2 As String : file_control_2 = .GetControl(&quot;FileControl2&quot;).Model.Text
		If fsTheOsId() = &quot;MACOS&quot; and fbIsLibreOffice() And _
		Instr(file_control_2, &quot;/usr/python&quot;) &lt;&gt; 0 Then
			file_control_2 = PosixPythonPath()
		End If
		If fsTheOsId() = &quot;POSIX.APPIMAGE&quot; And _
		Instr(file_control_2, &quot;/usr/python&quot;) &lt;&gt; 0 Then
			file_control_2 = ConvertFromUrl(BundlePyPath())
		End If
		Config(pi_display_info_integer) = .GetControl(&quot;CheckBox1&quot;).model.State
		Config(pi_use_smart_select_integer) = .GetControl(&quot;CheckBox2&quot;).model.State
		Config(pi_display_language_string) = .GetControl(&quot;ComboBox3&quot;).model.Text
		Config(pi_external_options_string) = .GetControl(&quot;ComboBox2&quot;).model.Text
		Config(pi_use_external_boolean) = .GetControl(&quot;OptionButton2&quot;).Model.State
		Config(pi_external_path_string) = file_control_2
		Config(pi_experimental_options_string) = .GetControl(&quot;ComboBox1&quot;).model.Text
		Config(pi_use_experimental_boolean) = .GetControl(&quot;OptionButton1&quot;).Model.State
		Config(pi_experimental_path_string) = .GetControl(&quot;FileControl1&quot;).Model.Text
		Config(pi_html_string) = .GetControl(&quot;ComboBox4&quot;).model.Text
		Config(pi_use_html_boolean) = .GetControl(&quot;OptionButton3&quot;).Model.State
	End With
	fvCurrentDialogConfig() = Config()
End Function


Sub aboutReadTextDialog()
	AboutAddOn(&quot;&quot;)
End Sub


Function fbCheckFestivalDialog1(Config As Variant) As Boolean
	fbCheckFestivalDialog1 = False
	On Local Error GoTo fbCheckFestivalDialog1Err	
	If Config(pi_use_experimental_boolean) And Instr(LCase(Config(pi_experimental_path_string)), &quot;festival&quot;) &lt;&gt; 0 Then
		fbCheckFestivalDialog1 = True
	End If
	Exit Function
	fbCheckFestivalDialog1Err:
	fbCheckFestivalDialog1 = False
End Function


Sub AboutAddOn( _
	myText As String)
	&apos; Dialog3
	Dim f_dlgAboutReadSelection As Variant
	Dim sFile As String : sFile = &quot;&quot;
	Dim sA As String : sA = &quot;&quot;
	Dim sC As String : sC = &quot;&quot;
	Dim sE As String : sE = &quot;&quot;
	Dim file_spec As String : file_spec = &quot;&quot;
	Dim title_special As String : title_special = &quot;&quot;
	Dim msgs() As Variant
	Dim errorCode As Integer
	Dim s1$ : s1 = fsDisplayLanguage()
	Dim s2 : s2 = fsHomeDrive()
	Dim s3$: s3 = fsFullPathOf(&quot;ReadClipBoard.lock&quot;)
	Dim s4$ : s4 = &quot;&quot;
	Dim TextField As String : TextField = &quot;_text_field&quot;
	If fbExperimentalMode() Then
		title_special = &quot; - &quot; &amp; fsLookUpTerm2(&quot;s_enable-experimental-features&quot;, s1)
	End If	
	&apos; Open up the dialog
	fbTestDialogLoaded(&quot;textToSpeech&quot;)
	f_dlgAboutReadSelection = CreateUnoDialog(DialogLibraries.textToSpeech.Dialog3)
	With f_dlgAboutReadSelection
		&apos;Update the labels And button with your language
		.model.Title = fsLookUpTerm2(&quot;s_about&quot;, s1) &amp; _
		&quot; &quot; &amp; fsLookUpTerm2(&quot;s_read-text&quot;, s1) &amp; _
		&quot; &quot; &amp; fsExtensionVersion() &amp; title_special
		If fbHelpIsInstalled() Then
			.model.HelpURL = fsAppSignature() &amp; &quot;/tokens.xhp&quot;
		Else
			.model.HelpURL = &quot;&quot;
		End If
		.GetControl(&quot;TextField1&quot;).model.Text = fsAbout()
		.GetControl(&quot;CommandButton1&quot;).model.Label = fsLookUpTerm2(&quot;s_ok&quot;, s1)
		.GetControl(&quot;CommandButton2&quot;).model.helpText = fsLookUpTerm2(&quot;s_http-help-url&quot;, s1)
		.GetControl(&quot;CommandButton2&quot;).model.Label = fsLookUpTerm2(&quot;s_on-line-help&quot;, s1) &amp; &quot;...&quot;
		.GetControl(&quot;FrameControl1&quot;).model.Label = fsLookUpTerm2(&quot;s_about&quot;, s1)
		.GetControl(&quot;FrameControl2&quot;).model.Label = fsLookUpTerm2(&quot;s_script&quot;, s1)
		.GetControl(&quot;FrameControl3&quot;).model.Label = fsLookUpTerm2(&quot;s_command&quot;, s1)
		.GetControl(&quot;ImageControl1&quot;).model.helpText = .model.Title
		.GetControl(&quot;ImageControl1&quot;).model.ImageURL = fsExtensionLogo()
		.GetControl(&quot;ImageControl2&quot;).model.Enabled = Instr(fsTheOsId(), &quot;.WINE&quot;) = 0
		.GetControl(&quot;ImageControl2&quot;).model.helpText = fsLookUpTerm2(&quot;s_test&quot;, s1)
		.GetControl(&quot;ImageControl2&quot;).model.ImageURL = fsSpeakerLogo()
		.GetControl(&quot;ImageControl3&quot;).model.helpText = Left(fsGetTextSelection(False, False),99)
		.GetControl(&quot;ImageControl3&quot;).model.ImageURL = fsSelectionLogo()
		If fbIsWin64Program(&quot;&quot;) Then
			&apos; 2022 - If the clipboard is empty, then the program
			&apos; might crash in Windows.
			.GetControl(&quot;ImageControl4&quot;).model.ImageURL = fsClipBoardLogo()
			.GetControl(&quot;ImageControl4&quot;).model.Enabled = fbExperimentalMode()
			.GetControl(&quot;Label2&quot;).model.Enabled = fbExperimentalMode()
		Else
			CreateFile(s3, fsGetSetting(&quot;oosetupversion&quot;), &quot;&quot;)  &apos; lock clipboard
			fsGetClipBoard(False)
			&apos; To avoid a crash, the testing version of office
			&apos; needs a dummy run of function before evaluating
			&apos; the results.
			&apos; if it crashes, then we are left with a lock file.
			fbRemoveFile(s3)  &apos; unlock clipboard
			If fbExperimentalMode() Then
				s4 = fsSelectionLanguageAndRegion()
			Else:
				s4 = fsGetClipBoard(False)
			End If
			.GetControl(&quot;ImageControl4&quot;).model.helpText = Left( _
			s4, 99)
			.GetControl(&quot;Label2&quot;).model.helpText = Left( _
			s4, 99)
			.GetControl(&quot;ImageControl4&quot;).model.ImageURL = fsClipBoardLogo()
			.GetControl(&quot;Label2&quot;).model.Label = Len(s4)
		End If
		If fbExperimentalMode() Then
			.GetControl(&quot;ImageControl5&quot;).model.helpText = fsSelectionLanguageAndRegion(False) &amp; _
			&quot;_lexicon.json&quot;
		Else
			If Len(WinSpeechProgramPath()) &lt;&gt; 0 Then
				.GetControl(&quot;ImageControl5&quot;).model.helpText = fsLookUpTerm2( _
				&quot;s_speech-properties&quot;, s1)
			Else
				.GetControl(&quot;ImageControl5&quot;).model.helpText = fsLookUpTerm2( _
				&quot;s_system-settings&quot;, s1)
			End If
		End If
		.GetControl(&quot;ImageControl5&quot;).model.ImageURL = fsToolBoxLogo()
		.GetControl(&quot;Label1&quot;).model.helpText = Left(fsGetTextSelection(False, False),99)
		.GetControl(&quot;Label1&quot;).model.Label = Len(fsGetTextSelection(False, False))
		&apos;Change the text in the information text boxes&apos;
		
		If fbCheckFestivalDialog1(Config) Then
			.GetControl(&quot;TextField3&quot;).model.Text = Config(pi_experimental_path_string) &amp; &quot; &quot; &amp; _
			&quot;&quot;&quot;&quot; &amp; ConvertFromUrl(fsFestivalScriptName()) &amp; &quot;&quot;&quot;&quot;
			sA = replaceLocalTokensWithStr(Config(pi_experimental_options_string))
			sA = replacePublicTokensWithStr(sA)
			.GetControl(&quot;TextField2&quot;).model.Text = sA
		ElseIf Config(pi_use_external_boolean) or Config(pi_use_experimental_boolean) Then
			If Config(pi_use_external_boolean) Then
				sA = Config(pi_external_options_string)
				sE = Config(pi_external_path_string)
			Else &apos; Config(pi_use_experimental_boolean)
				sA = Config(pi_experimental_options_string)
				sE = Config(pi_experimental_path_string)
			End If
			sC = Trim(sA)  &apos; If not byVal in Function arguements, ensure sA is untouched
			.GetControl(&quot;TextField3&quot;).model.helpText = sC
			sC = replaceLocalTokensWithStr(sC)
			sC = replacePublicTokensWithStr(sC)
			.GetControl(&quot;TextField3&quot;).model.Text = &quot;&quot;&quot;&quot; &amp; sE &amp; &quot;&quot;&quot; &quot; &amp; sC
			If Len(myText) &lt;&gt; 0 Then
				TextField = myText
			ElseIf InStr(sA, &quot;(TTS_WSCRIPT_VBS)&quot;) &lt;&gt; 0 Then
				TextField = fsVBSTextString()
			ElseIf InStr(sA, &quot;(SPD_READ_TEXT_PY)&quot;) &lt;&gt; 0 Then
				file_spec = fsPythonSpdDoc()
				TextField = getLimitedTextFromFile(file_spec)
			ElseIf InStr(sA, &quot;(ESPEAK_READ_TEXT_PY)&quot;) &lt;&gt; 0 Then
				file_spec = fsPythonEspeakDoc()
				TextField = getLimitedTextFromFile(file_spec)
			ElseIf InStr(sA, &quot;(FESTIVAL_READ_TEXT_PY)&quot;) &lt;&gt; 0 Then
				file_spec = fsPythonFestivalDoc()
				TextField = getLimitedTextFromFile(file_spec)
			ElseIf InStr(sA, &quot;(NETWORK_READ_TEXT_PY)&quot;) &lt;&gt; 0 Then
				file_spec = fsNetworkTtsDoc()
				TextField = getLimitedTextFromFile(file_spec)
			ElseIf InStr(sA, &quot;(OPENJTALK_READ_TEXT_PY)&quot;) &lt;&gt; 0 Then
				file_spec = fsPythonOpenJTalkDoc()
				TextField = getLimitedTextFromFile(file_spec)
			ElseIf InStr(sA, &quot;(PICO_READ_TEXT_PY)&quot;) &lt;&gt; 0 Then
				file_spec = fsPythonPicoDoc()
				TextField = getLimitedTextFromFile(file_spec)
			ElseIf InStr(sA, &quot;(PIPER_READ_TEXT_PY)&quot;) &lt;&gt; 0 Then
				file_spec = fsPythonPiperDoc()
				TextField = getLimitedTextFromFile(file_spec)
			ElseIf InStr(sA,  &quot;(RHVOICE_READ_TEXT_PY)&quot;) &lt;&gt; 0 Then
				file_spec = fsRhVoiceTtsDoc()
				TextField = getLimitedTextFromFile(file_spec)
			ElseIf InStr(sA, &quot;(CREATE_QR_LABEL_PY)&quot;) &lt;&gt; 0 Then			
				file_spec = fsPythonCreateQR()
				TextField = getLimitedTextFromFile(file_spec)			
			ElseIf InStr(sA, &quot;(SAY_APPLESCRIPT)&quot;) &lt;&gt; 0 Then
				file_spec = &quot;&quot;
				TextField = fswriteMacOSSpeechScript(&quot;&quot;, _
				fsSelectionLanguageAndRegion(True), &quot;&quot;)
			ElseIf InStr(sA, &quot;(SAY_APPLESCRIPT_SLOWLY)&quot;) &lt;&gt; 0 Then
				file_spec = &quot;&quot;
				TextField = fswriteMacOSSpeechScript(&quot;-r 110 &quot;, _
				fsSelectionLanguageAndRegion(True), &quot;&quot;)
			ElseIf InStr(sA, &quot;(SAY_APPLESCRIPT_QUICKLY)&quot;) &lt;&gt; 0 Then
				file_spec = &quot;&quot;
				TextField = fswriteMacOSSpeechScript(&quot;-r 240 &quot;, _
				fsSelectionLanguageAndRegion(True), &quot;&quot;)
			ElseIf InStr(sA, &quot;(SAY_APPLESCRIPT_SYSTEM_VOICE)&quot;) &lt;&gt; 0 Then
				file_spec = &quot;&quot;
				TextField = fswriteMacOSSpeechScript(&quot;&quot;, _
				&quot;&quot;, &quot;&quot;)
			Else
				file_spec = &quot;&quot;
				TextField = &quot;&quot;
			End If
			If Len(file_spec) &lt;&gt; 0 Then
				.GetControl(&quot;TextField2&quot;).model.helpText = fsAboutScriptHint(file_spec)
			End If
			.GetControl(&quot;TextField2&quot;).model.Text = TextField
		Else &apos; if Config(pi_use_html_boolean) then
			sA = replacePublicTokensWithStr(Config(pi_html_string))
			.GetControl(&quot;TextField3&quot;).model.Text = &quot;[com.sun.star.system.SystemShellExecute]&quot;
			If InStr(sA,&quot;.google.&quot;) &lt;&gt; 0 Then
				sA = sA &amp; Chr(13) &amp; Chr(13) &amp; &quot;Powered by Google TM&quot;
			End If
			.GetControl(&quot;TextField2&quot;).model.Text = sA
		End If

		&apos; Show the dialog
		.Execute()
	End With
End Sub


Type TypeUserIconSet
	checkmark As String
	circle As String
	heart As String
	smile As String
	square As String
	all As String
End Type


Function ShowSpeechDispatcherButton() As Boolean
	&apos; Determines if the Speech Dispatcher button should be shown in Dialog4.
	ShowSpeechDispatcherButton = False

	If getGUIType() = 4 Then
		If fsTheOsId() = &quot;POSIX.EXPERIMENTAL&quot; Or fbYouAreStaffOrAdmin(_
		Array(fsPiperPath(), PiperModelFile(&quot;voices.json&quot;))) Then
			ShowSpeechDispatcherButton = True

		ElseIf Instr(fsPiperPath(), &quot;/pied/&quot;) &lt;&gt; 0 And _
		fsTheOsId() = &quot;POSIX&quot; And fbYouAreStaffOrAdmin(_
		Array(fsPiperPath(), PiperModelFile(&quot;voices.json&quot;))) Then
			ShowSpeechDispatcherButton = True
		End If
	End If
End Function


Function CheckNumInput(_str As String, OKCharacters As String) As String
	&apos; Return allowed characters (digits only)
	CheckNumInput = 0
	Select Case Len(OKCharacters) 
	Case 0
	OkCharacters = &quot;01234567890&quot;
	End Select
	Dim i As Integer : i = 0
	Dim result As String : result = &quot;&quot;
		For i = 1 To Len(_str)
		If InStr(1, OkCharacters, Mid(_str, i, 1)) &gt; 0 Then
			result = result &amp; Mid(_str, i, 1)
		End If
	Next i
	If result = &quot;&quot; Then result = &quot;0&quot;	
	CheckNumInput = result
End Function


Sub Dialog4Speech_DispatcherButtonClick
	&apos; Dialog4
	Dim ModelLang As String : ModelLang = &quot;&quot;
	Dim ModelAndVoice() As String
	With f_dlgOnnxSetting
		ModelAndVoice = Split(.GetControl(&quot;ComboBox1&quot;).Model.Text &amp; &quot;#&quot; &amp; _
			.GetControl(&quot;ComboBox2&quot;).Model.Text, &quot; &quot;)
		Select Case .GetControl(&quot;_speech_dispatcher&quot;).Model.Label
			Case fsLookUpTerm(&quot;s_speech-dispatcher&quot;)
			&apos; Show a MsgBox for Dialog4 to confirm updating the Speech Dispatcher
			&apos; settings.
			ModelLang = GuessDialog4Combo1Language() &apos; GetDialog4CurrentLanguage() 
			Select Case msgbox(ModelLang &amp; Chr(13) &amp; _
			.GetControl(&quot;ComboBox1&quot;).Model.Text &amp; &quot;#&quot; &amp; _
			.GetControl(&quot;ComboBox2&quot;).Model.Text, 1, fsLookUpTerm(&quot;s_read-text&quot;) &amp; _
			&quot; - &quot; &amp; fsLookUpTerm(&quot;s_speech-dispatcher&quot;) &amp; _
			&quot; - &quot; &amp; fsLookUpTerm(&quot;s_default-synthesizer&quot;))
				Case 1
					If UpdateSpeechDispatcher(_
					ModelAndVoice(Ubound(ModelAndVoice))_
					) Then
						myBeep()
					End If
				Case Else
					Exit Sub
			End Select
	
			Case Else
				&apos; print &quot;TODO: Do another function like remove a model&quot;
		End Select
	
	End With
End Sub


Function Dialog4Icon() As TypeUserIconSet
	Dim info as TypeUserIconSet
	Dim Item As String
	With info
		&apos; Legacy-friendly characters, no duplicates
			.checkmark = &quot;â &quot;  &apos; Check mark
			.circle = &quot;â &quot;      &apos; Filled circle
			.heart = &quot;â¥ &quot;       &apos; Heart
			.smile = &quot;âº &quot;       &apos; Smiling face
			.square = &quot;â  &quot;      &apos; Solid square
		.all = Replace(Join(Array(.checkmark, .circle, .heart, .smile, .square), _
		&quot;&quot;), &quot; &quot;, &quot;&quot;)
	End With
	Dialog4Icon = info
End Function


Function GetDialog4CurrentLanguage() As String
&apos; Returns a human-friendly language name from Dialog4âs ComboBox3 selection.
&apos; Falls back to an empty string if an error occurs.
    Dim displayLanguage As String
    Dim englishIndex    As Integer
    Dim combo3Model     As Object

    &apos; Default values
    displayLanguage = &quot;en&quot;
    englishIndex    = -1
    GetDialog4CurrentLanguage = &quot;&quot;

    On Error GoTo getDialog4CurrentLanguageErr

    With f_dlgOnnxSetting
        Set combo3Model = .GetControl(&quot;ComboBox0&quot;).Model

        &apos; Get the selected language code
        displayLanguage = combo3Model.Text
        &apos; Convert to human-readable language name
        GetDialog4CurrentLanguage = isoToEnglish(displayLanguage, &quot;tools&quot;, englishIndex) &apos; -1
    End With

    Exit Function

getDialog4CurrentLanguageErr:
    GetDialog4CurrentLanguage = &quot;&quot;
End Function


Function GuessDialog4Combo1Language()
	GuessDialog4Combo1Language = &quot;&quot;
	Dim sDisplayLanguage As String : sDisplayLanguage = &quot;en&quot;
	Dim icon As TypeUserIconSet : icon = Dialog4Icon()
	With f_dlgSpeechSetup
		&apos; The Dialog1 ComboBox3 lets you choose a display language
		sDisplayLanguage = .GetControl(&quot;ComboBox3&quot;).Model.Text
	End With
	Dim ModelLang As String : ModelLang = &quot; &quot;
	Dim iEnglish As Integer : iEnglish = -1
	If Left(sDisplayLanguage, 2) = &quot;en&quot; Then
		iEnglish = -2
	End If
	With f_dlgOnnxSetting
		Select Case Len(.GetControl(&quot;ComboBox1&quot;).Model.Text)
			Case 0
				ModelLang = isoToEnglish(fsSelectionLanguage(),  &quot;tools&quot;, iEnglish)
			Case Else
			ModelLang =_(isoToEnglish(Split(_
			fsSupertrim(.GetControl(&quot;ComboBox1&quot;).Model.Text, &quot; &quot; &amp; icon.all &amp; &quot;# &quot;), &quot;_&quot;)(0)), &quot;tools&quot;, iEnglish)
		End Select
		Select Case Instr(ModelLang, &quot; &quot;)
			Case 0
			If Lcase(ModelLang) = ModelLang Then
				&apos; Show Windows Language data &quot;816&quot; (Portuguese) with normal capitalization
				GuessDialog4Combo1Language = Ucase(Left(ModelLang, 1)) &amp; Mid(ModelLang, 2)
			Else
				GuessDialog4Combo1Language = ModelLang
			End If
			Case Else
			GuessDialog4Combo1Language = Split(_
			fsSupertrim(.GetControl(&quot;ComboBox1&quot;).Model.Text, &quot; &quot; &amp; icon.all &amp; &quot;# &quot;), &quot;-&quot;)(0)
		End Select
	End With
End Function


Function CheckDialog1ComboBox(fileControl As String, comboBox As String, _
Application As String, Token As String) As Boolean
	&apos; Check the specified combo box controls within `Dialog1`, Returns `True` 
    &apos; if a ComboBox is Enabled and it includes the `Token`

	CheckDialog1ComboBox = False
	Dim _command As String : _command = Lcase(Application)

	With f_dlgSpeechSetup
		If .GetControl(comboBox).model.Enabled Then
			If Instr(.GetControl(comboBox).Model.Text, Token) &lt;&gt; 0 Then
				If Instr(LCase(.GetControl(fileControl).Model.Text), _command) &lt;&gt; 0 Then
					CheckDialog1ComboBox = True
					Exit Function
				End If
			End If
		End If
	End With
End Function


Type PiperType
	&apos; key value pairs as Strings, Integers, and Variants (i.e.: an Array)
	onnx_model As String
	file_option As String
	ubound As Integer
	voice_ids As Variant
End Type


	&apos; Locally installed models are not usually available globally. ONNX model
	&apos; files are big. In an organization, it might be best to back up the
	&apos; models locally. If you are using [Pied](https://github.com/Elleo/pied)
	&apos; to manage speech models, the extension links to model Pied&apos;s ONNX files
	&apos; automatically.
	&apos;
	&apos; * `UpdatePiperSettings(True)` installs the onnx files immediately,
	&apos;    then reads the selected text aloud.
	&apos; * `UpdatePiperSettings(False) sets the main dialog command line
	&apos;    To update it upon clicking **OK** in Dialog1.
	&apos;

Function CheckUpdatePiperDialog1ComboBox( _
    ByVal fileControlName As String, _
    ByVal comboBoxName   As String _
) As Boolean

&apos; Checks and updates a Dialog1 combo box with the Piper command string from Dialog4.
&apos; Returns True if the combo box text was replaced with the new Piper command.
    Dim setupDialog    As Object
    Dim fileCtrl       As Object
    Dim comboCtrl      As Object
    Dim commandStr     As String

    &apos; Default return value
    CheckUpdatePiperDialog1ComboBox = False
    commandStr = &quot;&quot;

    &apos; Reference the speech-setup dialog
    Set setupDialog = f_dlgSpeechSetup

    With setupDialog
        &apos; Cache the relevant controls
        Set fileCtrl  = .GetControl(fileControlName)
        Set comboCtrl = .GetControl(comboBoxName)

        &apos; Only update if the combo box is enabled and contains the Piper placeholder
        If comboCtrl.Model.Enabled Then
            If InStr(comboCtrl.Model.Text, &quot;(PIPER_READ_TEXT_PY)&quot;) &lt;&gt; 0 Then
                &apos; Ensure the file-path field mentions Python
                If InStr(LCase(fileCtrl.Model.Text), &quot;python&quot;) &lt;&gt; 0 Then
                    &apos; Launch Dialog4 (without immediate playback) to get the command
                    commandStr = UpdatePiperSettings(False)
                    &apos; If the returned command still contains the placeholder, apply it
                    If InStr(commandStr, &quot;(PIPER_READ_TEXT_PY)&quot;) &lt;&gt; 0 Then
                        comboCtrl.Model.Text = commandStr
                        CheckUpdatePiperDialog1ComboBox = True
                    End If
                End If
            End If
        End If
    End With
End Function



Function LookUpUboundOfPiperModel(ByVal modelId As String) As Integer
&apos; Returns the maximum voice index for a given Piper model.
&apos; Looks up the model in the PiperModelList and returns the UBound of its parts.
    Dim entry           As String
    Dim foundList       As Variant

    &apos; Default return value
    LookUpUboundOfPiperModel = 0
    
    On Local Error GoTo ErrHandler
    
    For Each entry In PiperModelList(&quot;&quot;, False)
        foundList = Split(entry, &quot;#&quot;)
        &apos; Check if the model identifier matches
        If foundList(LBound(foundList)) = modelId Then
            &apos; Return the highest subscript (voice count index)
            LookUpUboundOfPiperModel = CInt(foundList(UBound(foundList)))
            Exit Function
        End If
    Next entry

    Exit Function

ErrHandler:
    &apos; On any error, return zero as fallback
    LookUpUboundOfPiperModel = 0
End Function


Sub PlaySamplePiperSpeaker()
    &apos; Plays a Piper sample for the selected model and voice in the ONNX dialog.
    On Local Error GoTo playSamplePiperSpeakerErr

    Dim foundList        As Variant
    Dim voiceNum         As String
    Dim checkedVoiceNum  As String
    Dim allModels        As Variant
    Dim entry            As Variant
    Dim testModelList    As Variant
    Dim combo1           As Object
    Dim combo2           As Object
    Dim modifiedModel    As Object

    &apos; Initialize defaults and load models
    voiceNum        = &quot;0&quot;
    checkedVoiceNum = &quot;0&quot;
    allModels       = PiperModelList(&quot;&quot;, False)

    With f_dlgOnnxSetting
        &apos; Cache key controls
        Set combo1        = .GetControl(&quot;ComboBox1&quot;)
        Set combo2        = .GetControl(&quot;ComboBox2&quot;)
        Set modifiedModel = .GetControl(&quot;_modified&quot;).Model

        &apos; Parse selections
        foundList = Split(combo1.Model.Text, &quot; &quot;)
        voiceNum  = CheckNumInput(combo2.Model.Text, &quot;01234567890&quot;)

        Select Case UBound(foundList)
        Case 0, 1
            For Each entry In allModels
                &apos; Match the model identifier
                If InStr(entry, foundList(UBound(foundList))) &lt;&gt; 0 Then
                    testModelList = Split(entry, &quot;#&quot;)

                    &apos; Clamp voiceNum to available range
                    checkedVoiceNum = CStr( _
                        Min( _
                            Int(voiceNum), _
                            Int(testModelList(UBound(testModelList))) _
                        ) _
                    )

                    &apos; Windowsâonly fallback if VLC not installed
                    If getGUIType() = 1 _
                       And Len(fsFindAppPath(&quot;VideoLAN/VLC/vlc.exe&quot;)) = 0 Then
                        webHelp(&quot;https://rhasspy.github.io/piper-samples/&quot;)
                        Exit Sub
                    Else
                        &apos; Play the model sample
                        PiperPlaySound entry, checkedVoiceNum
                        Exit Sub
                    End If
                End If
            Next entry

        Case Else
            &apos; (optional) handle other cases

        End Select   &apos; â **MISSING**: closes the Select Case

        &apos; Mark dialog as modified
        modifiedModel.State = 1
    End With

    Exit Sub

playSamplePiperSpeakerErr:
    &apos; If anything goes wrong, prompt a recommended model
    PlayRecommendedPiperModel()
End Sub


Function PlayRecommendedPiperModel() As String
&apos; Prompts the user to play a sample from the recommended Piper model.
&apos; Returns the selected model identifier (including voice code) if âYesâ is chosen,
&apos; otherwise returns an empty string.
    Dim userChoice       As Integer
    Dim foundList        As Variant
    Dim modelIdentifier  As String
    Dim promptTitle      As String
    Dim promptMessage    As String

    &apos; Default return value
    PlayRecommendedPiperModel = &quot;&quot;

    &apos; Get the suggested model (language-region lookup)
    modelIdentifier = PiperLocalSuggestion( _
        fsSelectionLanguageAndRegion(True), False)

    &apos; Build the message and title for the prompt
    promptMessage = fsLookUpTerm(&quot;s_test&quot;) &amp; &quot;:&quot; &amp; Chr(10) &amp; Chr(10) &amp; _
                    &quot;`&quot; &amp; modelIdentifier &amp; &quot;`&quot;
    promptTitle   = fsLookUpTerm(&quot;s_read-text&quot;) &amp; &quot; - &quot; &amp; _
                    fsLookUpTerm(&quot;s_use-a-web-application&quot;)

    &apos; Ask user if they want to play a sample
    Dim StarBasicYesNo As Integer : StarBasicYesNo = 4
    userChoice = MsgBox(promptMessage, StarBasicYesNo, promptTitle)
    Dim StarBasicYes As Integer : StarBasicYes  = 6
    If userChoice = StarBasicYes Then 
        PlayRecommendedPiperModel = modelIdentifier
        foundList = Split(modelIdentifier, &quot;#&quot;)
        &apos; If voice code is included, use it; otherwise default to &quot;0&quot;
        If UBound(foundList) = 1 Then
            PiperPlaySound foundList(0), foundList(1)
        Else
            PiperPlaySound foundList(0), &quot;0&quot;
        End If
    End If
End Function


Function UpdatePiperSettings(ByVal doPlay As Boolean) As String
&apos; Displays the ONNX settings dialog, optionally plays the selected text through Piper,
&apos; and returns the final Piper command string (empty if cancelled).
    Dim errorCode       As Integer
    Dim waitFlag        As Boolean
    Dim pythonPath      As String
    Dim rawCommand      As String
    Dim cleanedCommand  As String
    Dim textSelection   As String
    Dim guiType         As Integer

    &apos; Default return value
    UpdatePiperSettings = &quot;&quot;

    &apos; Locate Python interpreter and show the settings dialog
    pythonPath     = PosixPythonPath()
    rawCommand     = ShowOnnxEditor()
    textSelection  = Trim(fsGetTextSelection(False, True))
    waitFlag       = False

    &apos; If user cancelled or there&apos;s no command, bail out
    If Len(rawCommand) = 0 Then Exit Function

    &apos; If not playing now or no text selected, just return the command
    If Not doPlay Or Len(textSelection) = 0 Then
        UpdatePiperSettings = rawCommand
        Exit Function
    End If

    &apos; Write the selected text to a temp file for Piper
    CreateFile(fsTemporaryTextDoc(), textSelection, &quot;UTF-8&quot;)

    &apos; Remove the updateâflag token from the command before execution
    cleanedCommand = Replace( _
        replaceLocalTokensWithStr(rawCommand), _
        &quot; --language (SELECTION_LANGUAGE_COUNTRY_CODE)&quot;, &quot;&quot;)

    &apos; Choose execution method based on GUI platform
    guiType = getGUIType()
    Select Case guiType
        Case 1  &apos; Windows
            If fbDoWinBat(&quot;&quot;&quot;&quot; &amp; pythonPath &amp; &quot;&quot;&quot; &quot; &amp; cleanedCommand) Then
                errorCode = 0
            Else
                errorCode = 5
            End If
            If errorCode = 5 Then
                errorCode = Shell(pythonPath, 0, cleanedCommand, waitFlag)
            End If

        Case Else  &apos; POSIX / macOS
            errorCode = Shell( _
                converttourl(pythonPath), _
                0, cleanedCommand, waitFlag)
    End Select

    &apos; Strip out the update flag and return the userâfacing command
    UpdatePiperSettings = Replace(rawCommand, &quot; --update True&quot;, &quot;&quot;)
End Function


Sub UpdateShowOnnxEditor()
&apos; Updates the ONNX settings dialog when the model selector (ComboBox1) changes:
&apos; - Refreshes language hint and model info panel
&apos; - Enables/disables speech dispatcher and OK button
&apos; - Clears or repopulates ComboBox2 as needed
    Dim models            As Variant
    Dim icons             As TypeUserIconSet
    Dim modelFile         As String
    Dim foundList         As Variant
    Dim itemValue         As String
    Dim trimModelId       As String
    Dim i                 As Integer

    &apos; Cached control objects for clarity and performance
    Dim combo1            As Object
    Dim combo2Model       As Object
    Dim imageControl      As Object
    Dim modelInfoText     As Object
    Dim speechDispatcher  As Object
    Dim okButton          As Object
    Dim modifiedModel     As Object

    &apos; Load all installed models (validated)
    models = PiperModelList(&quot;&quot;, True)
    Set icons = Dialog4Icon()

    With f_dlgOnnxSetting
        &apos; Cache frequently used controls/models
        Set combo1           = .GetControl(&quot;ComboBox1&quot;)
        Set combo2Model      = .GetControl(&quot;ComboBox2&quot;).Model
        Set imageControl     = .GetControl(&quot;ImageControl1&quot;)
        Set modelInfoText    = .GetControl(&quot;_model_info_text&quot;).Model
        Set speechDispatcher = .GetControl(&quot;_speech_dispatcher&quot;)
        Set okButton         = .GetControl(&quot;_ok&quot;).Model
        Set modifiedModel    = .GetControl(&quot;_modified&quot;).Model

        &apos; Extract the identifier portion of the ComboBox1 text
        trimModelId = Trim(combo1.Model.Text)
        If InStr(trimModelId, &quot; &quot;) &lt;&gt; 0 Then
            trimModelId = Split(combo1.Model.Text, &quot; &quot;)(1)
        End If

        &apos; Iterate through model entries to find the selected one
        For Each itemValue In models
            If InStr(LCase(Trim(itemValue)), LCase(trimModelId)) = 0 Then
                &apos; No match: continue
            Else
                foundList = Split(itemValue, &quot;#&quot;)
                Select Case UBound(foundList)
                    Case 2
                        &apos; Reset language hint
                        imageControl.Model.helpText = &quot;&quot;

                        &apos; If the entry has a JSON file, display its contents
                        If Left(combo1.Model.Text, 2) = icons.checkmark Then
                            modelFile = Split(foundList(1), &quot;?&quot;)(0) &amp; &quot;.json&quot;
                            If FileExists(modelFile) Then
                                modelInfoText.helpText = modelFile
                                modelInfoText.Text     = getTextFromFile(modelFile, &quot;UTF-8&quot;, 0)
                                speechDispatcher.Visible = ShowSpeechDispatcherButton()
                                okButton.Enabled        = True
                            End If
                        Else
                            &apos; Unchecked entries clear the info panel
                            modelInfoText.helpText = &quot;&quot;
                            modelInfoText.Text     = &quot;&quot;
                            speechDispatcher.Visible = False
                            okButton.Enabled        = False
                        End If

                    Case Else
                        &apos; Clear and exit loop
                        modelInfoText.helpText = &quot;&quot;
                        modelInfoText.Text     = &quot;&quot;
                        combo2Model.Text       = &quot;0&quot;
                        speechDispatcher.Visible = False
                        Exit For
                End Select
            End If
        Next itemValue

        &apos; Always reset the help text on ComboBox2 until next check
        combo2Model.helpText = &quot;&quot;

        &apos; Mark dialog as modified on first run or enforce control state
        If modifiedModel.State = 0 Then
            modifiedModel.State = 1
        Else
            If Left(combo1.Model.Text, 2) = icons.checkmark Then
                okButton.Enabled = True
            Else
                modelInfoText.Text     = &quot;&quot;
                modelInfoText.helpText = &quot;&quot;
                okButton.Enabled       = False
                speechDispatcher.Visible = False
            End If
        End If

        &apos; Refresh the voice selector
        EditDialog4ComboBox2()

        &apos; Show or hide the speech dispatcher based on the checkmark
        If Left(combo1.Model.Text, 2) = icons.checkmark Then
            speechDispatcher.Visible = ShowSpeechDispatcherButton()
            fsOnnxCombo2HelpText()
        Else
            speechDispatcher.Visible = False
        End If
    End With
End Sub


Sub CheckOnnxSpeechRatePercent()
&apos; Validates and clamps the speechârate percentage in ComboBox3 to [25%,250%],
&apos; updates the display with â%â, and flags the dialog as modified.
    Dim speechRate     As Integer
    Dim rangeBoundary  As Variant
    Dim combo3         As Object
    Dim combo3Model    As Object
    Dim modifiedModel  As Object

    &apos; Default and valid range
    speechRate    = 0
    rangeBoundary = Array(25, 250)

    With f_dlgOnnxSetting
        &apos; Cache the controls
        Set combo3        = .GetControl(&quot;ComboBox3&quot;)
        Set combo3Model   = combo3.Model
        Set modifiedModel = .GetControl(&quot;_modified&quot;).Model

        &apos; Parse user input, clamp to [25â250]
        speechRate = Int(CheckNumInput(combo3Model.Text, &quot;01234567890&quot;))
        speechRate = Min(Max(speechRate, rangeBoundary(0)), rangeBoundary(1))

        &apos; Update text with percent sign
        combo3Model.Text = CStr(speechRate) &amp; &quot;%&quot;

        &apos; Mark dialog as modified
        modifiedModel.State = 1
    End With
End Sub



Sub CheckOnnxVoiceCountBoundary()
&apos; Ensures the selected voice number in ComboBox2 is within valid bounds
&apos; and marks the dialog as modified when the boundary is enforced.
    Dim voiceBound      As Integer
    Dim rangeBoundary   As Variant
    Dim combo2          As Object
    Dim combo2Model     As Object
    Dim modifiedModel   As Object

    voiceBound = 0

    With f_dlgOnnxSetting
        &apos; Cache controls for clarity and performance
        Set combo2        = .GetControl(&quot;ComboBox2&quot;)
        Set combo2Model   = combo2.Model
        Set modifiedModel = .GetControl(&quot;_modified&quot;).Model



        &apos; Compute valid index range: [0, itemCount-1]
        rangeBoundary = Array(0, combo2.getItemCount() - 1)

        &apos; Parse user input, clamp within the valid range
        voiceBound = Int(CheckNumInput(combo2Model.Text, &quot;01234567890&quot;))
        voiceBound = Min(Max(voiceBound, rangeBoundary(0)), rangeBoundary(1))

        &apos; Write the clamped value back into the control
        combo2Model.Text = CStr(voiceBound)
        
        &apos; Refresh the help text based on current selection
        combo2Model.HelpText = fsOnnxCombo2HelpText()

        &apos; Mark the dialog as modified
        modifiedModel.State = 1
    End With
End Sub


Type PiperModelCardType
	OnlyLocal As Integer
	OnlyOnline As Integer
	LocalOrOnline As Integer
    SaveOnline As Integer
    SaveOnlineOrAltMessage As Integer
    LocalOrAltMessage As Integer
    ModelCardPath As Integer
    ModelCardURL As Integer
    ModelCardURLorPath As Integer
    SampleTextURL As Integer
    SampleText As Integer
End Type


Function SharedPiperUseModel()
	Dim UseModel As PiperModelCardType
	With UseModel
		.OnlyLocal = 0
		.OnlyOnline = 1
		.LocalOrOnline = 2
        .SaveOnline = 3
        .SaveOnlineOrAltMessage = 4
        .LocalOrAltMessage = 5
        .ModelCardPath = 6
        .ModelCardURL = 7
        .ModelCardURLorPath = 8
        .SampleTextURL = 9
        .SampleText = 10
	End With
	SharedPiperUseModel = UseModel
End Function


Function GetModelCard(Model As String, Mode As Integer) As String
	Dim ParsedModel As String : ParsedModel = SanitizeModel(Model)
	If ParsedModel = &quot;&quot; Then
		GetModelCard = &quot;&quot;
		Exit Function
	End If
	Dim UseModel As PiperModelCardType
	UseModel = SharedPiperUseModel()
	Dim Lang As String : Lang = Split(ParsedModel, &quot;_&quot;)(0)
	Dim PathParts As Variant : PathParts = Split(ParsedModel, &quot;-&quot;)

	Dim Model_CardPath As String
	Model_CardPath = fsSuperTrim(ConvertToURL(Environ(&quot;HOME&quot;)), &quot;/&quot;) &amp; _
					 &quot;/.local/share/piper-tts/piper-voices/&quot; &amp; Lang &amp; &quot;/&quot;
	Dim URL As String : URL = &quot;https://rhasspy.github.io/piper-samples/samples/&quot; &amp; Lang &amp; &quot;/&quot;

	Dim Part As String
	For Each Part In PathParts
		Model_CardPath = Model_CardPath &amp; Part &amp; &quot;/&quot;
		URL = URL &amp; Part &amp; &quot;/&quot;
	Next
	Model_CardPath = Model_CardPath &amp; &quot;MODEL_CARD&quot;
	Dim SampleURL As String : SampleURL = URL &amp; &quot;sample.txt&quot;
	URL = URL &amp; &quot;MODEL_CARD&quot;

	Dim ModelCard As String : ModelCard = &quot;&quot;
	Dim AltModelCard As String : AltModelCard = Join(Array( _
	 &quot;&quot;, _  
	 &quot;Using Contributors&apos; Speech Platforms&quot;, _  
	 &quot;====================================&quot;, _  
	 &quot;&quot;, _  
	 &quot;**[Read Text Extension][1]** can produce synthesized speech with LibreOffice.&quot;, _  
	 &quot;It supports Piper and Mimic3, platforms that use contributor supported voice&quot;, _  
	 &quot;models to produce high quality speech from text. It also supports small and&quot;, _  
	 &quot;efficient contributor speech platforms like MaryTTS and Rhvoice.&quot;, _  
	 &quot;&quot;, _  
	 &quot;[1]: https://github.com/jimholgate/readtextextension/blob/master/README.md&quot; _  
	 ), Chr(13))
	Select Case Mode
		Case UseModel.OnlyLocal
			If FileExists(Model_CardPath) Then
				ModelCard = getTextFromFile(Model_CardPath, &quot;UTF-8&quot;, 0)
			Else
				ModelCard = &quot;&quot;
			End If

		Case UseModel.OnlyOnline
			ModelCard = fsGetWebService(URL)
			If Len(Trim(ModelCard)) &lt;&gt; 0 Then
				CreateFile Model_CardPath, Trim(ModelCard), &quot;UTF-8&quot;
			End If

		Case UseModel.LocalOrOnline
			If FileExists(Model_CardPath) Then
				ModelCard = getTextFromFile(Model_CardPath, &quot;UTF-8&quot;, 0)
			Else
				ModelCard = fsGetWebService(URL)
			End If

		Case UseModel.SaveOnline
			If FileExists(Model_CardPath) Then
				ModelCard = getTextFromFile(Model_CardPath, &quot;UTF-8&quot;, 0)
			Else
				ModelCard = fsGetWebService(URL)
				If Len(Trim(ModelCard)) &lt;&gt; 0 Then
					CreateFile Model_CardPath, Trim(ModelCard), &quot;UTF-8&quot;
				End If
			End If

		Case UseModel.SaveOnlineOrAltMessage 
			If FileExists(Model_CardPath) Then
				ModelCard = getTextFromFile(Model_CardPath, &quot;UTF-8&quot;, 0)
			Else
				ModelCard = fsGetWebService(URL)
				If Len(Trim(ModelCard)) &lt;&gt; 0 Then
					CreateFile Model_CardPath, Trim(ModelCard), &quot;UTF-8&quot;
                Else
                    ModelCard = AltModelCard
				End If
			End If
		Case UseModel.ModelCardPath
			ModelCard = Model_CardPath
		Case UseModel.ModelCardURL
			ModelCard = URL
		Case UseModel.ModelCardURLorPath
			If FileExists(Model_CardPath) Then
				ModelCard = Model_CardPath
			Else
				ModelCard = URL
			End If
		Case UseModel.SampleTextURL
			ModelCard = SampleURL
		Case UseModel.SampleText
			ModelCard = Split(fsGetWebService(SampleURL), Chr(10))(0)
	End Select
	GetModelCard = ModelCard
End Function


Function SanitizeModel(Model As String) As String
	Dim icon As TypeUserIconSet : icon = Dialog4Icon()
	If InStr(Model, &quot;-&quot;) = 0 Then
		Model = &quot;en_GB-jenny_dioco-medium&quot;
	End If
	SanitizeModel = fsSuperTrim(Split(Model, &quot;#&quot;)(0), &quot; ,&quot;&quot;;:&quot; &amp; icon.all)
End Function


&apos;=====================================================
&apos;=====================================================

Sub TestModelCard()
	Dim UseModel As PiperModelCardType
	UseModel = SharedPiperUseModel()

	Dim CardText As String
	CardText = GetModelCard(&quot;en_GB-jenny_dioco-medium&quot;, UseModel.SaveOnline)
	MsgBox CardText
End Sub

&apos;=====================================================


Sub PiperPlaySound(ByVal model As String, ByVal voiceNo As String)
&apos; Plays an online Piper sample MP3 for the given model and voice number.
&apos; Temporarily disables UI controls during playback and restores their state afterwards.
    Dim delimiter                As Variant
    Dim splitModel               As Variant
    Dim lang                     As String
    Dim doSound                  As String
    Dim pathDir                  As Variant
    Dim testUrl                  As String
    Dim comboBox1Text            As String
    Dim modelCard                As String
    Dim sampleText               As String
    Dim icons                    As TypeUserIconSet
    Dim useModel                 As PiperModelCardType
    Dim speechDispatcherEnabled  As Boolean
    Dim cancelEnabled            As Boolean
    Dim combo0Enabled            As Boolean
    Dim combo1Enabled            As Boolean
    Dim combo2Enabled            As Boolean
    Dim combo3Enabled            As Boolean
    Dim modelInfoEnabled         As Boolean
    Dim image1Enabled            As Boolean
    Dim okEnabled                As Boolean
    Dim ctrlName                 As String
    
    &apos; Initialize
    Set icons   = Dialog4Icon()
    testUrl     = &quot;&quot;
    comboBox1Text = &quot;&quot;
    modelCard   = &quot;&quot;
    sampleText = &quot;&quot;
    modelInfoEnabled = True
    
    useModel    = SharedPiperUseModel()
    
    &apos; Ensure model string contains a dash, else default
    If InStr(model, &quot;-&quot;) = 0 Then
        model = &quot;en_GB-jenny_dioco-medium&quot;
    End If
    
    &apos; Strip off any trailing characters after delimiters
    For Each delimiter In Array(&quot;#&quot;, &quot; &quot;, &quot;,&quot;, &quot;;&quot;, &quot;:&quot;)
        model = Split(model, delimiter)(0)
    Next delimiter
    model = Trim(Replace(model, &quot;#&quot;, &quot;&quot;))
    
    &apos; Parse components
    splitModel = Split(model, &quot;-&quot;)
    lang       = Split(model, &quot;_&quot;)(0)
    
    Select Case UBound(splitModel)
        Case 2
            &apos; Build the URL to the remote MP3 sample
            doSound = &quot;https://rhasspy.github.io/piper-samples/samples/&quot; &amp; lang &amp; &quot;/&quot;
            For Each pathDir In splitModel
                doSound = doSound &amp; pathDir &amp; &quot;/&quot;
            Next pathDir
            doSound = doSound &amp; &quot;speaker_&quot; &amp; voiceNo &amp; &quot;.mp3&quot;
            
            &apos; Retrieve model card info (or alt message)
            modelCard = GetModelCard(model, useModel.SaveOnlineOrAltMessage)
            sampleText = GetModelCard(model, useModel.SampleText)
            On Local Error GoTo piperPlaySoundErr
            If Len(modelCard) &lt;&gt; 0 Then
                With f_dlgOnnxSetting
                    &apos; Cache current control states
                    speechDispatcherEnabled = .GetControl(&quot;_speech_dispatcher&quot;).Model.Enabled
                    cancelEnabled           = .GetControl(&quot;_cancel&quot;).Model.Enabled
                    comboBox1Text           = Trim(.GetControl(&quot;ComboBox1&quot;).Model.Text)
                    combo0Enabled           = .GetControl(&quot;ComboBox0&quot;).Model.Enabled
                    combo1Enabled           = .GetControl(&quot;ComboBox1&quot;).Model.Enabled
                    combo2Enabled           = .GetControl(&quot;ComboBox2&quot;).Model.Enabled
                    combo3Enabled           = .GetControl(&quot;ComboBox3&quot;).Model.Enabled
                    modelInfoEnabled        = .GetControl(&quot;_model_info_text&quot;).Model.Enabled
                    image1Enabled           = .GetControl(&quot;ImageControl1&quot;).Model.Enabled
                    okEnabled               = .GetControl(&quot;_ok&quot;).Model.Enabled
                    .GetControl(&quot;_model_info_text&quot;).Model.Text       = sampleText &apos; modelCard
                    .GetControl(&quot;_model_info_text&quot;).Model.helpText   = testUrl
                    .GetControl(&quot;ComboBox1&quot;).Model.Text              = comboBox1Text
                    &apos; Disable all interactive controls
                    For Each ctrlName In Array( _
                         &quot;ImageControl1&quot;,&quot;ComboBox3&quot;,&quot;ComboBox2&quot;, _
                         &quot;ComboBox1&quot;,&quot;ComboBox0&quot;,&quot;_ok&quot;,&quot;_cancel&quot;, _
                         &quot;_speech_dispatcher&quot;)
                        .GetControl(ctrlName).Model.Enabled = False
                    Next ctrlName
                    
                    &apos; Play the sound if Python-style f-strings are supported
                    If fbPySupportFStrings() Then
                        PlaySound doSound
                        .GetControl(&quot;ComboBox1&quot;).Model.Text = comboBox1Text
                        .GetControl(&quot;ComboBox2&quot;).Model.Text = _
                            LookUpUboundOfPiperModel(comboBox1Text)
                    End If
                    
                    &apos; Re-enable only the OK button and image
                    .GetControl(&quot;ImageControl1&quot;).Model.Enabled = True
                    .GetControl(&quot;_ok&quot;).Model.Enabled           = True
                    
                    &apos; Restore remaining control states
                    .GetControl(&quot;ComboBox0&quot;).Model.Enabled          = combo0Enabled
                    .GetControl(&quot;ComboBox1&quot;).Model.Enabled          = combo1Enabled
                    .GetControl(&quot;ComboBox2&quot;).Model.Enabled          = combo2Enabled
                    .GetControl(&quot;ComboBox3&quot;).Model.Enabled          = combo3Enabled
                    .GetControl(&quot;_model_info_text&quot;).Model.Enabled   = modelInfoEnabled
                    .GetControl(&quot;_model_info_text&quot;).Model.Text       = modelCard &apos; sampleText
                    .GetControl(&quot;_speech_dispatcher&quot;).Model.Enabled = speechDispatcherEnabled
                    .GetControl(&quot;_cancel&quot;).Model.Enabled            = cancelEnabled
                    .GetControl(&quot;ImageControl1&quot;).Model.HelpText = &quot;&quot;
                    
                End With
            End If
    End Select
    
    Exit Sub

piperPlaySoundErr:
    &apos; Fallback: always attempt playback even on error
    PlaySound doSound
End Sub



Function fsOnnxCombo2HelpText() As String
&apos; Returns the help text for ComboBox2 by extracting the speaker identifier
&apos; from the selected ONNX modelâs JSON metadata. Models with only one voice
&apos; or uninstalled models yield an empty help text.

    Dim piperConfig   As PiperType
    Dim modelEntries  As Variant
    Dim entry         As String
    Dim foundList     As Variant
    Dim voiceIndex    As Integer
    Dim combo1Model   As Object
    Dim combo2Model   As Object

    &apos; Initialize default piperConfig
    piperConfig.onnx_model  = &quot;&quot;
    piperConfig.file_option = &quot;&quot;
    piperConfig.voice_ids   = Array(&quot;0&quot;)
    piperConfig.ubound      = 0

    With f_dlgOnnxSetting
        &apos; Cache the ComboBox models
        Set combo1Model = .GetControl(&quot;ComboBox1&quot;).Model
        Set combo2Model = .GetControl(&quot;ComboBox2&quot;).Model

        &apos; If ComboBox1 is disabled, clear help and exit
        If Not combo1Model.Enabled Then
            combo2Model.helpText = &quot;&quot;
            Exit Function
        End If

        &apos; Fetch all models (no validation flag)
        modelEntries = PiperModelList(&quot;&quot;, False)

        &apos; Iterate entries to find matching onnx model
        For Each entry In modelEntries
            foundList = Split(entry, &quot;#&quot;)
            If UBound(foundList) = 2 _
               And InStr(combo1Model.Text, foundList(0)) &lt;&gt; 0 Then

                &apos; Capture model name
                piperConfig.onnx_model = foundList(0)

                &apos; Parse file option and voice IDs
                If InStr(foundList(1), &quot;?&quot;) &lt;&gt; 0 _
                   And InStr(foundList(1), &quot;+&quot;) &lt;&gt; 0 Then

                    piperConfig.file_option = Split(foundList(1), &quot;?&quot;)(0)
                    piperConfig.voice_ids   = _
                        Split(Split(foundList(1), &quot;?&quot;)(1), &quot;+&quot;)
                    piperConfig.ubound      = UBound(piperConfig.voice_ids)
                Else
                    piperConfig.file_option = foundList(1)
                    piperConfig.voice_ids   = Array(&quot;0&quot;)
                    piperConfig.ubound      = 0
                End If

                &apos; Determine valid voiceIndex from ComboBox2 text
                voiceIndex = CInt(CheckNumInput(combo2Model.Text, &quot;01234567890&quot;))
                If voiceIndex &lt; 0 Then
                    voiceIndex = 0
                ElseIf voiceIndex &gt; piperConfig.ubound Then
                    voiceIndex = piperConfig.ubound
                End If

                &apos; Set helpText to the selected voice identifier
                combo2Model.helpText = piperConfig.voice_ids(voiceIndex)
                Exit For
            End If
        Next entry

        &apos; Return whatever helpText was assigned (or remain empty)
        fsOnnxCombo2HelpText = combo2Model.helpText
    End With
End Function


Function fsSystemSafePercentString(byVal percentage As String) As String
	percentage = CheckNumInput(percentage, &quot;01234567890&quot;)
	If getGUIType() = 1 Then
		&apos; Windows
		fsSystemSafePercentString = &quot;&quot;&quot;&quot; &amp; percentage &amp; &quot; percent&quot;&quot;&quot;
	Else 
		fsSystemSafePercentString = percentage &amp; &quot;%&quot;					
	End If
End Function


Sub FillDialog4ComboBox0()
&apos; Populates ComboBox0 in f_dlgOnnxSetting with a list of available Piper 
&apos; ISO language code.
	Dim UseLang As String : UseLang = &quot;&quot; &apos; &quot;en&quot;
	Dim Models As Variant : Models = PiperModelList(&quot;&quot;, False)
	Dim Row As String : Row = &quot;&quot;
	Dim Tally As String : Tally = &quot;&quot;
	Dim Language As String : Language = &quot;&quot;  &apos; i. e. `en`
	Dim englishIndex As Integer : englishIndex = -1
	Dim x As Integer
	
	For x = UBound(Models) To LBound(Models) Step -1
		Row = Models(x)
		
		If Instr(Row, &quot;_&quot;) &lt;&gt; 0 Then
			Language = Split(Row, &quot;_&quot;)(0)
			If Instr(Tally, Language) = 0 Then
				If Len(Tally) = 0 Then
					Tally = Language
				Else
					Tally = Tally &amp; &quot;,&quot; &amp; Language
				End If
			End If
		End If
	Next

	With f_dlgOnnxSetting
		.GetControl(&quot;ComboBox0&quot;).removeItems(0, .GetControl(&quot;ComboBox1&quot;).getItemCount())
		For Each Row in Split(Tally, &quot;,&quot;)
			.GetControl(&quot;ComboBox0&quot;).addItem(Row, 0)
		Next
		If Instr(Tally, fsSelectionLanguage(False)) &lt;&gt; 0 Then
			UseLang = fsSelectionLanguage(False) 
		ElseIf Instr(Tally, Config(pi_display_language_string)) &lt;&gt; 0 Then
			PopulateConfigPrivates()
			UseLang = Config(pi_display_language_string)
		End If
		.GetControl(&quot;ComboBox0&quot;).Text = UseLang
	End With
End Sub


Sub EditDialog4ComboBox2()
&apos; Populates ComboBox2 with voice numbers for the selected Piper model,
&apos; disabling/enabling the control and setting help text accordingly.
    Dim icons       As TypeUserIconSet : Set icons       = Dialog4Icon()
    Dim model       As String            : model       = &quot;&quot;
    Dim models      As Variant
    Dim rowValue    As String            : rowValue    = &quot;&quot;
    Dim voiceNo     As String            : voiceNo     = &quot;0&quot;
    Dim i           As Integer
    Dim PiperUBound As Integer

    With f_dlgOnnxSetting
        &apos; Cache the key controls/models
        Dim combo0       As Object : Set combo0       = .GetControl(&quot;ComboBox0&quot;)
        Dim combo1       As Object : Set combo1       = .GetControl(&quot;ComboBox1&quot;)
        Dim combo2       As Object : Set combo2       = .GetControl(&quot;ComboBox2&quot;)
        Dim combo2Model  As Object : Set combo2Model  = combo2.Model

        &apos; Start with ComboBox2 disabled
        combo2Model.Enabled = False
        
        &apos; Read and validate the selected model string
        model = Trim(combo1.Text)
        If Len(model) &lt; 5 Or UBound(Split(model, &quot;-&quot;)) &lt;&gt; 2 Then Exit Sub

        &apos; Clear any existing items and reset text
        combo2.removeItems 0, combo2.getItemCount()
        PiperUbound = LookUpUboundOfPiperModel(SanitizeModel(Model))

		voiceNo = Trim(Cstr(PiperUBound))
		combo2Model.Text = voiceNo

		For i = PiperUBound To 0 Step -1
            combo2.addItem CStr(i), 0
        Next i

        &apos; Enable or disable ComboBox2 based on the chosen voice number
        If Trim(combo2Model.Text) = &quot;0&quot; Then
            combo2Model.Enabled  = False
            combo2Model.HelpText = &quot;&quot;
        Else
            combo2Model.Enabled  = True
            combo2Model.HelpText = fsOnnxCombo2HelpText()
        End If
    End With
End Sub



Sub PiperDialog0OnChange()
	DIm Models As Variant
	EditDialog4ComboBox2()
	Dim Item As String
	With f_dlgOnnxSetting
		
		Models = PiperModelList(.GetControl(&quot;ComboBox0&quot;).Text, False)
		Select Case Ubound(Models)
			Case -1
			Exit Sub
			Case 0

			Select Case Ubound(Split(Models(0), &quot;#&quot;))
				Case 2
				EditDialog4ComboBox1List(Models)

				Case Else
				Exit Sub

			End Select
			
			Case Else
				EditDialog4ComboBox1List(Models)
	
		End Select

		Dim TestLang As String : TestLang = Config(pi_display_language_string)
		.GetControl(&quot;ComboBox0&quot;).Model.helpText = fsLookUpTerm2(.GetControl(&quot;ComboBox0&quot;).Text, TestLang)
		ManagePiperModelDisplay()
	End With
End Sub


Sub ManagePiperModelDisplay()
	Dim icon As TypeUserIconSet : icon = Dialog4Icon()
	Dim UseModel As PiperModelCardType
	UseModel = SharedPiperUseModel()
	With f_dlgOnnxSetting
		.GetControl(&quot;_model_info_text&quot;).Model.helpText = GetModelCard(_
		SanitizeModel(.GetControl(&quot;ComboBox1&quot;).Model.Text), UseModel.ModelCardURLorPath)
		
		
		.GetControl(&quot;_model_info_text&quot;).Model.Text = GetModelCard(_
		 SanitizeModel(.GetControl(&quot;ComboBox1&quot;).Model.Text), UseModel.SaveOnline)

		Select Case Instr(Trim(.GetControl(&quot;ComboBox1&quot;).Text), icon.checkmark)
			Case 1
			.GetControl(&quot;_ok&quot;).Model.Enabled = True		
			.GetControl(&quot;_speech_dispatcher&quot;).Visible = fsTheOsId() = &quot;POSIX&quot;

			Case Else
			.GetControl(&quot;_ok&quot;).Model.Enabled = False
			.GetControl(&quot;_speech_dispatcher&quot;).Visible = False

		End Select
	.GetControl(&quot;ImageControl1&quot;).Model.HelpText = .GetControl(&quot;ComboBox1&quot;).Text
	Dim TestLang As String : TestLang = Config(pi_display_language_string)
	.GetControl(&quot;ComboBox0&quot;).Model.helpText = fsLookUpTerm2(.GetControl(&quot;ComboBox0&quot;).Text, TestLang)
	End With
	EditDialog4ComboBox2()
End Sub


Sub EditDialog4ComboBox1List(models As Variant)
&apos; Populates ComboBox1 in f_dlgOnnxSetting with Piper models,
&apos; applies icon prefixes, handles initial suggestion, and updates related controls.
    Dim x As Integer
    Dim icons      As TypeUserIconSet: Set icons       = Dialog4Icon()
    Dim iconPrefix As String         : iconPrefix       = icons.heart
    Dim workingModel As String       : workingModel     = &quot;&quot;
    Dim foundList   As Variant
    Dim modelFile   As String
    Dim firstMatch  As String        : firstMatch       = &quot;&quot;
    Dim suggestion  As String        : suggestion       = _
        PiperLocalSuggestion(fsSelectionLanguageAndRegion(True), False)
    Dim UseSuggestion  As String     : UseSuggestion    = &quot;&quot;
    
    With f_dlgOnnxSetting
        &apos; Cache controls/models for efficiency
        Dim combo0        As Object: Set combo0        = .GetControl(&quot;ComboBox0&quot;).Model
        Dim combo1        As Object: Set combo1        = .GetControl(&quot;ComboBox1&quot;).Model
        Dim combo2        As Object: Set combo2        = .GetControl(&quot;ComboBox2&quot;).Model
        Dim speechButton  As Object: Set speechButton  = .GetControl(&quot;_speech_dispatcher&quot;)
        Dim infoText      As Object: Set infoText      = .GetControl(&quot;_model_info_text&quot;).Model
    
        &apos; Disable and clear before populating
        combo0.Enabled = False
        combo1.Enabled = False
        .GetControl(&quot;ComboBox1&quot;).removeItems(0, .GetControl(&quot;ComboBox1&quot;).getItemCount())
    
        For x = UBound(models) To LBound(models) Step -1
            foundList = Split(models(x), &quot;#&quot;)
            
            &apos; Case: no &quot;##&quot; marker â initial population pass
            If InStr(models(x), &quot;##&quot;) = 0 Then
                iconPrefix = icons.checkmark
                If Instr(models(x), suggestion) &gt; 0 Then
                	UseSuggestion = IconPrefix &amp; suggestion
                End If
                If Len(models(x)) &gt; 0 Then
                    workingModel = foundList(0)
                    combo1.Text = iconPrefix &amp; workingModel
                    speechButton.Visible = ShowSpeechDispatcherButton()
                End If
                
                If UBound(foundList) = 2 Then
                    modelFile = Split(foundList(1), &quot;?&quot;)(0) &amp; &quot;.json&quot;
                    If FileExists(modelFile) Then
                        workingModel = foundList(0)
                        combo1.Text = iconPrefix &amp; workingModel
                        infoText.helpText = modelFile
                        combo2.Text = foundList(2)
                        If CheckNumInput(foundList(2), &quot;01234567890&quot;) = &quot;0&quot; _
                           Or CheckNumInput(foundList(2), &quot;01234567890&quot;) = &quot;&quot; Then
                            combo2.Enabled = False
                        End If
                        combo2.helpText = fsOnnxCombo2HelpText()
                    End If
                End If
                
            &apos; Case: &quot;##&quot; marker present â second pass for icon variations
            ElseIf UBound(foundList) = 2 Then
                workingModel = foundList(0)
                Select Case foundList(2)
                    Case &quot;0&quot;, &quot;-1&quot;, 0, -1, False
                        iconPrefix = icons.heart
                    Case Else
                        iconPrefix = icons.smile
                End Select
            End If
    
            &apos; Add non-empty entries to ComboBox1
            If Len(workingModel) &gt; 0 Then
                &apos; Capture firstMatch, preferring checkmark entries
                If Len(firstMatch) = 0 Then
                    firstMatch = iconPrefix &amp; workingModel
                ElseIf iconPrefix = icons.checkmark _
                   And InStr(firstMatch, icons.checkmark) = 0 Then
                    firstMatch = iconPrefix &amp; workingModel
                End If
    
                .GetControl(&quot;ComboBox1&quot;).addItem iconPrefix &amp; workingModel, 0
            End If
    
            workingModel = &quot;&quot;  &apos; reset for next iteration
        Next x
    
        &apos; Apply suggestion or fallback firstMatch
        If Len(UseSuggestion) &gt; 0 And InStr(combo1.Text, UseSuggestion) = 0 Then
            combo1.Text = UseSuggestion
        ElseIf Len(firstMatch) &gt; 0 And InStr(combo1.Text, icons.checkmark) = 0 Then
            combo1.Text = firstMatch
        End If
    
        &apos; Re-enable controls
        combo0.Enabled = True
        combo1.Enabled = True
    End With
End Sub


Function ShowOnnxEditor()
	ShowOnnxEditor = &quot;&quot;
	&apos; `f_dlgOnnxSetting` is a global variable of type `Variant`
	&apos; This function displays Dialog4. It outputs a command line
	&apos; string depending on the values you choose in the dialog.
	&apos; If you cancel the dialog, then it outputs `&quot;&quot;`.
	
	Dim _found_list As Variant
	Dim icon As TypeUserIconSet : icon = Dialog4Icon()
	Dim _percentage As String : _percentage = &quot;100%&quot;
	Dim x As Integer: x = 0
	Dim _lang As String : _lang = fsDisplayLanguage()
	Dim _working_model As String : _working_model = &quot;&quot;
	Dim model_file As String : model_file = &quot;&quot;
	Dim _item As String : _item = &quot;&quot;
	Dim download_flag As String : download_flag = &quot;&quot;
	Dim suggested_model As String : suggested_model = PiperLocalSuggestion(_
	fsSelectionLanguageAndRegion(True), False)
	Dim _models As Variant : _models = PiperModelList(fsSelectionLanguage(False), False)
	Dim ComboBox1 As String : ComboBox1 = &quot;&quot;
	Dim IconPrefix As String : IconPrefix = icon.heart
	Dim VoiceList As Variant
	fbTestDialogLoaded(&quot;textToSpeech&quot;)
	f_dlgOnnxSetting = CreateUnoDialog(DialogLibraries.textToSpeech.Dialog4)
	With f_dlgOnnxSetting
		.GetControl(&quot;_modified&quot;).Model.State = 0
		.model.Title = fsLookUpTerm2(&quot;s_read-text&quot;, _lang) &amp; _
		&quot; - &quot; &amp; fsLookUpTerm2(&quot;s_speech-properties&quot;, _lang)
		.GetControl(&quot;_edit_frame&quot;).model.Label = fsLookUpTerm2(_
		&quot;s_default-synthesizer&quot;, _lang)
		.GetControl(&quot;_models&quot;).model.Label = fsLookUpTerm2(&quot;s_model&quot;, _lang)
		.GetControl(&quot;_rate&quot;).model.Label = fsLookUpTerm2(&quot;s_rate&quot;, _lang)
		.GetControl(&quot;_voice&quot;).model.Label = fsLookUpTerm2(&quot;s_voice&quot;, _lang)
		.GetControl(&quot;_ok&quot;).Model.Label = fsLookUpTerm2(&quot;s_ok&quot;, _lang)
		.GetControl(&quot;_cancel&quot;).Model.Label = fsLookUpTerm2(&quot;s_cancel&quot;, _lang)
		.GetControl(&quot;_speech_dispatcher&quot;).Model.Label = fsLookUpTerm2(&quot;s_speech-dispatcher&quot;, _lang)
		.GetControl(&quot;ImageControl1&quot;).model.ImageURL = fsSpeakerLogo()
		.GetControl(&quot;ImageControl1&quot;).model.helpText = &quot;&quot;
		Select Case Instr(suggested_model, &quot;#&quot;)
			Case 0
			.GetControl(&quot;ComboBox2&quot;).Model.Text = &quot;0&quot;
			Case Else
			.GetControl(&quot;ComboBox2&quot;).Model.Text = Split(suggested_model, &quot;#&quot;)(1)
		End Select
		
		Select Case Instr(suggested_model, &quot;#0&quot;)
			Case 0
			.GetControl(&quot;ComboBox1&quot;).Model.Text = icon.smile &amp; Split(suggested_model, &quot;#&quot;)(0)
			Case Else
			.GetControl(&quot;ComboBox1&quot;).Model.Text = icon.heart &amp; Split(suggested_model, &quot;#&quot;)(0)
		End Select		
		.GetControl(&quot;_code_frame&quot;).model.Label = fsLookUpTerm2(&quot;s_about&quot;, _lang)
		If Len(model_file) &lt;&gt; 0 Then
			.GetControl(&quot;_model_info_text&quot;).Model.Text = getTextFromFile(model_file, &quot;UTF-8&quot;, 0)
			.GetControl(&quot;_ok&quot;).Model.Enabled = True
		End If

		&apos; Populate &quot;ComboBox2&quot; with a list of numbers... 
		EditDialog4ComboBox1List(_models)
		&apos; Populate ComboBox0 with a list of available language codes
		FillDialog4ComboBox0()
		Select Case .Execute()
		Case 0

		Case Else
			Select Case .GetControl(&quot;ComboBox3&quot;).Model.Text
				Case &quot;100%&quot;
				_percentage = &quot;&quot;			
				Case Else			
				_percentage = &quot; --rate &quot; &amp; fsSystemSafePercentString(.GetControl(&quot;ComboBox3&quot;).Model.Text)
			End Select
			ComboBox1 = Trim(.GetControl(&quot;ComboBox1&quot;).Model.Text)
			Select Case Instr(ComboBox1, &quot; &quot;)
				Case 0
				Case Else
				Select Case Ubound(Split(ComboBox1, &quot; &quot;))
					Case 1
					suggested_model = Split(ComboBox1, &quot; &quot;)(1)
					If Instr(icon.checkmark, Left(ComboBox1, 1)) = 0 Then
						download_flag = &quot; --update True&quot;
					End If
					ShowOnnxEditor = &quot;&quot;&quot;(PIPER_READ_TEXT_PY)&quot;&quot;&quot; &amp; download_flag &amp; _
					 _percentage &amp; &quot; --voice &quot; &amp; suggested_model &amp; &quot;#&quot; &amp; .GetControl(&quot;ComboBox2&quot;).Model.Text &amp; _
					&quot; --language (SELECTION_LANGUAGE_COUNTRY_CODE) &quot;&quot;(TMP)&quot;&quot;&quot;
				End Select
			End Select
		End Select
	End With
	
	Exit Function
	ShowOnnxEditorErr:
	ShowOnnxEditor = &quot;&quot;
End Function

</script:module>