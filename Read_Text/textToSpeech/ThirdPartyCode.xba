<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="ThirdPartyCode" script:language="StarBasic">Rem *  *  *  *  * BASIC *  *  *  *  * 
Option Explicit
&apos;&apos; # Third Party Code
&apos;&apos;
&apos;&apos; Code shown here is used or adapted from other sources with permission.
&apos;&apos;
&apos; Unless otherwise attributed, the functions and subs below are adapted
&apos; from Extended PDF 1.4 (c) 2006 [Martin Brown](martin.brown@3bview.com)
&apos; and are distributed under the GNU General Public License
&apos;

Function fbTts_util_stringToBoolean( _
	value As String) As Boolean
	&apos; Converts a String to a boolean value.
	&apos; True=&gt; &quot;True&quot;
	&apos; False=&gt; &quot;False&quot;
	Dim b As Boolean
	b = False
	Dim v As String
	v = Trim(value)
	
	If StrComp(v,&quot;True&quot;,0) = 0 _
		Or StrComp(v,&quot;yes&quot;,0) = 0 _
		Or val(v) &lt;&gt; 0 Then
		b = True
	End If
	fbTts_util_stringToBoolean = b
End Function


Function fsTts_util_booleanToString( _
	value As Boolean) As String
	&apos; Converts a boolean value to a String.
	&apos; True=&gt; &quot;True&quot;
	&apos; False=&gt; &quot;False&quot;
	Dim s As String
	
	If value Then
		s = &quot;True&quot;
	Else
		s = &quot;False&quot;
	End If
	fsTts_util_booleanToString = s
End Function


Function fsFullPathOf( _
	filename As String) As String
	&apos;This macro sets a complete path for the user directory for the temporary file
	
	fsFullPathOf = createUnoService(&quot;com.sun.star.util.PathSettings&quot;).userConfig &amp; _
	&quot;/&quot; &amp; _
	filename
End Function


Function fsGetHomePyVer(home As String) As String
	fsGetHomePyVer = &quot;&quot;
	Dim sub_dirs$ : sub_dirs = fsSubDirectories(home)
	Dim x# : x = 0
	Dim a1 As Variant : a1 = split(sub_dirs, Chr(13))
	For x = Lbound(a1) to Ubound(a1)
		If a1(x) &lt;&gt; &quot;Current&quot; Then
			fsGetHomePyVer = a1(x)
			Exit Function
		End If
	Next
End Function


Function fsMacPythonVersion()
	fsMacPythonVersion = &quot;&quot;
	If fsGetOS() &lt;&gt; &quot;MacOS&quot; Then
		Exit Function
	End If
	Dim home$ : home = &quot;/Applications/LibreOffice.app/Contents/Frameworks/LibreOfficePython.framework/Versions&quot;
	fsMacPythonVersion = fsGetHomePyVer(home)
End Function


Function fsLinux64PythonLib() As String
	&apos; Find location of the fedora python library
	fsLinux64PythonLib = &quot;&quot;
	Dim home$ : home = &quot;/usr/lib64&quot;
	Dim sub_dirs$ : sub_dirs = fsSubDirectories(home)
	Dim a1 As Variant : a1 = Split(sub_dirs, Chr(13))
	Dim x# : x = 0
	For x = Lbound(a1) To Ubound(a1)
		if instr(a1(x), &quot;python&quot;) = 1 Then
			 fsLinux64PythonLib = home &amp; &quot;/&quot; &amp; a1(x)
			 Exit Function
		End If
	Next
End Function


Function PosixPythonPath() As String
	&apos; On MacOS, if you want to use pip3 libraries, the
	&apos; version of the system python or the developer
	&apos; python needs to match the LibreOffice python
	&apos; major and minor versions (i. e.: `3.8` for
	&apos; LibreOffice 7.3). Otherwise you can only use the
	&apos; built-in libraries included with LibreOffice
	&apos; python. (i.e. : `(SPD_READ_TEXT_PY)` works)
	&apos;
	&apos; Linux LibreOffice installations use the system
	&apos; version of python3, and pip3 just works
	Dim a0 As Variant
	Dim a1 As Variant
	Dim x# : x = 0
	Dim y# : y = 0
	Dim py_ver$ : py_ver = fsMacPythonVersion()
	PosixPythonPath = &quot;&quot;
	If Len(fsAppImageResourcePath(&quot;python&quot;)) &lt;&gt; 0 Then
		PosixPythonPath = fsAppImageResourcePath(&quot;python&quot;)
	Else
		Select Case Len(py_ver)
			Case 0
			a0 = Array(&quot;/usr&quot;)
			a1 = Array(&quot;python3&quot;, &quot;python&quot;)
			Case Else
			&apos; [developer, system, LibreOffice]
			a0 = Array(_
			&quot;/Library/Frameworks/Python.framework/Versions/&quot; &amp; py_ver, _
			&quot;/usr&quot;, _
			&quot;/Applications/LibreOffice.app/Contents/Frameworks/LibreOfficePython.framework/Versions/&quot; &amp; py_ver)
			a1 = Array(&quot;python&quot; &amp; py_ver, &quot;python3&quot;)
		End Select
		
		For y = Lbound(a0) to Ubound(a0)
			For x = Lbound(a1) To Ubound(a1)
				If fileexists(a0(y) &amp; &quot;/bin/&quot; &amp; a1(x)) Then
					PosixPythonPath = a0(y) &amp; &quot;/bin/&quot; &amp; a1(x)
					Exit Function
				End If
			Next
		Next
	End If
End Function


Function fbOsaScriptOk() As Boolean
	&apos; Return `True` if MacOS `osascript` is executable
	On Error GoTo fbOsaScriptOkErr
	fbOsaScriptOk = Shell(&quot;osascript&quot;, 0, &quot;--help&quot;) = 0
	Exit Function
	fbOsaScriptOkErr:
	fbOsaScriptOk = False
End Function


Function fvTts_config_createDefaultConfig( _
	msgs() As Variant, _
	errorCode As Integer) As Variant
	
	&apos; The place to store the configuration data
	Dim config(fiCountConfigOptions) As Variant
	
	&apos; Create default values for variables
	If GetGUIType() = 1 Then
		&apos; Windows
		config(fiFestivalOption()) = False
		If fileexists(fsProgramDirectoryx86() &amp; &quot;festival&quot;) Then
			config(fiFestivalPath()) = fsProgramDirectoryx86() &amp; &quot;festival\festival.exe&quot;
		Else
 			config(fiFestivalPath()) = fsProgramDirectory() &amp; &quot;festival\festival.exe&quot;
		End If
		config(fiFestivalComboChoice()) = &quot;(audio_mode &apos;async)(tts&quot;&quot;(TMP)&quot;&quot; nil) (quit)&quot;
		config(fiExternalOption()) = True
		config(fiHtmlOption()) = False
		config(fiSmartSelectCheckBox()) = 0
		config(fiHtmlComboURL()) = &quot;https://translate.google.com/?&amp;langpair=auto|(LANGUAGE_CODE)&amp;tbb=1&amp;ie=&amp;hl=(LANGUAGE_CODE)&amp;text=(OOO_WEBTEXT)&quot;
		If Len(WinSpeechProgramPath()) = 0 Then
			config(fiExternalProgramPath()) = &quot;wscript.exe&quot;
		Else
			config(fiExternalProgramPath()) = WinSpeechProgramPath()
		End If
			config(fiExternalCommand()) = WinSpeechArgument()
		config(fiAlwaysShowDialogCheckBox()) = 1
		config(fiDialogLanguageCombo()) = fsGetLanguage()
	Else
		&apos; Posix or MacOS
		config(fiFestivalOption()) = False
		config(fiFestivalPath()) = &quot;/usr/bin/festival&quot;
		config(fiFestivalComboChoice()) = &quot;(audio_mode &apos;async)(tts&quot;&quot;(TMP)&quot;&quot; nil) (quit)&quot;
		config(fiExternalOption()) = True
		config(fiHtmlOption()) = False
		config(fiSmartSelectCheckBox()) = 0
		config(fiHtmlComboURL()) = &quot;https://translate.google.com/?&amp;langpair=auto|(LANGUAGE_CODE)&amp;tbb=1&amp;ie=&amp;hl=(LANGUAGE_CODE)&amp;text=(OOO_WEBTEXT)&quot;
		If fsGetOS() = &quot;UNIX&quot; Then
			&apos; Linux
			If Len(PosixPythonPath()) &lt;&gt; 0 Then
				config(fiExternalProgramPath()) = PosixPythonPath()
			Else
				config(fiExternalProgramPath()) = &quot;/usr/bin/python&quot;
			End If
			If Len(fsFindAppPath(&quot;pico2wave&quot;)) &lt;&gt; 0 Then
				config(fiExternalCommand()) = &quot;&quot;&quot;(PICO_READ_TEXT_PY)&quot;&quot; &quot; &amp; _
				&quot;--language=(SELECTION_LANGUAGE_COUNTRY_CODE) --visible=False &quot;&quot;(TMP)&quot;&quot;&quot;
			ElseIf Len(fsFindAppPath(&quot;text2wave&quot;)) &lt;&gt; 0 Or Len(fsFindAppPath(&quot;flite&quot;)) &lt;&gt; 0 Then
				config(fiExternalCommand()) = &quot;&quot;&quot;(FESTIVAL_READ_TEXT_PY)&quot;&quot; &quot; &amp; _
				&quot;--visible=False &quot;&quot;(TMP)&quot;&quot;&quot;
			ElseIf Len(fsFindAppPath(&quot;open_jtalk&quot;)) &lt;&gt; 0 And fsGetLanguage() = &quot;ja&quot; Then
				&apos; Japanese
				config(fiExternalCommand()) = &quot;&quot;&quot;(OPENJTALK_READ_TEXT_PY)&quot;&quot; &quot; &amp; _
				&quot;--visible=False &quot;&quot;(TMP)&quot;&quot;&quot;
			ElseIf fileexists(environ(&quot;HOME&quot;) &amp; _
				&quot;/.speech-dispatcher/conf/speechd.conf&quot;) Or fileexists( _
				environ(&quot;HOME&quot;) &amp; _
				&quot;/.config/speech-dispatcher/speechd.conf&quot;) Or Len( _
				fsAppImageResourcePath(&quot;python&quot;)) &lt;&gt; 0 Then
				
				config(fiExternalCommand()) = &quot;&quot;&quot;(SPD_READ_TEXT_PY)&quot;&quot;&quot; &amp; _
				&quot; --language &quot;&quot;(SELECTION_LANGUAGE_COUNTRY_CODE)&quot;&quot;&quot; &amp; _
				&quot; &quot;&quot;(TMP)&quot;&quot;&quot;
			ElseIf fbHaveEspeak() Then
				config(fiExternalCommand()) = &quot;&quot;&quot;(ESPEAK_READ_TEXT_PY)&quot;&quot; &quot; &amp; _
				&quot;--language=(SELECTION_LANGUAGE_COUNTRY_CODE) --visible=False &quot;&quot;(TMP)&quot;&quot;&quot;
			Else
				config(fiExternalCommand()) = &quot;&quot;&quot;(SPD_READ_TEXT_PY)&quot;&quot;&quot; &amp; _
				&quot; --language &quot;&quot;(SELECTION_LANGUAGE_COUNTRY_CODE)&quot;&quot;&quot; &amp; _
				&quot; &quot;&quot;(TMP)&quot;&quot;&quot;			
			End If
		Else
			&apos;Mac (MacOS)
			If fbOsaScriptOk() And fbHaveItunes() Then
				config(fiExternalProgramPath()) = AppleScriptPath()
				config(fiExternalCommand()) = &quot;&quot;&quot;(SAY_APPLESCRIPT)&quot;&quot;&quot;
			Else
				config(fiExternalProgramPath()) = PosixPythonPath()
				config(fiExternalCommand()) =  &quot;&quot;&quot;(SPD_READ_TEXT_PY)&quot;&quot;&quot; &amp; _
				&quot; --language &quot;&quot;(SELECTION_LANGUAGE_COUNTRY_CODE)&quot;&quot;&quot; &amp; _
				&quot; --voice &quot;&quot;AUTO&quot;&quot; &quot;&quot;(TMP)&quot;&quot;&quot;			
			End If
		End If
		config(fiAlwaysShowDialogCheckBox()) = 1
		config(fiDialogLanguageCombo()) = fsGetLanguage()
	End If
	fvTts_config_createDefaultConfig() = config()
End Function


Sub tts_config_parseLine( _
	ByVal l As String, _
	key As String, _
	value As String)
	&apos; Parses one line from the configuration file.
	&apos;
	&apos; Parameters:
	&apos; l (in) line of input to parse
	&apos; key (out) Place to put the key; &quot;&quot; if comment.
	&apos; value (out) Place to put the value; &quot;&quot; if none.
	&apos;
	&apos; if the line is a comment line then the key will
	&apos; be &quot;&quot;.
	&apos;
	Dim iEq As Integer
	
	&apos; Initialise return values
	key = &quot;&quot;
	value = &quot;&quot;
	
	&apos; Is this an empty line?
	If Len(Trim(l)) = 0 Then
		&apos; Empty - ignore
		
		&apos; Is this a comment line?
	ElseIf Left(Trim(l),1) = &quot;#&quot; Then
		&apos; Comment
		
	Else
		&apos; Parse into key=value
		iEq = InStr(l, &quot;=&quot;)
		If iEq = 0 Then
			&apos; not found - assume whole thing is key
			key = l
		Else
			key = Left(l, iEq - 1)
			value = Mid(l, iEq + 1)
		End If
	End If
End Sub


Sub tts_config_writeFile( _
	config() As Variant,ByVal configFilePath As String)
	&apos; Writes a configuration file from an array.
	&apos; This function updated 2013-08-29 - always write as UTF-8
	Dim sA As String
	Dim CR As String
	Dim ExternalCommand As String
	Dim PyVersion() As String
	Dim x As Integer
	ExternalCommand = config(fiExternalCommand())
	PyVersion = Array(&quot;3&quot;, &quot;2.7&quot;, &quot;2&quot;, &quot;&quot;)

	If Len(fsAppImageResourcePath(&quot;python&quot;)) &lt;&gt; 0 Then
		&apos; Do not record a temporary Posix python application path.
		If InStr(ExternalCommand, &quot;/python&quot;) &lt;&gt; 0 Then
			For x = Lbound(PyVersion) To Ubound(PyVersion)
				If Len(fsFindAppPath(&quot;python&quot; &amp; PyVersion(x))) &lt;&gt; 0 Then
					ExternalCommand = fsFindAppPath(&quot;python&quot; &amp; PyVersion(x))
					Exit For
				End If
			Next
		End If
	End If
	
	CR = Chr(10)
	sA = Join(Array(_
	&quot;text-to-speech.use.festival.boolean=&quot;, fsTts_util_booleanToString(config(fiFestivalOption())), CR, _
	&quot;text-to-speech.festival.path.string=&quot;, config(fiFestivalPath()), CR, _
	&quot;text-to-speech.festival.script.string=&quot;, config(fiFestivalComboChoice()), CR, _
	&quot;text-to-speech.use.espeak.boolean=&quot;, fsTts_util_booleanToString(config(fiExternalOption())), CR, _
	&quot;text-to-speech.use.html.boolean=&quot;, fsTts_util_booleanToString(config(fiHtmlOption())), CR, _
	&quot;text-to-speech.html.string=&quot;, config(fiHtmlComboURL()), CR, _
	&quot;text-to-speech.espeak.path.string=&quot;, config(fiExternalProgramPath()), CR, _
	&quot;text-to-speech.espeak.options.string=&quot;, ExternalCommand, CR, _
	&quot;text-to-speech.display.info.integer=&quot;, config(fiAlwaysShowDialogCheckBox()), CR, _
	&quot;text-to-speech.use.smart.select.integer=&quot;, config(fiSmartSelectCheckBox()), CR, _
	&quot;text-to-speech.display.language.string=&quot;, config(fiDialogLanguageCombo()), CR), &quot;&quot;)
	CreateFile(configFilePath, sA, &quot;UTF-8&quot;)
End Sub


Sub tts_config_parseFile( _
	ByVal configFilePath As String, _
	config() As Variant, _
	errorCode As Integer)
	&apos; Parses the configuration file into an array.
	&apos;
	&apos; Parameters:
	&apos; configFilePath (in) The path to the configuration file
	&apos; config() (in out) The configuration settings to update with settings
	&apos;                   from the file.
	&apos; errorCode (in out) The Error parameter.
	&apos;
	Dim sA As String
	Dim CR As String
	Dim CR2 As String
	Dim l As String
	Dim key As String
	Dim value As String
	
	CR = Chr(13)
	CR2 = Chr(10)
	sA = getTextFromFile(configFilePath, &quot;UTF-8&quot;)
	If InStr(sA, CR2) &lt; InStr(sA, CR) Then
		&apos; choose character return or line feed
		CR = CR2
	End If
	l = sA
	Do While Len(l) &gt; 0
		l = fsSuperTrim(Left(sA, InStr(sA, CR)), &quot;&quot;)
		sA = fsSuperTrim(Mid(sA, InStr(sA, CR) + 1 ), &quot;&quot;)
		tts_config_parseLine(l, key, value)
		If Len(key) &gt; 0 Then
			Select Case LCase(key)
				Case &quot;text-to-speech.use.festival.boolean&quot;
				config(fiFestivalOption()) = fbTts_util_stringToBoolean(value)
				Case &quot;text-to-speech.festival.path.string&quot;
				config(fiFestivalPath()) = value
				
				Case &quot;text-to-speech.festival.script.string&quot;
				config(fiFestivalComboChoice()) = value
				
				Case &quot;text-to-speech.use.espeak.boolean&quot;
				config(fiExternalOption()) = fbTts_util_stringToBoolean(value)
				
				Case &quot;text-to-speech.espeak.path.string&quot;
				Select Case fsGetOS()
					Case &quot;UNIX&quot;, &quot;MacOS&quot;
					If InStr(value, &quot;/python&quot;) &lt;&gt; 0 Then
						&apos; Since users sometimes use both containers and native
						&apos; apps, we update the location of the python to use.
						&apos; For example, AppImage programs usually create a mount
						&apos; point in the `/tmp/` temporary that includes a version of
						&apos; python that might be incompatible with the system python.
						config(fiExternalProgramPath()) = PosixPythonPath()
					Else
						config(fiExternalProgramPath()) = value
					End If
					Case Else
					config(fiExternalProgramPath()) = value
					End Select
				Case &quot;text-to-speech.espeak.options.string&quot;
				config(fiExternalCommand()) = value
				
				Case &quot;text-to-speech.use.html.boolean&quot;
				config(fiHtmlOption()) = fbTts_util_stringToBoolean(value)
				
				Case &quot;text-to-speech.html.string&quot;
				config(fiHtmlComboURL()) = value
				
				Case &quot;text-to-speech.display.info.integer&quot;
				config(fiAlwaysShowDialogCheckBox()) = fiStringToInteger(value)
				
				Case &quot;text-to-speech.display.language.string&quot;
				config(fiDialogLanguageCombo()) = value
				
				Case &quot;text-to-speech.use.smart.select.integer&quot;
				config(fiSmartSelectCheckBox()) = value
				Case Else
				
			End Select
		End If
	Loop
End Sub


Function fsSuperTrim( _
	ByVal sA As String, _
	ByVal unwanted_chrs As String) As String
	&apos; Trim extra unwanted characters from left and right
	&apos; of a string - like python `strip`
	&apos; * `sA` - The string to trim
	&apos; * `unwanted_chrs` - String of characters to strip
	&apos;    in the form `Chr(10) &amp; Chr(13)` or `&quot;,:;-&quot;.`
	If Len(unwanted_chrs) = 0 Then
		unwanted_chrs = Chr(10) &amp; Chr(13)
	End If
	Dim n As Integer
	Dim limit as Integer
	limit = 100
	If Len(sA) &lt; limit Then
		limit = Len(sA)
	End If
	For n = 1 To limit
		sA = Trim(sA)
		If Len(sA) = 0 Then
			Exit For
		ElseIf Instr(unwanted_chrs, Right(sA, 1)) &lt;&gt; 0 Then
			sA = Left(sA, Len(sA) - 1)
			sA = Trim(sA)
		Else
			Exit For
		End If
	Next
	For n = 1 to limit
		sA = Trim(sA)
		If Len(sA) = 0 Then
			Exit For
		ElseIf Instr(unwanted_chrs, Left(sA, 1)) &lt;&gt; 0 Then
			sA = Mid(sA, 2)
			sA = Trim(sA)
		Else
			Exit For
		End If
	Next		
	fsSuperTrim = sA
End Function


Function fsRetrieveCalcActiveCellProperty( _
	strA) As String
	&apos; Modified from sub from: Paolo Mantovani
	&apos; email: mantovani.paolo@tin.it
	&apos; published at https://sourceforge.net/projects/ooomacros/files/Andrew%20Pitonyak_s%20Macro%20Doc/2006-01-25/AndrewMacro_2006-01-25.zip/download
	&apos; Gets property of the active cell.
	Dim oOldSelection  &apos;The original selection of cell ranges
	Dim oRanges  &apos;A blank range created by the document
	Dim oActiveCell  &apos;The current active cell
	Dim sCellContent As String
	
	Rem store the current selection
	oOldSelection = ThisComponent.CurrentSelection
	oRanges = ThisComponent.createInstance(&quot;com.sun.star.sheet.SheetCellRanges&quot;)
	ThisComponent.CurrentController.Select(oRanges)
	&apos;get the active cell!
	oActiveCell = ThisComponent.CurrentSelection
	Select Case strA
		Case &quot;country&quot;
		sCellContent = oActiveCell.CharLocale.Country
		Case &quot;language&quot;
		sCellContent = oActiveCell.CharLocale.Language
		Case &quot;asian-language&quot;
		sCellContent = oActiveCell.CharLocaleAsian.Language
		Case &quot;complex-language&quot;
		sCellContent = oActiveCell.CharLocaleComplex.Language
		Case &quot;asian-country&quot;
		sCellContent = oActiveCell.CharLocaleAsian.Country
		Case &quot;complex-country&quot;
		sCellContent = oActiveCell.CharLocaleComplex.Country
		Case Else
		sCellContent = oActiveCell.getString()
	End Select
	&apos;restore the old selection (but loosing the previous active cell)
	ThisComponent.CurrentController.Select(oOldSelection)
	fsRetrieveCalcActiveCellProperty = sCellContent
End Function


Function fsGetPackageDirURL( _
	sIdentifier As String) As String
	&apos;http://www.oooforum.org/forum/viewtopic.phtml?t=72633
	Dim oPIP As Object
	
	oPIP = GetDefaultContext().getByName( _
	&quot;/singletons/com.sun.star.deployment.PackageInformationProvider&quot;)
	fsGetPackageDirURL = oPIP.getPackageLocation(sIdentifier)
End Function


Function fsGetPicturePath() As String
	Dim oDialog
	Dim oAllFiles
	Dim oFrame
	Dim oBar
	Dim sFilePickerArgs
	
	On error Goto fsGetPicturePathErr
	oDialog = createUnoService(&quot;com.sun.star.ui.dialogs.FilePicker&quot;)
	sFilePickerArgs = Array(com.sun.star.ui.dialogs.TemplateDescription.FILEOPEN_LINK_PREVIEW)
	oDialog.Initialize(sFilePickerArgs())
	oDialog.setMultiSelectionMode(0)
	oDialog.AppendFilter( &quot;JPEG, PNG&quot;, &quot;*.jpeg;*.jpg;*.png&quot;)
	oDialog.AppendFilter( &quot;BMP, GIF, JPEG, PNG, TIF, TGA&quot;, &quot;*.bmp;*.gif;*.&quot; &amp; _
	&quot;jpeg;*.jpg;*.png;*.tif;*.tiff;*.tga&quot;)
	oDialog.setTitle(fsLookUpTerm(&quot;s_read-text&quot;) &amp; _
	&quot; - &quot; &amp; &quot; (MY_IMAGE)&quot;)
	If oDialog.execute = 0 Then
		fsGetPicturePath = ConvertFromURL(fsPosterImg()) &apos;Default picture
	End If
	oAllFiles() = oDialog.getFiles()
	fsGetPicturePath = ConvertFromURL(oAllFiles(0))
	If fsGetPicturePath = &quot;&quot; Then
		fsGetPicturePath = ConvertFromURL(fsPosterImg()) &apos;Default picture
	End If
	Exit Function
	fsGetPicturePathErr:
	
	fsGetPicturePath = &quot;&quot;
End Function


Function CreatePoint( _
	ByVal x As Long, _
	ByVal y As Long) As com.sun.star.awt.Point
	&apos; OpenOffice.org Macros Explained, Third Ed., 2015. [Andrew Pitonyak](http://www.pitonyak.org)
	Dim oPoint
	oPoint = createUnoStruct( &quot;com.sun.star.awt.Point&quot; )
	oPoint.X = x
	oPoint.Y = y
	CreatePoint = oPoint
End Function


Function CreateSize( _
	ByVal x As Long, _
	ByVal y As Long) As com.sun.star.awt.Size
	&apos; OpenOffice.org Macros Explained, Third Ed., 2015. [Andrew Pitonyak](http://www.pitonyak.org)
	Dim oSize
	oSize = createUnoStruct( &quot;com.sun.star.awt.Size&quot; )
	oSize.Width = x
	oSize.Height = y
	CreateSize = oSize
End Function


Sub ChangeBackground( _
	ByVal i, _
	ByVal r1, _
	ByVal g1, _
	ByVal b1)
	&apos;AndrewMacro.odt - [Andrew Pitonyak](http://www.pitonyak.org)
	Dim oDoc As object
	Dim oDrawPages As object
	Dim oDrawPage As object
	Dim oBackground As object
	
	oDoc = ThisComponent
	If oDoc.supportsService(&quot;com.sun.star.presentation.PresentationDocument&quot;) Or _
		oDoc.supportsService(&quot;com.sun.star.drawing.DrawingDocument&quot;) Then
		oDrawPages = oDoc.getDrawPages()
		oDrawPage = oDrawPages.getByIndex(i)
		oBackground = oDoc.createInstance(&quot;com.sun.star.drawing.Background&quot;)
		oBackground.FillColor = RGB(r1, g1, b1)
		oDrawPage.Background = oBackground
	End If
End Sub

</script:module>