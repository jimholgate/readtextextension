"""Set the `piper.conf` configuration file and check other local configuration
files to allow the application to switch locally installed piper voice models
on the fly depending on the language setting.

* `en_GB-jenny_dioco-medium` -> `fr_FR-upmc-medium`
* `en_GB` -> `fr_FR`"""

ACTION = "Switch the default piper voice model"
PACKAGE = "read_text"
APP_DESCRIPTION = """

If you need a convenient way to quickly change your piper voice model settings
for all the applications that use `speech-dispatcher`, run this script.

    python3 /path_to/spd_say_set.py fr_FR
    python3 /path_to/spd_say_set.py en_GB

On compatible releases of the office application, you can use this in the
read text extension settings dialog to change the system voice on the fly:

     "(SPD_READ_TEXT_PY)" --update_local True --language "(SELECTION_LANGUAGE_CODE)" "(TMP)"

The `piper.py` settings for `speech-dispatcher` will update. You might need to
restart applications that use `speech-dispatcher` like Orca, Thorium Reader and
Firefox to apply the current speech model.

Details
-------
     
Update a local `[speech-dispatcher][1]` settings directory to use a specific
`piper-tts` voice. The extension's `[piper.conf][2]` file is similar to the
file that `[pied][3]` creates, but it does differ in a few ways.

- The extension omits the voice number flag if the voice number is zero.
  because some releases of `piper` raise an error if the command includes
  `-s 0`.
- The extension uses lengthening the vowel length to speak more slowly. In
  most cases, this results in naturalistic speech. If `pied` can use the
  `sox` library, then it is able to stretch or compress sound duration
  and raise or lower pitch; otherwise it cannot implement these functions.
- The extension can use voice models that the `pied` application does not
  offer. The official `voices.json` reference includes voice models that
  have restricted licenses or other potential legal issues. If you use
  a script to add an unofficial voice model to your installation, then the
  extension can set the local user's speech configuration file to use it.
- If you use "(SPD_READ_TEXT_PY)" instead of "(PIPER_READ_TEXT_PY)" then
  pied will not be able to access all the current voices available on the
  [huggingface piper-voices archive][4] that you have downloaded using the
  extension's own piper-voice update tool.

[1]: https://freebsoft.org/speechd
[2]: https://github.com/rhasspy/piper
[3]: https://pied.mikeasoft.com/
[4]: https://huggingface.co/rhasspy/piper-voices/tree/main
"""

import codecs
import os
import sys
import piper_read_text
import readtexttools


class SpdSetter(object):
    """"""

    def __init__(self) -> None:
        """"""
        self.speech_dispatcher_dir = os.path.expanduser("~/.config/speech-dispatcher")
        self.clients_dir = "{0}/clients".format(self.speech_dispatcher_dir)
        self.modules_dir = "{0}/modules".format(self.speech_dispatcher_dir)
        self.speechd_conf = "{0}/speechd.conf".format(self.speech_dispatcher_dir)
        self.piper_conf = "{0}/piper.conf".format(self.modules_dir)
        self.speaker = ""
        _piper = piper_read_text.PiperTTSClass()
        _generator = "READ TEXT"
        if "{0}pied{1}".format(os.sep, os.sep) in _piper.app:
            _generator = "PIED"
        self.speechd_conf_contents = """###
### THIS CONFIG WAS GENERATED BY {0}
###

SymbolsPreproc "char"
SymbolsPreprocFile "gender-neutral.dic"
SymbolsPreprocFile "font-variants.dic"
SymbolsPreprocFile "symbols.dic"
SymbolsPreprocFile "emojis.dic"
SymbolsPreprocFile "orca.dic"
SymbolsPreprocFile "orca-chars.dic"
AddModule "piper" "sd_generic" "piper.conf"
DefaultModule "piper"
Include "clients/*.conf"
""".format(
            _generator,
        )
        self.piper_conf_contents = ""
        self.piper_conf_values = ""

    def piper_code(
        self,
        _piper_path: str = "~/path_to/piper_dir/piper",
        _model_path: str = "~/path_to/en_GB-jenny_dioco-medium.onnx",
        _speaker: int = 0,
    ) -> str:
        """If the path to the `piper` application and a piper `.onnx` speech
        model are valid, then return speech-dispatcher code that uses that
        model, otherwise return `""`"""
        model_path = os.path.expanduser(_model_path)
        piper_path = os.path.expanduser(_piper_path)
        _piper = piper_read_text.PiperTTSClass()
        lang_env = "en_GB"
        if any(_test not in model_path for _test in [os.sep, "_", "-", ".onnx"]):
            self.piper_conf_contents = ""
            return ""

        if any(not os.path.isfile(_test) for _test in [model_path, piper_path]):
            self.piper_conf_contents = ""
            return ""
        if _speaker in ["0", "", 0, False]:
            self.speaker = ""
        else:
            try:
                self.speaker = " -s {0}".format(str(int(_speaker)))
            except:
                self.speaker = ""
        if _piper.length_scale == 1:
            length_scale_flag = ""
        else:
            length_scale_flag = " --length_scale {0}".format(_piper.length_scale)
        if os.sep in model_path:
            lang_env = (os.path.split(model_path)[1]).split("-")[0]
        if os.path.isfile(model_path):
            self.piper_conf_values = """    echo \\'$DATA\\' | {0} --model {1}{2}{3} --output_raw | $PROCESS | $OUTPUT;"
GenericRateAdd 1
GenericPitchAdd 1
GenericVolumeAdd 1
GenericRateMultiply 1
GenericPitchMultiply 1000
AddVoice "{4}" "MALE1" "Piper"
""".format(
                os.path.realpath(piper_path),
                os.path.realpath(model_path),
                self.speaker,
                length_scale_flag,
                lang_env,
            )
            piper_conf_contents = """GenericExecuteSynth "if command -v sox > /dev/null; then\\
        PROCESS=\\'sox -r 22050 -c 1 -b 16 -e signed-integer -t raw - -t wav - tempo $RATE pitch $PITCH norm\\';\\
        if command -v paplay > /dev/null; then\\
            OUTPUT=\\'$PLAY_COMMAND\\';\\
        else\\
            OUTPUT=\\'aplay\\';\\
        fi;\\
    elif command -v paplay > /dev/null; then\\
        PROCESS=\\'cat\\'; OUTPUT=\\'$PLAY_COMMAND --raw --channels 1 --rate 22050\\';\\
    else\\
        PROCESS=\\'cat\\'; OUTPUT=\\'aplay -t raw -c 1 -r 22050 -f S16_LE\\';\\
    fi;\\
{0}""".format(
                self.piper_conf_values
            )
        self.piper_conf_contents = piper_conf_contents
        return piper_conf_contents

    def edit_piper_conf(self, _search: str = "en_", verbose: bool = False) -> bool:
        """The `_search` can be one of the following, in order of decreasing
        specificity:

        - `~/path_to/en_GB-jenny_dioco-medium`
        - `en_GB-jenny_dioco-medium`
        - `en_GB`
        - `en`"""
        _piper = piper_read_text.PiperTTSClass()
        _meta = readtexttools.ImportedMetaData()
        if len(_meta.execute_command("pgrep pied")) != 0:
            # Avoid editing `speech-dispatcher` settings if the `pied` speech
            # model configuration program is active. The `psutil` python
            # library is not available by default on some Linux distributions.
            return False
        if len(_search) == 0:
            _search = "en_"
        try:
            model_path_list = _piper.model_path_list(_search)
            if len(model_path_list) == 0:
                return False
            _first_result = model_path_list[0]
        except (IndexError, TypeError):
            return False
        _configuration_code = self.piper_code(
            _piper.app, _first_result, _piper.use_specific_onnx_voice_no
        )
        if len(_configuration_code) == 0:
            return False

        for _dir in [self.clients_dir, self.modules_dir]:
            if not os.path.isdir(_dir):
                try:
                    os.makedirs(_dir)
                except:
                    return False
        speechdconf_text = ""
        if os.path.isfile(self.speechd_conf):
            f = codecs.open(
                self.speechd_conf, mode="r", encoding="utf-8", errors="backslashreplace"
            )
            speechdconf_text = f.read()
            f.close()
        _conf_ok = True
        if not 'DefaultModule "piper"' in speechdconf_text:
            _conf_ok = readtexttools.write_plain_text_file(
                self.speechd_conf, self.speechd_conf_contents, "utf-8"
            )
        if not _conf_ok:
            return False
        piper_conf_text = ""
        if os.path.isfile(self.piper_conf):
            f = codecs.open(
                self.piper_conf, mode="r", encoding="utf-8", errors="backslashreplace"
            )
            piper_conf_text = f.read()
            f.close()
        if self.piper_conf_values.strip() in piper_conf_text:
            if verbose:
                print("The existing `piper.conf` settings file is current.")
            return True
        if verbose:
            print("The previous `piper.conf` settings file was not current.")
        return readtexttools.write_plain_text_file(
            self.piper_conf, _configuration_code, "utf-8"
        )


def main():
    """Update the local speech-dispatcher configuration files to use a valid
    piper speech synthesis module."""
    _meta = readtexttools.ImportedMetaData()
    if len(_meta.execute_command("pgrep pied")) != 0:
        sys.exit(0)
    _spdset = SpdSetter()
    _search = "en_GB-jenny_dioco-medium"
    try:
        if sys.argv[-1] != sys.argv[0]:
            _search = sys.argv[-1]
    except:
        pass
    if _spdset.edit_piper_conf(_search, True):
        print(
            """The current local `piper.conf` uses a compatible
`{0}` speech model.""".format(
                _search
            )
        )
    else:
        print(
            """Failed to update the local `piper.conf` file with a matching
`{0}` speech model.""".format(
                _search
            )
        )


if __name__ == "__main__":
    main()
